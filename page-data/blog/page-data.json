{
    "componentChunkName": "component---src-templates-blog-tsx",
    "path": "/blog/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"fields":{"slug":"/2021/11/05/contract-testing-asynchronous-messaging-pact-junit-mockk/","readingTime":{"text":"14 min read"}},"frontmatter":{"title":"Contract testing asynchronous messaging with Pact and MockK","description":"In the last weeks I worked with my colleague Felice Giovinazzo on a new feature for the refund  process. Letâ€™s see how we used pact to test a message-based interaction between two microservices with Pact","authors":["fabrizio_duroni","felice_giovinazzo","stefano_varesi"],"date":"05 Nov 2021","image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8e8f8","images":{"fallback":{"src":"/static/dd3ff75371a3dc43c74c7eca205a8ad1/81d83/pact-mockk-message.jpg","srcSet":"/static/dd3ff75371a3dc43c74c7eca205a8ad1/1dcb4/pact-mockk-message.jpg 750w,\n/static/dd3ff75371a3dc43c74c7eca205a8ad1/81d83/pact-mockk-message.jpg 1020w","sizes":"100vw"},"sources":[{"srcSet":"/static/dd3ff75371a3dc43c74c7eca205a8ad1/22a18/pact-mockk-message.webp 750w,\n/static/dd3ff75371a3dc43c74c7eca205a8ad1/427ae/pact-mockk-message.webp 1020w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.7352941176470588}}}}}},{"node":{"fields":{"slug":"/2021/06/06/ddd-dictionary/","readingTime":{"text":"14 min read"}},"frontmatter":{"title":"A Domain Driven Design dictionary for newbies","description":"In the last months, I started to hear a lot of stuff about Domain Driven Design. What is DDD? What does it try to solve? This is a post for all the newbies (like me) that are searching for a definition of what DDD is, which are its main parts and what is its main goal.","authors":["fabrizio_duroni"],"date":"06 Jun 2021","image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/1da53d47a94e68f750fe617fa593d940/9a077/ddd-bounded-context-ubiquitous-language.jpg","srcSet":"/static/1da53d47a94e68f750fe617fa593d940/5343e/ddd-bounded-context-ubiquitous-language.jpg 750w,\n/static/1da53d47a94e68f750fe617fa593d940/9a077/ddd-bounded-context-ubiquitous-language.jpg 1000w","sizes":"100vw"},"sources":[{"srcSet":"/static/1da53d47a94e68f750fe617fa593d940/80f13/ddd-bounded-context-ubiquitous-language.webp 750w,\n/static/1da53d47a94e68f750fe617fa593d940/4538d/ddd-bounded-context-ubiquitous-language.webp 1000w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6}}}}}},{"node":{"fields":{"slug":"/2021/05/31/swift-linux-test-local-ci-docker-container/","readingTime":{"text":"4 min read"}},"frontmatter":{"title":"How to test your Swift source code on Linux: locally and on Github Actions","description":"Quick tips (useful for open source projects) for testing your Swift source code on Linux locally  and with Github Actions.","authors":["fabrizio_duroni"],"date":"15 May 2021","image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/e0c0c8a102b0d95681f1fdec7df16f9f/d7ad7/spm-swift.jpg","srcSet":"/static/e0c0c8a102b0d95681f1fdec7df16f9f/5f965/spm-swift.jpg 750w,\n/static/e0c0c8a102b0d95681f1fdec7df16f9f/d7ad7/spm-swift.jpg 1024w","sizes":"100vw"},"sources":[{"srcSet":"/static/e0c0c8a102b0d95681f1fdec7df16f9f/ee7ce/spm-swift.webp 750w,\n/static/e0c0c8a102b0d95681f1fdec7df16f9f/59a47/spm-swift.webp 1024w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5}}}}}},{"node":{"fields":{"slug":"/2021/03/08/ios-test-multiple-configuration-test-plan/","readingTime":{"text":"7 min read"}},"frontmatter":{"title":"Better organize tests and run them against multiple configuration with Xcode Test Plan","description":"Recently I added a lot of Unit and UI tests to RangeUISlider, one of my open source projects. Let's see how I grouped them and run them against multiple configurations with Xcode Test Plan.","authors":["fabrizio_duroni"],"date":"08 Mar 2021","image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#e8e8e8","images":{"fallback":{"src":"/static/060ac0659db724ed4463acbaf78f0e5f/05276/test-plans-succeeded.jpg","srcSet":"/static/060ac0659db724ed4463acbaf78f0e5f/20c4c/test-plans-succeeded.jpg 750w,\n/static/060ac0659db724ed4463acbaf78f0e5f/05276/test-plans-succeeded.jpg 1000w","sizes":"100vw"},"sources":[{"srcSet":"/static/060ac0659db724ed4463acbaf78f0e5f/0fc4b/test-plans-succeeded.webp 750w,\n/static/060ac0659db724ed4463acbaf78f0e5f/1df1a/test-plans-succeeded.webp 1000w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.4}}}}}},{"node":{"fields":{"slug":"/2021/01/27/kotlin-junit5-mockk/","readingTime":{"text":"10 min read"}},"frontmatter":{"title":"Unit testing in Kotlin with JUnit 5 and MockK","description":"I recently discovered MockK, a mocking library created for Kotlin. Let's see how it is possible to write modern unit tests with MockK + JUnit 5.","authors":["fabrizio_duroni"],"date":"27 Jan 2021","image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#e8c8c8","images":{"fallback":{"src":"/static/3abc914507de97c6aad016c603c0ce5f/05276/mockk-junit5-kotlin.jpg","srcSet":"/static/3abc914507de97c6aad016c603c0ce5f/20c4c/mockk-junit5-kotlin.jpg 750w,\n/static/3abc914507de97c6aad016c603c0ce5f/05276/mockk-junit5-kotlin.jpg 1000w","sizes":"100vw"},"sources":[{"srcSet":"/static/3abc914507de97c6aad016c603c0ce5f/0fc4b/mockk-junit5-kotlin.webp 750w,\n/static/3abc914507de97c6aad016c603c0ce5f/1df1a/mockk-junit5-kotlin.webp 1000w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.4}}}}}},{"node":{"fields":{"slug":"/2020/12/23/rest-template-webclient-spring-boot/","readingTime":{"text":"12 min read"}},"frontmatter":{"title":"Spring Boot + Kotlin Rest client cheatsheet: RestTemplate and Webclient","description":"During the last months I worked a lot with Spring Boot backend applications. In this post I explain how you can consume a REST api from a Spring Boot application using RestTemplate and (the new) WebClient.","authors":["fabrizio_duroni"],"date":"23 Dec 2020","image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/f6f0c8ac72a265b5fc255e0c8104de54/a06b6/spring-boot-rest.jpg","srcSet":"/static/f6f0c8ac72a265b5fc255e0c8104de54/5f965/spring-boot-rest.jpg 750w,\n/static/f6f0c8ac72a265b5fc255e0c8104de54/a06b6/spring-boot-rest.jpg 1000w","sizes":"100vw"},"sources":[{"srcSet":"/static/f6f0c8ac72a265b5fc255e0c8104de54/ee7ce/spring-boot-rest.webp 750w,\n/static/f6f0c8ac72a265b5fc255e0c8104de54/0f033/spring-boot-rest.webp 1000w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5}}}}}},{"node":{"fields":{"slug":"/2020/10/19/swift-package-manager-resources/","readingTime":{"text":"7 min read"}},"frontmatter":{"title":"Swift Package Manager: bundling resources with a Swift Package","description":"Recently I upgraded my ID3TagEditor swift package to the latest Swift tools version (5.3). During the upgraded I discovered that now you can bundle resources with your Swift package. In this post I will show you how  you can do this, and also an interesting trick in order to be able to build a project as a Swift Package and as a standard project from Xcode.","authors":["fabrizio_duroni"],"date":"19 Oct 2020","image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f88838","images":{"fallback":{"src":"/static/f4f7b7a6f4798ee4d6a3e41dd763b7e6/05276/swiftpm-resources.jpg","srcSet":"/static/f4f7b7a6f4798ee4d6a3e41dd763b7e6/20c4c/swiftpm-resources.jpg 750w,\n/static/f4f7b7a6f4798ee4d6a3e41dd763b7e6/05276/swiftpm-resources.jpg 1000w","sizes":"100vw"},"sources":[{"srcSet":"/static/f4f7b7a6f4798ee4d6a3e41dd763b7e6/0fc4b/swiftpm-resources.webp 750w,\n/static/f4f7b7a6f4798ee4d6a3e41dd763b7e6/1df1a/swiftpm-resources.webp 1000w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.4}}}}}},{"node":{"fields":{"slug":"/2020/08/07/webpack-workbox-service-worker-typescript/","readingTime":{"text":"13 min read"}},"frontmatter":{"title":"Create a service worker with Workbox, Webpack and TypeScript","description":"Recently I migrated my website to Webpack and TypeScript. I decided also to give a try to Workbox, a set of Google libraries to improve the creation of a Progressive Web App. Let's see how easy it is to create a PWA with this tools.","authors":["fabrizio_duroni"],"date":"07 Aug 2020","image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/609b70250520d9dec971e686fafd5fbc/bae77/workbox.jpg","srcSet":"/static/609b70250520d9dec971e686fafd5fbc/b91c1/workbox.jpg 750w,\n/static/609b70250520d9dec971e686fafd5fbc/a3008/workbox.jpg 1080w,\n/static/609b70250520d9dec971e686fafd5fbc/d1ba1/workbox.jpg 1366w,\n/static/609b70250520d9dec971e686fafd5fbc/bae77/workbox.jpg 1500w","sizes":"100vw"},"sources":[{"srcSet":"/static/609b70250520d9dec971e686fafd5fbc/be179/workbox.webp 750w,\n/static/609b70250520d9dec971e686fafd5fbc/1eb10/workbox.webp 1080w,\n/static/609b70250520d9dec971e686fafd5fbc/e34d1/workbox.webp 1366w,\n/static/609b70250520d9dec971e686fafd5fbc/6b2e7/workbox.webp 1500w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.4666666666666667}}}}}},{"node":{"fields":{"slug":"/2020/07/02/expose-uikit-to-swiftui/","readingTime":{"text":"8 min read"}},"frontmatter":{"title":"Use UIKit components in SwiftUI: UIViewControllerRepresentable and UIViewRepresentable","description":"Do you know that it is possible to use UKit components in SwiftUI? Let's see how you can use UIViewRepresentable and UIViewControllerRepresentable to use your UIKit based component or to fill the gap for missing SwiftUI API.","authors":["fabrizio_duroni"],"date":"02 Jul 2020","image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#883848","images":{"fallback":{"src":"/static/f0e2ac15f2a686b94797634972601225/a6b2a/use-uikit-in-swiftui.jpg","srcSet":"/static/f0e2ac15f2a686b94797634972601225/1a064/use-uikit-in-swiftui.jpg 750w,\n/static/f0e2ac15f2a686b94797634972601225/d46c4/use-uikit-in-swiftui.jpg 1080w,\n/static/f0e2ac15f2a686b94797634972601225/f1277/use-uikit-in-swiftui.jpg 1366w,\n/static/f0e2ac15f2a686b94797634972601225/a6b2a/use-uikit-in-swiftui.jpg 1920w","sizes":"100vw"},"sources":[{"srcSet":"/static/f0e2ac15f2a686b94797634972601225/f1ea4/use-uikit-in-swiftui.webp 750w,\n/static/f0e2ac15f2a686b94797634972601225/8da40/use-uikit-in-swiftui.webp 1080w,\n/static/f0e2ac15f2a686b94797634972601225/d9667/use-uikit-in-swiftui.webp 1366w,\n/static/f0e2ac15f2a686b94797634972601225/e04a9/use-uikit-in-swiftui.webp 1920w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.359375}}}}}},{"node":{"fields":{"slug":"/2020/06/02/dynamic-imports-webpack-chunks/","readingTime":{"text":"5 min read"}},"frontmatter":{"title":"Lazy loading of JavaScript modules by using dynamic imports and code splitting with Webpack","description":"Most of the time you have a big JavaScript codebase for your website but you need only a small fraction of it when a page is requested. Is it possible to load chunks of JavaScript code only when they are really needed? Yes you can with Webpack and its code splitting feature based on a syntax equal to the one of ES2020 dynamic imports.","authors":["fabrizio_duroni"],"date":"02 Jun 2020","image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/f16557552d14422a46366305386bb6be/41d5c/webpack-code-split.jpg","srcSet":"/static/f16557552d14422a46366305386bb6be/bdfc6/webpack-code-split.jpg 750w,\n/static/f16557552d14422a46366305386bb6be/0a3b0/webpack-code-split.jpg 1080w,\n/static/f16557552d14422a46366305386bb6be/41d5c/webpack-code-split.jpg 1100w","sizes":"100vw"},"sources":[{"srcSet":"/static/f16557552d14422a46366305386bb6be/c796b/webpack-code-split.webp 750w,\n/static/f16557552d14422a46366305386bb6be/6b05a/webpack-code-split.webp 1080w,\n/static/f16557552d14422a46366305386bb6be/1325f/webpack-code-split.webp 1100w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6818181818181819}}}}}}]},"site":{"siteMetadata":{"title":"Fabrizio Duroni | Fabrizio Duroni â€˜Chicio Codingâ€™ official site with profile details. Official blog chicio coding. Main skills: mobile application development, computer graphics, web development.","author":"Fabrizio Duroni","featuredImage":"/chicio-coding-feature-graphic.jpg"}}},"pageContext":{"limit":10,"skip":0,"numberOfPages":8,"currentPage":1}},
    "staticQueryHashes": ["3076394108","3736063423","4028829600"]}