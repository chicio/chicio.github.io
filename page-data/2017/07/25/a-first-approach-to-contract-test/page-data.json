{"componentChunkName":"component---src-templates-post-tsx","path":"/2017/07/25/a-first-approach-to-contract-test/","result":{"data":{"markdownRemark":{"html":"<p><em>In this post I will talk about contract test: what they are and how you can use them.</em></p>\n<hr>\n<p>Sometimes you have to unit test multiple implementations of the same interface. Basically you have the same tests for\nmultiple concrete implementation of the same interface. In a case like this one, contract test could help you save a lot\nof time. By using contract test you will be able to run the same set of tests for different concrete implementations.<br>\nHow does it work? The main point is to have a template base abstract \"ContractTest\" test class that incapsulate the\nlogic of the tests using abstract methods that use the base interface of the objects under test. These abstract methods\nwill be implemented in the subclasses of this \"ContractTest\" class and they will feed the test with a concrete\nimplementation of the interface used in the declaration of the abstract methods.<br>\nLet's see an example to make everything more clear!!!<br>\nThe example is a standalone Java project that uses JUnit 4 and Mockito 2.8. Obviously, you can apply this concept to\nother languages/platform (in fact, I learned and implemented contract test while I was developing a new feature inside\nan Android App <img class=\"emoji-icon\" alt=\"emoji-heart_eyes\" data-icon=\"emoji-heart_eyes\" style=\"display: inline; margin: 0; position: relative; width: 25px\" src=\"data:image/png;base64, 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\" title=\"emoji-heart_eyes\">).<br>\nSuppose for example that we have the following interface:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Command</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We have two objects that implement that interface: AccountCommand and SettingsCommand.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountCommand</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Command</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MenuActionsListener</span> menuActionsListener<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">AccountCommand</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MenuActionsListener</span> menuActionsListener<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>menuActionsListener <span class=\"token operator\">=</span> menuActionsListener<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        menuActionsListener<span class=\"token punctuation\">.</span><span class=\"token function\">onAccountSelected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SettingsCommand</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Command</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MenuActionsListener</span> menuActionsListener<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">SettingsCommand</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MenuActionsListener</span> menuActionsListener<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>menuActionsListener <span class=\"token operator\">=</span> menuActionsListener<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        menuActionsListener<span class=\"token punctuation\">.</span><span class=\"token function\">onSettingsSelected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you can see the two implementations look very similar. So it's time to see how contract test can help us <img class=\"emoji-icon\" alt=\"emoji-metal\" data-icon=\"emoji-metal\" style=\"display: inline; margin: 0; position: relative; width: 25px\" src=\"data:image/png;base64, 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\" title=\"emoji-metal\">!!\nWe can write a <code class=\"language-text\">CommandContract</code> base test class that contains the logic of the test we want to write. In our specific\ncase we want to assure that when a command is executed, by calling the <code class=\"language-text\">execute()</code> method, the <code class=\"language-text\">menuActionsListener</code> is\ncalled with the correct method on each concrete implementation of <code class=\"language-text\">Command</code>. So our <code class=\"language-text\">CommandContract</code> implementation is:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CommandContract</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Command</span> command<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MenuActionsListener</span> menuActionsListener<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">commandIsExecuted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">givenAMenuActionListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        command <span class=\"token operator\">=</span> <span class=\"token function\">givenACommand</span><span class=\"token punctuation\">(</span>menuActionsListener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">whenACommandIsExecuted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">thenTheCorrectMenuActionIsInvoked</span><span class=\"token punctuation\">(</span>menuActionsListener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">givenAMenuActionListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        menuActionsListener <span class=\"token operator\">=</span> <span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MenuActionsListener</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">Command</span> <span class=\"token function\">givenACommand</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MenuActionsListener</span> menuActionsListener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">whenACommandIsExecuted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        command<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">thenTheCorrectMenuActionIsInvoked</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MenuActionsListener</span> menuActionsListener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you can see in the <code class=\"language-text\">commandIsExecuted()</code> test we use all the abstract method to define the test of generic command\nimplementation. Now in the test subclasses we will implement the abstract method to feed the test with the various\nimplementation of our concrete commands.<br>\nSo we create an <code class=\"language-text\">AccountCommandTest</code> class, subclass of <code class=\"language-text\">CommandContract</code>, to test our <code class=\"language-text\">AccountCommand</code> class:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountCommandTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CommandContract</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Command</span> <span class=\"token function\">givenACommand</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MenuActionsListener</span> menuActionsListener<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AccountCommand</span><span class=\"token punctuation\">(</span>menuActionsListener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">thenTheCorrectMenuActionIsInvoked</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MenuActionsListener</span> menuActionsListener<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Mockito</span><span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>menuActionsListener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">onAccountSelected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We create also a <code class=\"language-text\">SettingsCommandTest</code> class, subclass of <code class=\"language-text\">CommandContract</code>, to test our <code class=\"language-text\">AccountCommand</code> class:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SettingsCommandTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CommandContract</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Command</span> <span class=\"token function\">givenACommand</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MenuActionsListener</span> menuActionsListener<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SettingsCommand</span><span class=\"token punctuation\">(</span>menuActionsListener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">thenTheCorrectMenuActionIsInvoked</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MenuActionsListener</span> menuActionsListener<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Mockito</span><span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>menuActionsListener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">onSettingsSelected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you can see we tested all our concrete <code class=\"language-text\">Command</code> implementations without replicating the unit tests logic.\nWonderful <img class=\"emoji-icon\" alt=\"emoji-open_mouth\" data-icon=\"emoji-open_mouth\" style=\"display: inline; margin: 0; position: relative; width: 25px\" src=\"data:image/png;base64, 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\" title=\"emoji-open_mouth\"><img class=\"emoji-icon\" alt=\"emoji-heart_eyes\" data-icon=\"emoji-heart_eyes\" style=\"display: inline; margin: 0; position: relative; width: 25px\" src=\"data:image/png;base64, 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\" title=\"emoji-heart_eyes\">!!!<br>\n<a href=\"https://github.com/chicio/Contract-Tests\" title=\"Contract test java example\">Here</a> you can find the complete example (a Maven\nproject developed using IntelliJ, JUnit4, Mockito).<br>\nIt's time for you to test contract test on your project <img class=\"emoji-icon\" alt=\"emoji-joy\" data-icon=\"emoji-joy\" style=\"display: inline; margin: 0; position: relative; width: 25px\" src=\"data:image/png;base64, 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\" title=\"emoji-joy\"><img class=\"emoji-icon\" alt=\"emoji-laughing\" data-icon=\"emoji-laughing\" style=\"display: inline; margin: 0; position: relative; width: 25px\" src=\"data:image/png;base64, \" title=\"emoji-laughing\">!!!</p>","frontmatter":{"title":"A first approach to contract test","comments":true,"authors":["fabrizio_duroni"],"tags":["test driven development","java"],"date":"25 Jul 2017","description":"In this post I will talk about contract test: what they are and how you can use them.","math":false,"image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/d9e5133eb1646a0c819f1d2d4b279e05/34f0f/contract-test.jpg","srcSet":"/static/d9e5133eb1646a0c819f1d2d4b279e05/a1f66/contract-test.jpg 750w,\n/static/d9e5133eb1646a0c819f1d2d4b279e05/34f0f/contract-test.jpg 1000w","sizes":"100vw"},"sources":[{"srcSet":"/static/d9e5133eb1646a0c819f1d2d4b279e05/f80d9/contract-test.webp 750w,\n/static/d9e5133eb1646a0c819f1d2d4b279e05/c8851/contract-test.webp 1000w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6619999999999999}}}},"fields":{"slug":"/2017/07/25/a-first-approach-to-contract-test/","readingTime":{"text":"3 min read"}}},"site":{"siteMetadata":{"author":"Fabrizio Duroni"}}},"pageContext":{"slug":"/2017/07/25/a-first-approach-to-contract-test/"}},"staticQueryHashes":["3045757177","3309278767","3736063423","4159577854"]}