{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#e8e8e8","images":{"fallback":{"src":"/static/060ac0659db724ed4463acbaf78f0e5f/05276/test-plans-succeeded.jpg","srcSet":"/static/060ac0659db724ed4463acbaf78f0e5f/20c4c/test-plans-succeeded.jpg 750w,\n/static/060ac0659db724ed4463acbaf78f0e5f/05276/test-plans-succeeded.jpg 1000w","sizes":"100vw"},"sources":[{"srcSet":"/static/060ac0659db724ed4463acbaf78f0e5f/0fc4b/test-plans-succeeded.webp 750w,\n/static/060ac0659db724ed4463acbaf78f0e5f/1df1a/test-plans-succeeded.webp 1000w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.4}}},"title":"Better organize tests and run them against multiple configuration with Xcode Test Plan","description":"Recently I added a lot of Unit and UI tests to RangeUISlider, one of my open source projects. Let's see how I grouped them and run them against multiple configurations with Xcode Test Plan."},"fields":{"slug":"/2021/03/08/ios-test-multiple-configuration-test-plan/"}}},{"node":{"frontmatter":{"image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#e8c8c8","images":{"fallback":{"src":"/static/3abc914507de97c6aad016c603c0ce5f/05276/mockk-junit5-kotlin.jpg","srcSet":"/static/3abc914507de97c6aad016c603c0ce5f/20c4c/mockk-junit5-kotlin.jpg 750w,\n/static/3abc914507de97c6aad016c603c0ce5f/05276/mockk-junit5-kotlin.jpg 1000w","sizes":"100vw"},"sources":[{"srcSet":"/static/3abc914507de97c6aad016c603c0ce5f/0fc4b/mockk-junit5-kotlin.webp 750w,\n/static/3abc914507de97c6aad016c603c0ce5f/1df1a/mockk-junit5-kotlin.webp 1000w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.4}}},"title":"Unit testing in Kotlin with JUnit 5 and MockK","description":"I recently discovered MockK, a mocking library created for Kotlin. Let's see how it is possible to write modern unit tests with MockK + JUnit 5."},"fields":{"slug":"/2021/01/27/kotlin-junit5-mockk/"}}},{"node":{"frontmatter":{"image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/f6f0c8ac72a265b5fc255e0c8104de54/a06b6/spring-boot-rest.jpg","srcSet":"/static/f6f0c8ac72a265b5fc255e0c8104de54/5f965/spring-boot-rest.jpg 750w,\n/static/f6f0c8ac72a265b5fc255e0c8104de54/a06b6/spring-boot-rest.jpg 1000w","sizes":"100vw"},"sources":[{"srcSet":"/static/f6f0c8ac72a265b5fc255e0c8104de54/ee7ce/spring-boot-rest.webp 750w,\n/static/f6f0c8ac72a265b5fc255e0c8104de54/0f033/spring-boot-rest.webp 1000w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5}}},"title":"Spring Boot + Kotlin Rest client cheatsheet: RestTemplate and Webclient","description":"During the last months I worked a lot with Spring Boot backend applications. In this post I explain how you can consume a REST api from a Spring Boot application using RestTemplate and (the new) WebClient."},"fields":{"slug":"/2020/12/23/rest-template-webclient-spring-boot/"}}},{"node":{"frontmatter":{"image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f88838","images":{"fallback":{"src":"/static/f4f7b7a6f4798ee4d6a3e41dd763b7e6/05276/swiftpm-resources.jpg","srcSet":"/static/f4f7b7a6f4798ee4d6a3e41dd763b7e6/20c4c/swiftpm-resources.jpg 750w,\n/static/f4f7b7a6f4798ee4d6a3e41dd763b7e6/05276/swiftpm-resources.jpg 1000w","sizes":"100vw"},"sources":[{"srcSet":"/static/f4f7b7a6f4798ee4d6a3e41dd763b7e6/0fc4b/swiftpm-resources.webp 750w,\n/static/f4f7b7a6f4798ee4d6a3e41dd763b7e6/1df1a/swiftpm-resources.webp 1000w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.4}}},"title":"Swift Package Manager: bundling resources with a Swift Package","description":"Recently I upgraded my ID3TagEditor swift package to the latest Swift tools version (5.3). During the upgraded I discovered that now you can bundle resources with your Swift package. In this post I will show you how  you can do this, and also an interesting trick in order to be able to build a project as a Swift Package and as a standard project from Xcode."},"fields":{"slug":"/2020/10/19/swift-package-manager-resources/"}}}]}}}