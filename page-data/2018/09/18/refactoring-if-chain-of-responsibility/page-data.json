{"componentChunkName":"component---src-templates-post-tsx","path":"/2018/09/18/refactoring-if-chain-of-responsibility/","result":{"data":{"markdownRemark":{"html":"<p><em>In this post my colleague <a href=\"https://www.linkedin.com/in/fbonfadelli/\" title=\"Francesco Bonfadelli\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Francesco Bonfadelli</a> will\nshow you how to transform a nested if structure into a chain of responsibility.</em></p>\n<hr>\n<p>In this post I am going to describe a step by step process used to transform a nested if structure into a chain of\nresponsibility. The purpose of this operation is to make the code easier to read, thus to change without introducing\nerrors. We will also get for free a structure that will be able to apply a more generic set of rules than the one\ndefined at the beginning.<br>\nThe code of this post is based on a piece of code used to satisfy a real business need, we just removed the business\nrelated details. The language used is java.</p>\n<h4>The process in short</h4>\n<ul>\n<li>Flatten the if structure into a flat sequence of <code class=\"language-text\">if</code> clauses</li>\n<li>Extract each condition and the related action into a single class</li>\n<li>Create a common interface for all the extracted conditions</li>\n<li>Put all the conditions into a list</li>\n<li>Loop over the list and return the first action for which the condition is satisfied</li>\n</ul>\n<h4>The need</h4>\n<p>It seemed a normal day of work when one of our managers called a meeting to inform us of a very urgent feature that\nshould be put in production within 2 days. So, as it usually happens in this case, between the deriving chaos and the\ntons of alignment meetings that continuously interrupted us, we produced a code that basically \"worked\", but it was a\nbit chaotic. Luckily we were able at least to write the tests. So, once we put in production the feature, we decided to\nimmediately refactor the piece of code.</p>\n<h4>The process</h4>\n<p>We are going to see a step by step refactor of a specific class that transforms the if-nested structure into a chain of\nresponsibility. We are not going to change the tests because they work as an acceptance test for our use case. In an\nideal world, with a lot of time available, we would also write the tests of all the classes we are going to extract and\nsimplify the current test. But, you know, we are not in an ideal world 😅.<br>\nThe idea behind this refactor is to proceed with small steps, possibly using the IDE functionality (I used IDEA which is\nvery good at it), and run the tests after every operation. Also, after each step there is a commit, not only to allow\neveryone to follow the evolution of the code through the commits, but also to allow us to simply\nuse <code class=\"language-text\">git checkout .</code> in case of errors, in order to come back to the previous working version. All of this, allows\nus to keep the code strictly under control and avoid to introduce bugs during the refactoring. I will use the diff\nsyntax to show the differences between some pieces of code. Please keep in mind that I will use it in order to\nhighlight <em>only the main differences</em> between one commit and the other and it won't be the exact diff you can get with\ngit.</p>\n<h4>The initial code</h4>\n<p>Here you can find the code we were not very proud of. In particular, I report the nested if structure, which is the part\nwe are going to\nrefactor. (<a href=\"https://github.com/bonfa/IfRemovingARealUseCase/blob/a6681dd088d06244878e0527e87b4c6b5bbfd50d/src/main/java/it/fbonfadelli/hand_baggage/HandBaggageInformationFactory.java\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Source code</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HandBaggageInformationFactory</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HandBaggageInformation</span> <span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span> order<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TranslationRepository</span> translationRepository<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> renderLanguage<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> flightId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Flight</span> flight <span class=\"token operator\">=</span> order<span class=\"token punctuation\">.</span><span class=\"token function\">findFlight</span><span class=\"token punctuation\">(</span>flightId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flight<span class=\"token punctuation\">.</span><span class=\"token function\">isOneWay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isMyCompany</span><span class=\"token punctuation\">(</span>flight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">LocalDateTime</span> flightOutboundDate <span class=\"token operator\">=</span> flight<span class=\"token punctuation\">.</span><span class=\"token function\">getFirstLeg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFirstHop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeparture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flightOutboundDate<span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2018</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token function\">newMyCompanyHandBaggageInformation</span><span class=\"token punctuation\">(</span>translationRepository<span class=\"token punctuation\">,</span> renderLanguage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token function\">oldMyCompanyHandBaggageInformationInfo</span><span class=\"token punctuation\">(</span>translationRepository<span class=\"token punctuation\">,</span> renderLanguage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">noMyCompanyInformationInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//round trip</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isMyCompany</span><span class=\"token punctuation\">(</span>flight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">LocalDateTime</span> outboundDepartureDate <span class=\"token operator\">=</span> order<span class=\"token punctuation\">.</span><span class=\"token function\">getOutboundDepartureDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">LocalDate</span> returnDepartureDate <span class=\"token operator\">=</span> order<span class=\"token punctuation\">.</span><span class=\"token function\">getReturnDepartureDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>outboundDepartureDate<span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2018</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token operator\">||</span> returnDepartureDate<span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2018</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token function\">newMyCompanyHandBaggageInformation</span><span class=\"token punctuation\">(</span>translationRepository<span class=\"token punctuation\">,</span> renderLanguage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token function\">oldMyCompanyHandBaggageInformationInfo</span><span class=\"token punctuation\">(</span>translationRepository<span class=\"token punctuation\">,</span> renderLanguage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">noMyCompanyInformationInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>The execution</h4>\n<h5>1. Flatten the if structure</h5>\n<p>The idea here is to transform the nested if structure into a flat sequence of <code class=\"language-text\">if</code> clauses in order to isolate and\nexplicit each single condition.<br>\nTo do so with very small steps, we are going to remove the <code class=\"language-text\">else</code> part of each <code class=\"language-text\">if</code> clause, by transforming such part\ninto an <code class=\"language-text\">if</code> clause whose condition is the negation of the original one. In the following piece of code, you can notice\nhow the outer if-else has become a couple of <code class=\"language-text\">if</code> clauses, one for the original condition <code class=\"language-text\">flight.isOneWay()</code> and the\nother one with the opposite condition <code class=\"language-text\">!flight.isOneWay()</code>\n. (<a href=\"https://github.com/bonfa/IfRemovingARealUseCase/blob/a49340d05153074158cc59c130de6875276a92ab/src/main/java/it/fbonfadelli/hand_baggage/HandBaggageInformationFactory.java\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Source code</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">public class HandBaggageInformationFactory {\n\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   public HandBaggageInformation from(Order order, TranslationRepository translationRepository, String renderLanguage, Integer flightId) {\n<span class=\"token prefix unchanged\"> </span>       Flight flight = order.findFlight(flightId);\n<span class=\"token prefix unchanged\"> </span>       if (flight.isOneWay()) {\n<span class=\"token prefix unchanged\"> </span>           if (isMyCompany(flight)) {\n<span class=\"token prefix unchanged\"> </span>               LocalDateTime flightOutboundDate = flight.getFirstLeg().getFirstHop().getDeparture().getDate();\n<span class=\"token prefix unchanged\"> </span>               if (flightOutboundDate.isAfter(LocalDateTime.of(2018, 11, 1, 0, 0, 0))) {\n<span class=\"token prefix unchanged\"> </span>                   return newMyCompanyHandBaggageInformation(translationRepository, renderLanguage);\n<span class=\"token prefix unchanged\"> </span>               } else {\n<span class=\"token prefix unchanged\"> </span>                   return oldMyCompanyHandBaggageInformationInfo(translationRepository, renderLanguage);\n<span class=\"token prefix unchanged\"> </span>               }\n<span class=\"token prefix unchanged\"> </span>           } else {\n<span class=\"token prefix unchanged\"> </span>               return noMyCompanyInformationInfo();\n<span class=\"token prefix unchanged\"> </span>           }\n<span class=\"token prefix unchanged\"> </span>       }\n</span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>       else {\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>       if (!flight.isOneWay()) {  //round trip\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>           if (isMyCompany(flight)) {\n<span class=\"token prefix unchanged\"> </span>               LocalDateTime outboundDepartureDate = order.getOutboundDepartureDate();\n<span class=\"token prefix unchanged\"> </span>               LocalDate returnDepartureDate = order.getReturnDepartureDate();\n<span class=\"token prefix unchanged\"> </span>               if (outboundDepartureDate.isAfter(LocalDateTime.of(2018, 11, 1, 0, 0, 0))\n<span class=\"token prefix unchanged\"> </span>                       || returnDepartureDate.isAfter(LocalDate.of(2018, 10, 31))) {\n<span class=\"token prefix unchanged\"> </span>                   return newMyCompanyHandBaggageInformation(translationRepository, renderLanguage);\n<span class=\"token prefix unchanged\"> </span>               } else {\n<span class=\"token prefix unchanged\"> </span>                   return oldMyCompanyHandBaggageInformationInfo(translationRepository, renderLanguage);\n<span class=\"token prefix unchanged\"> </span>               }\n<span class=\"token prefix unchanged\"> </span>           } else {\n<span class=\"token prefix unchanged\"> </span>               return noMyCompanyInformationInfo();\n<span class=\"token prefix unchanged\"> </span>           }\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       return noMyCompanyInformationInfo();\n<span class=\"token prefix unchanged\"> </span>   }\n</span>}</code></pre></div>\n<p>Once done this, we are going to proceed with the inner <code class=\"language-text\">if-else</code> conditions, which is <code class=\"language-text\">isMyCompany(flight)</code>.\n(<a href=\"https://github.com/bonfa/IfRemovingARealUseCase/blob/193aab6e25e83ba9c453b87961fb1582b0a63828/src/main/java/it/fbonfadelli/hand_baggage/HandBaggageInformationFactory.java\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Source code</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">public class HandBaggageInformationFactory {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   public HandBaggageInformation from(Order order, TranslationRepository translationRepository, String renderLanguage, Integer flightId) {\n<span class=\"token prefix unchanged\"> </span>       Flight flight = order.findFlight(flightId);\n<span class=\"token prefix unchanged\"> </span>       if (flight.isOneWay()) {\n<span class=\"token prefix unchanged\"> </span>           if (isMyCompany(flight)) {\n<span class=\"token prefix unchanged\"> </span>               LocalDateTime flightOutboundDate = flight.getFirstLeg().getFirstHop().getDeparture().getDate();\n<span class=\"token prefix unchanged\"> </span>               if (flightOutboundDate.isAfter(LocalDateTime.of(2018, 11, 1, 0, 0, 0))) {\n<span class=\"token prefix unchanged\"> </span>                   return newMyCompanyHandBaggageInformation(translationRepository, renderLanguage);\n<span class=\"token prefix unchanged\"> </span>               } else {\n<span class=\"token prefix unchanged\"> </span>                   return oldMyCompanyHandBaggageInformationInfo(translationRepository, renderLanguage);\n<span class=\"token prefix unchanged\"> </span>               }\n<span class=\"token prefix unchanged\"> </span>           }\n</span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>           else {\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>           if (!isMyCompany(flight)) {\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>               return noMyCompanyInformationInfo();\n<span class=\"token prefix unchanged\"> </span>           }\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       if (!flight.isOneWay()) {  //round trip\n<span class=\"token prefix unchanged\"> </span>           if (isMyCompany(flight)) {\n<span class=\"token prefix unchanged\"> </span>               LocalDateTime outboundDepartureDate = order.getOutboundDepartureDate();\n<span class=\"token prefix unchanged\"> </span>               LocalDate returnDepartureDate = order.getReturnDepartureDate();\n<span class=\"token prefix unchanged\"> </span>               if (outboundDepartureDate.isAfter(LocalDateTime.of(2018, 11, 1, 0, 0, 0))\n<span class=\"token prefix unchanged\"> </span>                       || returnDepartureDate.isAfter(LocalDate.of(2018, 10, 31))) {\n<span class=\"token prefix unchanged\"> </span>                   return newMyCompanyHandBaggageInformation(translationRepository, renderLanguage);\n<span class=\"token prefix unchanged\"> </span>               } else {\n<span class=\"token prefix unchanged\"> </span>                   return oldMyCompanyHandBaggageInformationInfo(translationRepository, renderLanguage);\n<span class=\"token prefix unchanged\"> </span>               }\n<span class=\"token prefix unchanged\"> </span>           }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>           if (!isMyCompany(flight)) {\n<span class=\"token prefix unchanged\"> </span>               return noMyCompanyInformationInfo();\n<span class=\"token prefix unchanged\"> </span>           }\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       return noMyCompanyInformationInfo();\n<span class=\"token prefix unchanged\"> </span>   }\n</span>}</code></pre></div>\n<p>We proceed in this way until we have removed all the <code class=\"language-text\">else</code> conditions from the code. Here, you are not forced to start\nfrom the most external clause, but you can choose whatever position you prefer to start with. The important thing is\nthat once finished you won't have any <code class=\"language-text\">else</code> clause inside your\ncode. (<a href=\"https://github.com/bonfa/IfRemovingARealUseCase/blob/d496798575f2ee7487f1f2a04d0ce124dbb921c2/src/main/java/it/fbonfadelli/hand_baggage/HandBaggageInformationFactory.java\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Source code</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HandBaggageInformationFactory</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HandBaggageInformation</span> <span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span> order<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TranslationRepository</span> translationRepository<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> renderLanguage<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> flightId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Flight</span> flight <span class=\"token operator\">=</span> order<span class=\"token punctuation\">.</span><span class=\"token function\">findFlight</span><span class=\"token punctuation\">(</span>flightId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flight<span class=\"token punctuation\">.</span><span class=\"token function\">isOneWay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isMyCompany</span><span class=\"token punctuation\">(</span>flight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">LocalDateTime</span> flightOutboundDate <span class=\"token operator\">=</span> flight<span class=\"token punctuation\">.</span><span class=\"token function\">getFirstLeg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFirstHop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeparture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flightOutboundDate<span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2018</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token function\">newMyCompanyHandBaggageInformation</span><span class=\"token punctuation\">(</span>translationRepository<span class=\"token punctuation\">,</span> renderLanguage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flightOutboundDate<span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2018</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token function\">oldMyCompanyHandBaggageInformationInfo</span><span class=\"token punctuation\">(</span>translationRepository<span class=\"token punctuation\">,</span> renderLanguage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isMyCompany</span><span class=\"token punctuation\">(</span>flight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">noMyCompanyInformationInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flight<span class=\"token punctuation\">.</span><span class=\"token function\">isOneWay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">//round trip</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isMyCompany</span><span class=\"token punctuation\">(</span>flight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">LocalDateTime</span> outboundDepartureDate <span class=\"token operator\">=</span> order<span class=\"token punctuation\">.</span><span class=\"token function\">getOutboundDepartureDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">LocalDate</span> returnDepartureDate <span class=\"token operator\">=</span> order<span class=\"token punctuation\">.</span><span class=\"token function\">getReturnDepartureDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>outboundDepartureDate<span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2018</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token operator\">||</span> returnDepartureDate<span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2018</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token function\">newMyCompanyHandBaggageInformation</span><span class=\"token punctuation\">(</span>translationRepository<span class=\"token punctuation\">,</span> renderLanguage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>outboundDepartureDate<span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2018</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token operator\">||</span> returnDepartureDate<span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2018</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token function\">oldMyCompanyHandBaggageInformationInfo</span><span class=\"token punctuation\">(</span>translationRepository<span class=\"token punctuation\">,</span> renderLanguage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isMyCompany</span><span class=\"token punctuation\">(</span>flight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">noMyCompanyInformationInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">noMyCompanyInformationInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Once removed all the <code class=\"language-text\">else</code>, we are going to duplicate some conditions in order to have only one <code class=\"language-text\">if</code> clause inside\nanother <code class=\"language-text\">if</code>. At a first glance, it could seem complicated to understand but it is actually pretty simple 🚀. We start\nby duplicating <code class=\"language-text\">isMyCompany(flight)</code> in the two external <code class=\"language-text\">if</code>\nclauses. (<a href=\"https://github.com/bonfa/IfRemovingARealUseCase/blob/623019ec167ea7a0e6e5c0b0057d2bf8a83da9f1/src/main/java/it/fbonfadelli/hand_baggage/HandBaggageInformationFactory.java\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Source code</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">public class HandBaggageInformationFactory {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   public HandBaggageInformation from(Order order, TranslationRepository translationRepository, String renderLanguage, Integer flightId) {\n<span class=\"token prefix unchanged\"> </span>       Flight flight = order.findFlight(flightId);\n<span class=\"token prefix unchanged\"> </span>       if (flight.isOneWay()) {\n<span class=\"token prefix unchanged\"> </span>           LocalDateTime flightOutboundDate = flight.getFirstLeg().getFirstHop().getDeparture().getDate();\n<span class=\"token prefix unchanged\"> </span>           if (isMyCompany(flight)) {\n<span class=\"token prefix unchanged\"> </span>               if (flightOutboundDate.isAfter(LocalDateTime.of(2018, 11, 1, 0, 0, 0))) {\n<span class=\"token prefix unchanged\"> </span>                   return newMyCompanyHandBaggageInformation(translationRepository, renderLanguage);\n<span class=\"token prefix unchanged\"> </span>               }\n</span>\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>               if (!flightOutboundDate.isAfter(LocalDateTime.of(2018, 11, 1, 0, 0, 0))) {\n<span class=\"token prefix deleted\">-</span>                   return oldMyCompanyHandBaggageInformationInfo(translationRepository, renderLanguage);\n<span class=\"token prefix deleted\">-</span>               }\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>           }\n</span>\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>           if (isMyCompany(flight)) {\n<span class=\"token prefix inserted\">+</span>               if (!flightOutboundDate.isAfter(LocalDateTime.of(2018, 11, 1, 0, 0, 0))) {\n<span class=\"token prefix inserted\">+</span>                   return oldMyCompanyHandBaggageInformationInfo(translationRepository, renderLanguage);\n<span class=\"token prefix inserted\">+</span>               }\n<span class=\"token prefix inserted\">+</span>           }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>           if (!isMyCompany(flight)) {\n<span class=\"token prefix unchanged\"> </span>               return noMyCompanyInformationInfo();\n<span class=\"token prefix unchanged\"> </span>           }\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       if (!flight.isOneWay()) {  //round trip\n<span class=\"token prefix unchanged\"> </span>           LocalDateTime outboundDepartureDate = order.getOutboundDepartureDate();\n<span class=\"token prefix unchanged\"> </span>           LocalDate returnDepartureDate = order.getReturnDepartureDate();\n<span class=\"token prefix unchanged\"> </span>           if (isMyCompany(flight)) {\n<span class=\"token prefix unchanged\"> </span>               if (outboundDepartureDate.isAfter(LocalDateTime.of(2018, 11, 1, 0, 0, 0))\n<span class=\"token prefix unchanged\"> </span>                       || returnDepartureDate.isAfter(LocalDate.of(2018, 10, 31))) {\n<span class=\"token prefix unchanged\"> </span>                   return newMyCompanyHandBaggageInformation(translationRepository, renderLanguage);\n<span class=\"token prefix unchanged\"> </span>               }\n</span>\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>               if (!(outboundDepartureDate.isAfter(LocalDateTime.of(2018, 11, 1, 0, 0, 0))\n<span class=\"token prefix deleted\">-</span>                       || returnDepartureDate.isAfter(LocalDate.of(2018, 10, 31)))) {\n<span class=\"token prefix deleted\">-</span>                   return oldMyCompanyHandBaggageInformationInfo(translationRepository, renderLanguage);\n<span class=\"token prefix deleted\">-</span>               }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>           }\n</span>\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>           if (isMyCompany(flight)) {\n<span class=\"token prefix inserted\">+</span>               if (!(outboundDepartureDate.isAfter(LocalDateTime.of(2018, 11, 1, 0, 0, 0))\n<span class=\"token prefix inserted\">+</span>                       || returnDepartureDate.isAfter(LocalDate.of(2018, 10, 31)))) {\n<span class=\"token prefix inserted\">+</span>                   return oldMyCompanyHandBaggageInformationInfo(translationRepository, renderLanguage);\n<span class=\"token prefix inserted\">+</span>               }\n<span class=\"token prefix inserted\">+</span>           }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>           if (!isMyCompany(flight)) {\n<span class=\"token prefix unchanged\"> </span>               return noMyCompanyInformationInfo();\n<span class=\"token prefix unchanged\"> </span>           }\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       return noMyCompanyInformationInfo();\n<span class=\"token prefix unchanged\"> </span>   }\n</span>}</code></pre></div>\n<p>After having done this process for all the conditions, we will finally get the flat if\nstructure. (<a href=\"https://github.com/bonfa/IfRemovingARealUseCase/blob/82d8c21bf684feeaf6d342a7b6f36409bd30acb6/src/main/java/it/fbonfadelli/hand_baggage/HandBaggageInformationFactory.java\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Source code</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HandBaggageInformationFactory</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">LocalDateTime</span> FIRST_OF_NOVEMBER <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2018</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">LocalDate</span> THIRTY_FIRST_OF_OCTOBER <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2018</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HandBaggageInformation</span> <span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span> order<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TranslationRepository</span> translationRepository<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> renderLanguage<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> flightId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Flight</span> flight <span class=\"token operator\">=</span> order<span class=\"token punctuation\">.</span><span class=\"token function\">findFlight</span><span class=\"token punctuation\">(</span>flightId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">LocalDateTime</span> flightOutboundDate <span class=\"token operator\">=</span> flight<span class=\"token punctuation\">.</span><span class=\"token function\">getFirstLeg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFirstHop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeparture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">LocalDateTime</span> outboundDepartureDate <span class=\"token operator\">=</span> order<span class=\"token punctuation\">.</span><span class=\"token function\">getOutboundDepartureDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">LocalDate</span> returnDepartureDate <span class=\"token operator\">=</span> order<span class=\"token punctuation\">.</span><span class=\"token function\">getReturnDepartureDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flight<span class=\"token punctuation\">.</span><span class=\"token function\">isOneWay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isMyCompany</span><span class=\"token punctuation\">(</span>flight<span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">&amp;&amp;</span> flightOutboundDate<span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span>FIRST_OF_NOVEMBER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">newMyCompanyHandBaggageInformation</span><span class=\"token punctuation\">(</span>translationRepository<span class=\"token punctuation\">,</span> renderLanguage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flight<span class=\"token punctuation\">.</span><span class=\"token function\">isOneWay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isMyCompany</span><span class=\"token punctuation\">(</span>flight<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>flightOutboundDate<span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span>FIRST_OF_NOVEMBER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">oldMyCompanyHandBaggageInformationInfo</span><span class=\"token punctuation\">(</span>translationRepository<span class=\"token punctuation\">,</span> renderLanguage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flight<span class=\"token punctuation\">.</span><span class=\"token function\">isOneWay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">isMyCompany</span><span class=\"token punctuation\">(</span>flight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">noMyCompanyInformationInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flight<span class=\"token punctuation\">.</span><span class=\"token function\">isOneWay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isMyCompany</span><span class=\"token punctuation\">(</span>flight<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>outboundDepartureDate<span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span>FIRST_OF_NOVEMBER<span class=\"token punctuation\">)</span>\n                        <span class=\"token operator\">||</span> returnDepartureDate<span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span>THIRTY_FIRST_OF_OCTOBER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token function\">newMyCompanyHandBaggageInformation</span><span class=\"token punctuation\">(</span>translationRepository<span class=\"token punctuation\">,</span> renderLanguage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flight<span class=\"token punctuation\">.</span><span class=\"token function\">isOneWay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isMyCompany</span><span class=\"token punctuation\">(</span>flight<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>outboundDepartureDate<span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span>FIRST_OF_NOVEMBER<span class=\"token punctuation\">)</span>\n                        <span class=\"token operator\">||</span> returnDepartureDate<span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span>THIRTY_FIRST_OF_OCTOBER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token function\">oldMyCompanyHandBaggageInformationInfo</span><span class=\"token punctuation\">(</span>translationRepository<span class=\"token punctuation\">,</span> renderLanguage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flight<span class=\"token punctuation\">.</span><span class=\"token function\">isOneWay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">isMyCompany</span><span class=\"token punctuation\">(</span>flight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">noMyCompanyInformationInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">noMyCompanyInformationInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5>Intermediate step: extracting factories</h5>\n<p>Before keeping on with the extraction of the chain of responsibility from the if structure, we are going to make some\nintermediate steps. In order to reduce the responsibilities of the <code class=\"language-text\">HandBaggageInformationFactory</code>, here, we are going\nto extract three factories, each one responsible for creating a specific <code class=\"language-text\">HandBaggageInformation</code>. Without diving into\nthe code used to create the object, we just extract the <code class=\"language-text\">NewMyCompanyHandBaggageInformationFactory</code> out of the\nmethod <code class=\"language-text\">newMyCompanyHandBaggageInformation</code>\n. (<a href=\"https://github.com/bonfa/IfRemovingARealUseCase/blob/5419c7d777f7562f89c65d55a83181b787a7c9eb/src/main/java/it/fbonfadelli/hand_baggage/HandBaggageInformationFactory.java\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Step 1</a>\n, <a href=\"https://github.com/bonfa/IfRemovingARealUseCase/blob/3b6651b149932befca35c40a02c4bbd79cfab8d9/src/main/java/it/fbonfadelli/hand_baggage/HandBaggageInformationFactory.java\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Step 2</a>\nand <a href=\"https://github.com/bonfa/IfRemovingARealUseCase/blob/ed33c4490bccfc828391516c12561b83d0428000/src/main/java/it/fbonfadelli/hand_baggage/HandBaggageInformationFactory.java\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Step 3</a>)\nIf you are using IDEA, an easy way is to do it is to use its <code class=\"language-text\">Extract method object</code> feature. I won't explain how to do\nit here, because it is out of the scope of this topic, but I have just realized I have found the next topic of my blog (\nthis is great! isn't it? <img class=\"emoji-icon\" alt=\"emoji-smirk\" data-icon=\"emoji-smirk\" style=\"display: inline; margin: 0; position: relative; width: 20px\" src=\"data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAUKElEQVR4Ae2bBZAcR7auv5NZ1dXd09MDYskCy5KZ2V5m3jAs7969zMzMzMx87/LG3mU2s7Uys62xmIebuyrzvKnpjFBHh6Qw2/e9l6E/MntmuvJ8/zmVlVXq5v+3/9/+f/t/ugnPc/sNMB/6EBsj5SwMZ4iwSWClsTKKUg5RNL3TWYUDqmzD81AmPPCRj/Ak4J9XA37j+YGW7d/GxSq8M7a80cRyuo1N2RQMpiCIEbAD3jtFveK7uTwu9U2f6sOp4xuifOHE/2YLoC/pCtj6DspLRnmPsXxXoWheZkvGmLLFJDm4IsYjVhckIANTq6Iul6De4LuC73h80+Fa3nfb/lbv+LepWT4FNJ8zAxaCftatViPasJYPRbH8dKFkzrTDEWbIYIuKiT2SFDClUWx1NQwtR8orkUIFMQUA1HfRbh1tHoDGIdz8PnxrFu108anBtQXf8LhaRrflH8xS/dMdu/kIkD1rA65/Nc+qrV7NxcWY3ytW7OuikYioapHEYYoR0ehazMrzMCsuQCqbkOI4RGUQC0JfRQsooA6yJtqeRuvb8Afvwh+4h2x2N76doR1LNu/I5jLadXdtO+WXgC3PyoDHPsAzaqd8DHnyg/xUsSy/WRiLh+xoTFT2mHJEtOIs7Po3YpZdDKXxAJcBHjRAC6AcZSyAAYlAgNY0/vAW3M5vkB18AN/MyJoGN5vSnUkb7ab++saP8meAvlBrgGx9N9VlJf6mOGw/FC8tEI1YbMkRLT8Zu+lqzPJLISqCdkEdIoZn0lR9qJYCZG38oTtw2z5DduhxXMuSzTnSyS7tmvvI4RY/cuGnmQf0+TRA7n4nq8bH+Wh5JHp1vKJANCxElYX+pDdhNlyNJKPg2wiAyDObTRl0AgUwRbQzi9+xYMLE18nqXbKakh7s0pzLbpie5oPnf4H9gD73BgT4peN8rrgkvihZlmCHIRobIzrt/ZgVrwBNETyIPLfXGO03woDE+IM3kz3ycbKZGVwNOoc7tKfSb01Oc8XTMcE+VfivvYmx9cv59AL85cnKBDsixEuWEp/1vZil5yK+gWgGONCsJ0L/XAm3OIdoG6msx4ysRxqPobQwBYt4XVPAX/SmFXz+IxO0eQoteopVYk5dyV8Vx6JXJssTbNUQj40SnfZtmOoGSGdATP9i9rxUQP9rcS1kYe7o9G+DR/4TZJbEJ+D1ladq9lfAtwMe0GdeAQH+8Q/xU5VR+9OFlckCeEQ8nBBtugIZPWUx8+AHM/78Cwe+Bck4pjiM1B8Ho2AE0/Vnf9/JWv/r+7njma8BAf62d3PBhjG5rrimOFRYlhBVIVr7csya1/eARRAA4YVtCgqgCkT4vdeQ7b6FbB66+Xqwt93YMaOvvfzT3HW8SrDHg/+2FRSvOJP/LC8rbM7h46rFjq/Crn5tz23NEDJQ98JmP0g0DeMUKS6Dzh7ENXpJcVoopu6UqX188v4G7umeAgawn7qCD1RH7Y8VViREowl2yGJXXoKUl4PvIAwsevoimeBTMBZZEM2dgAFVpO3XX7RKJ/7mAR4ANNdTMUAA+4sXM/Ky1fJvxRWFpfGShKhisSPLMEvOARxC2pf5F1dCzwSJStA50NtOq6BOoeFOLcZ89Ja9dI9mQHSs7L9/E1cnVXtKVI0wpQUlBqmsAVHEN0GEl1ITVVSixRhNc2ox5jz2pJqd8v5N2dW/v4X/DAa44xkguS4ZJxkuyndHVYsZirBFgyQJUhxBfAvw4S/Dfb0JZmQevPK8NiMQGQDwCk5Bc4GQQh5jkmDTDn6od3M2PO+++5Jx/cSd07jAqMczwP7BKzm/VJYLbSXCFC2mYJBCCTERuBbEsiCDa6QcPNxgvtYljgwrlw8xNF6E1IN7jo2wvTkb020OHGqQZp7qcIEVy4awQ3FvzlTzGBdjNYV0MfacoVROL/yDV+r5r/kctwP+eAYYwK6omHfGFbv4MMMWLBIZiBIQB0Vlcn+dr1+/iy337GfycJ1OJ8MYoVItcsn5a3jflSczMpr0gnouWmyYm+3wic8+zp1376U+38Z7JUkili6rcPF5q3jTa9axdFUF2j6PNY95MXZXtuQsKyq8E/wWwAH+aIugANHGMZLvPpvfLC6NV8ajhUV3TdFgSlUoDvG1b0zwJ397F1vu3Ee71mKoANVKTBJBfbbF1runuOehA1x63hLKZcD3L1juKSo7IuOYnGzwy797GzffvI9Yu4xUIiqlCMkyJg81uPu+Q9y8ZQ+lGDadNIxkDVhQ71Ae13G4Rlb64nb+e6bdbwBEg9f+X7+AjUlRTrElixQsJjZIZME4/u0jD/Hpz04wNmx41RtP4pzLNnHChnHKpQLOeQ4fqnP/1l1ce80EW++f5M2vWwFpBqqAD70eeY32Tw0igID0vS5Ei8eaahne/V0XcPaF61i2vIK1hmary54d09x3+zbuvW07f/l397Fvf53vurKCRHnsusiQs+RMv36Bbvz2a3ikfx2QgUti8borufrMjdF/ltaXiJcUiasFzEjCp75a458+dpjzL1zGB374Us49Ywl0G9BsQZaBCBQLUCoy30yJpg9Qbs2BelAXwPuh9RibUgExobcghmZphGx8JdVyDK02tLugClEE5RIUhrj3oSk+9rd3cPfWw3zfB5bxnrcM4+c6pPNd0qk2rZ0tHnwy+/bXfpbPAG3AHbUCRkvmdJsIEgtizeJC8ugTHf7jM4d55RtX8xO/cClV34BtD4F3ATADn/Z6HNWCAQ9kfuByOTA+5h43C8MUVCm3WrD/AHQ9YEEiMHGvFwPGcu7acTb+0Sv4iz+4YyHWfZy9qcCp6yzSMIssOVPOBv6z/ZMboH9skkhPksj04CNBMXzkS7OcePoIP/1zJ1CdfgJ274SsDi5XDXwTSEG0F1AXcCGDmD7JU5Q5IrHgBLqEO04F0t6crtaLIa0vxpTHlseYx5rHrPQYcpacKWcjHHjQAAmysbCcSMAKUWTYczBj+7Tykz+xjqHZOZirA11wnVDaDAI8P5skGZhDcwHege8A3cXYhmbmFmPNY957MFtkwApEwiIbWECCGDwFYhsxKjZACHRE+M7vW8umUQeHu2ANoCGIwfrJJUeWGKfgeQ6aAtJXSNK3EQJ8+Atj0Lkum5bZxZjbNAOqkDPlbEAMyDGvAkYoigEB0kw5cXXMphGLTrZABFSBnkSAWMAIruWZnHFMzmakDspFw9qVEaWqga6CPpsNkECq1OcdB6cd9abHCCwdi1i1PAILZIpqDzaP9fWnlcjmYtLpDAHEQM4GmKMZIKE3i4wcCdi0MzRr0ju2BnZFEgEPjz3R4dZ7Wzy0rcPh6Yw0VbQXCZVhyxWvrfD2BeGObwIykHAjUBDmp1PueKDD1vtb7NjbpdH0OA8EqFM3JnzvVaOsXhHh074JJpsY53EAgIaEDSxGGg1ck4zztHGg4fLlvSBq+wsRSWDbkyn//aUa9z/aQbxntGxYUhGSYUFEyDzMNhz//KkZymV47StKaEeRp1LsMWQZfPbLTb58XZ3p6YyhgjA+bFhTFawFVWinyoMPt/izuuO3fngJpYLg/REadQ7VBXkPDnK2YIAGEQ3mIfPMq/eoyxYkoMEMAUEQC9+4qcWff7ROMRFO2hSzZMxC6mkddgwlEEegwEhJiARu2tpYMMAg9jhVIKEzwmzN87t/W+fuh1NOXBtx3vklhkpCa8ohbbc4FgOZEyqJYcfBlMd2tjjvtALaBVSDAx5cGlg8OdvxbocVoJMxueiYd6ga1BsEDyH97a7SHRN+9nfHOW1zRLUCsRWcVe66qc11/9WgGMuiCdbAcCKoKmq6BAOO3ywcbigXvy3hO39hmDUrLMUYxArTc8r//HWNuR0p1aqhYMF7pRQJHRxIF1Qg0KjXBbnA4hfZjnU3qEHMdWXn6lRRp+B92OQIGgonB3v7yw3YFGptmA1vjeDll0bs3xFx99dSRoeFNMsNg9e/3iKlLjSPs//xQEje5pMMm883vV3mjEIKeFg5anjHt0X8yx9kpNNKMYGZeeWEkyJOPV3QNAMEwnHQHoNmiqa6yAbKsU4BBbKd837ilK7FO8V7j1GDoEf2J3jcobCft4BRMCCpYg5kvPNdltISy2N3KqUivO4NhsvO9TDpIBKO2UzfmdDOoNW/aw5Q07B23PJtPx9zzecc9Unl7Msj3vjWmNFWhu8oYgz44KmSM/RYupCzAe5Yt8MeyG7dz5Ov2+zbpL6ozqDeAxK25wriQbU3tqEPv1OFZDbj7W81vPkdgjUgHQeTPvzNU3323weuHJEBnfVsGjNs+klL1xkKCOzt4hsKtu9+woH6UMmLd4S+nbMR6ulYBqT/9RB7fuoiJoodPUOzUEIYBBCrAb4nXZBI2BMQTHAgezKiuD+7CvI0DJABAzyhl94cU4pMOQoiaLYg3/dUCiX868We6mJl1FtM5GyDBpiBEDqNlPTgvNyhHUVTwAdxlG26HF2YELgANrwWecrbf2Tg74tAJAj0JIHT9b1XBtT/vLal5Ew5G9AB9FgGpEDrmt3+lqypXtuK6xI2MSEmc3RhFEKPVTBBEmRyEaTHED31vz9Rbr5NeXxCoXDkdGMQPIwF0LANdxnkDFlbfc4EtID0WAYAeKD5Z9/i0ek5fdA1Pdr1+FTBAzKQHSMhaAk61s8Gsy1H12BFFGBqWvj1PzN89psCiQSDjjKfCBKOgQOfKdrxuJYnZ8mZgGZg5HgGtOZTWvfu089p3aPtI5ch9YSJWFDe9wOHsT3KzwIQNsgM6hinQkn45vWCdATvBQjwFrAhhtCLAAj4vv+r6Sha8+QsORPkOr4BGv5o/pdv4ca5ab/D1XouatdDJqB9VWCC7EAvEPqerPRn7djqXy+GhG0PCtd807B6TBge6j+GDByzJwXUSa9qW5489rkZvyNnAeYDmx7PAIAMqE3MUbt9t/6Xm/H4huLD2YMPVGZAkYAlKB/3g/dnV46tSKAEVODh++Bv/sZQVKGSCCtXAXHfcaMjBkguBPECKfg2uLriZj05Q84Ci8qeyv8MKVAHZn/wWm68Y5W/e9WwO1/KgimBiQ1YQWyAOtpDH/pLWoG+akCB/qwHeXANmHhEuOE6YcstwpAVlgwLM3Vl82kS9h6hQlSAMPaC5sognPdkc46Dk/7unAGYDUz6VAwA6ACzc21G/vFe/dufr7q/lZIpSiLEkcdYAxGICJgBEwiQJmTTDnirAil0mjBfg6lJ2LELtm8TJp6AQ/sE64VlI1AuCLV5Zd0ZwmlnA12OGOCDCU7QcEn0bU/aULI5T3vatfPYFxjmgdnAxFM1QMM5M/UXW5l49Vr511eW3A/bRPCxQSIPkfRMUAEGV3oh7Sr33q0cOixkqdJqQa0mzM7A3Gw+hvk5aDUEsh5XKRZGClAwECFEQ3DmxYa3v18oiIf+rNOT+vDstB1O1TmPm3LcuV3+9S+26gQwFVj06RhA8HsaKF/xWf/5bw3L5k1x9kbiCMRgjGCiEI8R8CHbChRg+4Ty87+idGtQiiCyYI0Q53ARFGJICjCaCIUKDFVhZFxYshpO2CysP1k4YYNQrQJzDhocAfe5Qsl3wbfA15R01tM9nDGx23/jis/q54HJwNB9pp8Ss8ByYM2p46z/3NXyKyvW2XPjlZZ43GDHDKYskCgSA5FC2Bq7xPDYfmHPLqVd722ovAMbKXFBKBSgNASVKowuheFhqCwoKQFOoQs0FDqAD1nXMF5c6YGu4Ju9xS6dXtBBx8Fd7t4rPqO/8+g0O4G9wCHAPVMDAErAMmDty9ey7l/fJr+6fI09LV7VM8FUBVMySALEikR9u8FK3zpgCE0DSN9DzSyXQhrGHiAAh74/66SCdsC3fJ75HvwBx6G97pHv/rL+9i272QXsBg4DrWf3Mbm+kHbNI/ce5J5XL9WNQ0ZXYXpBiRICFQAklCrtkMU6MK9QU5gH6rkUGiG8bg8KF45B6NX0emcgZF1z+CZoPV/plWzGk+7P2LfL3/O9X9E/uGUPe4EDofwbz9XnBLuA5lowQb85wV2vXcFoVfQkUVAF8Qp5r4JqnzEiA8UWyplB9cH7HjBeetnO1e0Z6huKzvfg3VQv89t2+G+++/P6VwvJ2dcHPwfwXBkA4WwEdLqD/NN93HfxUplbYd1ZJiPqQdODCGYABFOOuoIjA+AalPWkWVjhO6AtxdfB5fAzSnrI0TyQtW9+jH9+wyf0o9MtJoGDoexnAZ5rAwgmuGCE+dQjuiftsPXkkq4oe12l4TfqCBkk/LWgrg/QA0oYh9cZ4AJ4NxdoW9EmPfCax8150ilPdtCxb7e/+y9u0z/+6et0CzAV4EPm0ef10+LAMLAkaKxkGf7bN3P5q0+Uq0aXmhPtiMEO964QUhJsASgIEgMWpP8miRCuVzQYpinQUVw3ZL6puHrPgNlJv/2G7fo/P/w1bms5asAMMBVUA/SF+spMBRgBxoBRoLqmQuV3Xs2Fl62VNy0Zk7OiipHcBFs2SCJIASTs53MZAwA+gKPhDq7b613TL8Jnda9T0/rA7Xv0679yA1v31qkDYYfHTMh6/cX4zlASqqEaTBgOxkQ/cSEnvm2zufDEMb2wMsyGQskkJhGIBYnARP0VEO7fMyA8wuq2fKdeY8f2Gdn65Sf81r/YynYgC6C1AD8fxp0X80tTBigF+CDKwBCQWDDvOJnlr1zLmlOWmLVLy7q6HDOeRFRiSwKQOjqdjHozZXqyKfsem/K7b9rN3i8+ziEHPgA2gGYADqIF+JfKt8aiYMRQUDm8LgKFIBvk+3qCiY7QB3WD2kArwDeCWkD2Uv3iZAQkQDGoBBQGTDCh728O8P3wQS2gHdQBsv8t3xwVIB5QFPpgQP8qQDCANECmA9LnJ8gXrg0+ORicWwEfFMx4/tv/Aag0Qj8pxPCgAAAAAElFTkSuQmCC\" title=\"emoji-smirk\">).</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">public class HandBaggageInformationFactory {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   public HandBaggageInformation from(Order order, TranslationRepository translationRepository, String renderLanguage, Integer flightId) {\n<span class=\"token prefix unchanged\"> </span>       Flight flight = order.findFlight(flightId);\n<span class=\"token prefix unchanged\"> </span>       LocalDateTime flightOutboundDate = flight.getFirstLeg().getFirstHop().getDeparture().getDate();\n<span class=\"token prefix unchanged\"> </span>       LocalDateTime outboundDepartureDate = order.getOutboundDepartureDate();\n<span class=\"token prefix unchanged\"> </span>       LocalDate returnDepartureDate = order.getReturnDepartureDate();\n</span>\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>        NewMyCompanyHandBaggageInformationFactory newMyCompanyHandBaggageInformationFactory =\n<span class=\"token prefix inserted\">+</span>                new NewMyCompanyHandBaggageInformationFactory(translationRepository);\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       if (flight.isOneWay()\n<span class=\"token prefix unchanged\"> </span>               &amp;&amp; isMyCompany(flight)\n<span class=\"token prefix unchanged\"> </span>               &amp;&amp; flightOutboundDate.isAfter(FIRST_OF_NOVEMBER)) {\n</span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>             return newMyCompanyHandBaggageInformation(translationRepository, renderLanguage);\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>            return newMyCompanyHandBaggageInformationFactory.execute(renderLanguage);\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       if (flight.isOneWay() &amp;&amp; isMyCompany(flight) &amp;&amp; !flightOutboundDate.isAfter(FIRST_OF_NOVEMBER)) {\n<span class=\"token prefix unchanged\"> </span>           return oldMyCompanyHandBaggageInformationInfo(translationRepository, renderLanguage);\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       if (flight.isOneWay() &amp;&amp; !isMyCompany(flight)) {\n<span class=\"token prefix unchanged\"> </span>               return noMyCompanyInformationInfo();\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       if (!flight.isOneWay() &amp;&amp; isMyCompany(flight) &amp;&amp; (outboundDepartureDate.isAfter(FIRST_OF_NOVEMBER)\n<span class=\"token prefix unchanged\"> </span>                       || returnDepartureDate.isAfter(THIRTY_FIRST_OF_OCTOBER))) {\n</span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>           return newMyCompanyHandBaggageInformation(translationRepository, renderLanguage);\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>           return newMyCompanyHandBaggageInformationFactory.execute(renderLanguage);\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       if (!flight.isOneWay() &amp;&amp; isMyCompany(flight) &amp;&amp; (!(outboundDepartureDate.isAfter(FIRST_OF_NOVEMBER)\n<span class=\"token prefix unchanged\"> </span>                       || returnDepartureDate.isAfter(THIRTY_FIRST_OF_OCTOBER)))) {\n<span class=\"token prefix unchanged\"> </span>                   return oldMyCompanyHandBaggageInformationInfo(translationRepository, renderLanguage);\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       if (!flight.isOneWay() &amp;&amp; !isMyCompany(flight)) {\n<span class=\"token prefix unchanged\"> </span>               return noMyCompanyInformationInfo();\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       return noMyCompanyInformationInfo();\n<span class=\"token prefix unchanged\"> </span>   }\n</span>}</code></pre></div>\n<p>Once done this, we repeat the operation for the other two methods that create the objects, obtaining\nthe <code class=\"language-text\">NotMyCompanyHandBaggageInformationFactory</code> and the <code class=\"language-text\">OldMyCompanyHandBaggageInformationFactory</code>.\n(<a href=\"https://github.com/bonfa/IfRemovingARealUseCase/blob/71a7962d72ffa2581beef76c494f2389f0526059/src/main/java/it/fbonfadelli/hand_baggage/HandBaggageInformationFactory.java\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Source code</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">public class HandBaggageInformationFactory {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   public HandBaggageInformation from(Order order, TranslationRepository translationRepository, String renderLanguage, Integer flightId) {\n<span class=\"token prefix unchanged\"> </span>       Flight flight = order.findFlight(flightId);\n<span class=\"token prefix unchanged\"> </span>       LocalDateTime flightOutboundDate = flight.getFirstLeg().getFirstHop().getDeparture().getDate();\n<span class=\"token prefix unchanged\"> </span>       LocalDateTime outboundDepartureDate = order.getOutboundDepartureDate();\n<span class=\"token prefix unchanged\"> </span>       LocalDate returnDepartureDate = order.getReturnDepartureDate();\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       NewMyCompanyHandBaggageInformationFactory newMyCompanyHandBaggageInformationFactory =\n<span class=\"token prefix unchanged\"> </span>               new NewMyCompanyHandBaggageInformationFactory(translationRepository);\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>       OldMyCompanyHandBaggageInformationFactory oldMyCompanyHandBaggageInformationFactory =\n<span class=\"token prefix inserted\">+</span>               new OldMyCompanyHandBaggageInformationFactory(translationRepository);\n<span class=\"token prefix inserted\">+</span>       NotMyCompanyHandBaggageInformationFactory notMyCompanyHandBaggageInformationFactory =\n<span class=\"token prefix inserted\">+</span>               new NotMyCompanyHandBaggageInformationFactory();\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       if (flight.isOneWay()\n<span class=\"token prefix unchanged\"> </span>               &amp;&amp; isMyCompany(flight)\n<span class=\"token prefix unchanged\"> </span>               &amp;&amp; flightOutboundDate.isAfter(FIRST_OF_NOVEMBER)) {\n<span class=\"token prefix unchanged\"> </span>             return newMyCompanyHandBaggageInformationFactory.from(renderLanguage);\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       if (flight.isOneWay() &amp;&amp; isMyCompany(flight) &amp;&amp; !flightOutboundDate.isAfter(FIRST_OF_NOVEMBER)) {\n</span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>            return oldMyCompanyHandBaggageInformationInfo(translationRepository, renderLanguage);\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>            return oldMyCompanyHandBaggageInformationFactory.from(renderLanguage);\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       if (flight.isOneWay() &amp;&amp; !isMyCompany(flight)) {\n</span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>            return noMyCompanyInformationInfo();\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>            return notMyCompanyHandBaggageInformationFactory.make();\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       if (!flight.isOneWay() &amp;&amp; isMyCompany(flight) &amp;&amp; (outboundDepartureDate.isAfter(FIRST_OF_NOVEMBER)\n<span class=\"token prefix unchanged\"> </span>                       || returnDepartureDate.isAfter(THIRTY_FIRST_OF_OCTOBER))) {\n<span class=\"token prefix unchanged\"> </span>            return newMyCompanyHandBaggageInformationFactory.from(renderLanguage);\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       if (!flight.isOneWay() &amp;&amp; isMyCompany(flight) &amp;&amp; (!(outboundDepartureDate.isAfter(FIRST_OF_NOVEMBER)\n<span class=\"token prefix unchanged\"> </span>                       || returnDepartureDate.isAfter(THIRTY_FIRST_OF_OCTOBER)))) {\n</span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>            return oldMyCompanyHandBaggageInformationInfo(translationRepository, renderLanguage);\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>            return oldMyCompanyHandBaggageInformationFactory.from(renderLanguage);\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       if (!flight.isOneWay() &amp;&amp; !isMyCompany(flight)) {\n</span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>            return noMyCompanyInformationInfo();\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>            return notMyCompanyHandBaggageInformationFactory.make();\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>       return noMyCompanyInformationInfo();\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>       return notMyCompanyHandBaggageInformationFactory.make();\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   }\n</span>}</code></pre></div>\n<h5>2. Creating the components of the chain</h5>\n<p>By using again the <code class=\"language-text\">Extract method object</code> feature of Idea, you can easily extract the first condition into a class. In\nthis way we get <code class=\"language-text\">new MyCompanyOneWayAfterTheFirstOfNovember()</code> method <code class=\"language-text\">canHandle(flight, flightOutboundDate)</code> in the first <code class=\"language-text\">if</code>\ncondition. (<a href=\"https://github.com/bonfa/IfRemovingARealUseCase/blob/6767ecfcbc8b1f90f38f525c2d2d7522d25fafb4/src/main/java/it/fbonfadelli/hand_baggage/HandBaggageInformationFactory.java\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Source code</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">public class HandBaggageInformationFactory {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   public HandBaggageInformation from(Order order, TranslationRepository translationRepository, String renderLanguage, Integer flightId) {\n<span class=\"token prefix unchanged\"> </span>       Flight flight = order.findFlight(flightId);\n<span class=\"token prefix unchanged\"> </span>       LocalDateTime flightOutboundDate = flight.getFirstLeg().getFirstHop().getDeparture().getDate();\n<span class=\"token prefix unchanged\"> </span>       LocalDateTime outboundDepartureDate = order.getOutboundDepartureDate();\n<span class=\"token prefix unchanged\"> </span>       LocalDate returnDepartureDate = order.getReturnDepartureDate();\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       NewMyCompanyHandBaggageInformationFactory newMyCompanyHandBaggageInformationFactory =\n<span class=\"token prefix unchanged\"> </span>               new NewMyCompanyHandBaggageInformationFactory(translationRepository);\n<span class=\"token prefix unchanged\"> </span>       OldMyCompanyHandBaggageInformationFactory oldMyCompanyHandBaggageInformationFactory =\n<span class=\"token prefix unchanged\"> </span>               new OldMyCompanyHandBaggageInformationFactory(translationRepository);\n<span class=\"token prefix unchanged\"> </span>       NotMyCompanyHandBaggageInformationFactory notMyCompanyHandBaggageInformationFactory =\n<span class=\"token prefix unchanged\"> </span>               new NotMyCompanyHandBaggageInformationFactory();\n</span>\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>       if (flight.isOneWay()\n<span class=\"token prefix deleted\">-</span>               &amp;&amp; isMyCompany(flight)\n<span class=\"token prefix deleted\">-</span>               &amp;&amp; flightOutboundDate.isAfter(FIRST_OF_NOVEMBER)) {\n<span class=\"token prefix deleted\">-</span>             return newMyCompanyHandBaggageInformationFactory.from(renderLanguage);\n<span class=\"token prefix deleted\">-</span>       }\n</span>\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>       if (new MyCompanyOneWayAfterTheFirstOfNovember().canHandle(flight, flightOutboundDate)) {\n<span class=\"token prefix inserted\">+</span>           return newMyCompanyHandBaggageInformationFactory.from(renderLanguage);\n<span class=\"token prefix inserted\">+</span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       if (flight.isOneWay() &amp;&amp; isMyCompany(flight) &amp;&amp; !flightOutboundDate.isAfter(FIRST_OF_NOVEMBER)) {\n<span class=\"token prefix unchanged\"> </span>           return oldMyCompanyHandBaggageInformationFactory.from(renderLanguage);\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       if (flight.isOneWay() &amp;&amp; !isMyCompany(flight)) {\n<span class=\"token prefix unchanged\"> </span>           return notMyCompanyHandBaggageInformationFactory.make();\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       if (!flight.isOneWay() &amp;&amp; isMyCompany(flight) &amp;&amp; (outboundDepartureDate.isAfter(FIRST_OF_NOVEMBER)\n<span class=\"token prefix unchanged\"> </span>                       || returnDepartureDate.isAfter(THIRTY_FIRST_OF_OCTOBER))) {\n<span class=\"token prefix unchanged\"> </span>           return newMyCompanyHandBaggageInformationFactory.from(renderLanguage);\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       if (!flight.isOneWay() &amp;&amp; isMyCompany(flight) &amp;&amp; (!(outboundDepartureDate.isAfter(FIRST_OF_NOVEMBER)\n<span class=\"token prefix unchanged\"> </span>                       || returnDepartureDate.isAfter(THIRTY_FIRST_OF_OCTOBER)))) {\n<span class=\"token prefix unchanged\"> </span>           return oldMyCompanyHandBaggageInformationFactory.from(renderLanguage);\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       if (!flight.isOneWay() &amp;&amp; !isMyCompany(flight)) {\n<span class=\"token prefix unchanged\"> </span>           return notMyCompanyHandBaggageInformationFactory.make();\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       return notMyCompanyHandBaggageInformationFactory.make();\n<span class=\"token prefix unchanged\"> </span>   }\n</span>\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>   private class MyCompanyOneWayAfterTheFirstOfNovember {\n<span class=\"token prefix inserted\">+</span>       public boolean canHandle(Flight flight, LocalDateTime flightOutboundDate) {\n<span class=\"token prefix inserted\">+</span>           return flight.isOneWay()\n<span class=\"token prefix inserted\">+</span>                   &amp;&amp; isMyCompany(flight)\n<span class=\"token prefix inserted\">+</span>                   &amp;&amp; flightOutboundDate.isAfter(FIRST_OF_NOVEMBER);\n<span class=\"token prefix inserted\">+</span>       }\n<span class=\"token prefix inserted\">+</span>   }\n</span>}</code></pre></div>\n<p>And, after that, we can move <code class=\"language-text\">newMyCompanyHandBaggageInformationFactory</code> method <code class=\"language-text\">from(renderLanguage)</code>\ninside <code class=\"language-text\">MyCompanyOneWayAfterTheFirstOfNovember</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">public class HandBaggageInformationFactory {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   public HandBaggageInformation from(Order order, TranslationRepository translationRepository, String renderLanguage, Integer flightId) {\n<span class=\"token prefix unchanged\"> </span>       Flight flight = order.findFlight(flightId);\n<span class=\"token prefix unchanged\"> </span>       LocalDateTime flightOutboundDate = flight.getFirstLeg().getFirstHop().getDeparture().getDate();\n<span class=\"token prefix unchanged\"> </span>       LocalDateTime outboundDepartureDate = order.getOutboundDepartureDate();\n<span class=\"token prefix unchanged\"> </span>       LocalDate returnDepartureDate = order.getReturnDepartureDate();\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       NewMyCompanyHandBaggageInformationFactory newMyCompanyHandBaggageInformationFactory =\n<span class=\"token prefix unchanged\"> </span>               new NewMyCompanyHandBaggageInformationFactory(translationRepository);\n<span class=\"token prefix unchanged\"> </span>       OldMyCompanyHandBaggageInformationFactory oldMyCompanyHandBaggageInformationFactory =\n<span class=\"token prefix unchanged\"> </span>               new OldMyCompanyHandBaggageInformationFactory(translationRepository);\n<span class=\"token prefix unchanged\"> </span>       NotMyCompanyHandBaggageInformationFactory notMyCompanyHandBaggageInformationFactory =\n<span class=\"token prefix unchanged\"> </span>               new NotMyCompanyHandBaggageInformationFactory();\n</span>\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>       if (new MyCompanyOneWayAfterTheFirstOfNovember().canHandle(flight, flightOutboundDate)) {\n<span class=\"token prefix deleted\">-</span>           return newMyCompanyHandBaggageInformationFactory.from(renderLanguage);\n<span class=\"token prefix deleted\">-</span>       }\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>        MyCompanyOneWayAfterTheFirstOfNovember myCompanyOneWayAfterTheFirstOfNovember =\n<span class=\"token prefix inserted\">+</span>                        new MyCompanyOneWayAfterTheFirstOfNovember(newMyCompanyHandBaggageInformationFactory);\n<span class=\"token prefix inserted\">+</span>                if (myCompanyOneWayAfterTheFirstOfNovember.canHandle(flight, flightOutboundDate)) {\n<span class=\"token prefix inserted\">+</span>                    return myCompanyOneWayAfterTheFirstOfNovember.getFrom(renderLanguage);\n<span class=\"token prefix inserted\">+</span>                }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       if (flight.isOneWay() &amp;&amp; isMyCompany(flight) &amp;&amp; !flightOutboundDate.isAfter(FIRST_OF_NOVEMBER)) {\n<span class=\"token prefix unchanged\"> </span>           return oldMyCompanyHandBaggageInformationFactory.from(renderLanguage);\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       if (flight.isOneWay() &amp;&amp; !isMyCompany(flight)) {\n<span class=\"token prefix unchanged\"> </span>           return notMyCompanyHandBaggageInformationFactory.make();\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       if (!flight.isOneWay() &amp;&amp; isMyCompany(flight) &amp;&amp; (outboundDepartureDate.isAfter(FIRST_OF_NOVEMBER)\n<span class=\"token prefix unchanged\"> </span>                       || returnDepartureDate.isAfter(THIRTY_FIRST_OF_OCTOBER))) {\n<span class=\"token prefix unchanged\"> </span>           return newMyCompanyHandBaggageInformationFactory.from(renderLanguage);\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       if (!flight.isOneWay() &amp;&amp; isMyCompany(flight) &amp;&amp; (!(outboundDepartureDate.isAfter(FIRST_OF_NOVEMBER)\n<span class=\"token prefix unchanged\"> </span>                       || returnDepartureDate.isAfter(THIRTY_FIRST_OF_OCTOBER)))) {\n<span class=\"token prefix unchanged\"> </span>           return oldMyCompanyHandBaggageInformationFactory.from(renderLanguage);\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       if (!flight.isOneWay() &amp;&amp; !isMyCompany(flight)) {\n<span class=\"token prefix unchanged\"> </span>           return notMyCompanyHandBaggageInformationFactory.make();\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       return notMyCompanyHandBaggageInformationFactory.make();\n<span class=\"token prefix unchanged\"> </span>   }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   private class MyCompanyOneWayAfterTheFirstOfNovember {\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       private final NewMyCompanyHandBaggageInformationFactory newMyCompanyHandBaggageInformationFactory;\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       private MyCompanyOneWayAfterTheFirstOfNovember(NewMyCompanyHandBaggageInformationFactory newMyCompanyHandBaggageInformationFactory) {\n<span class=\"token prefix unchanged\"> </span>           this.newMyCompanyHandBaggageInformationFactory = newMyCompanyHandBaggageInformationFactory;\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       public boolean canHandle(Flight flight, LocalDateTime flightOutboundDate) {\n<span class=\"token prefix unchanged\"> </span>           return flight.isOneWay()\n<span class=\"token prefix unchanged\"> </span>                       &amp;&amp; isMyCompany(flight)\n<span class=\"token prefix unchanged\"> </span>                       &amp;&amp; flightOutboundDate.isAfter(FIRST_OF_NOVEMBER);\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>       public HandBaggageInformation getFrom(String renderLanguage) {\n<span class=\"token prefix inserted\">+</span>               return this.newMyCompanyHandBaggageInformationFactory.from(renderLanguage);\n<span class=\"token prefix inserted\">+</span>       }\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   }\n</span>}</code></pre></div>\n<p>Then, we repeat the operation for all the conditions except for the ones that use our default\nvalue, <code class=\"language-text\">notMyCompanyHandBaggageInformationFactory</code> method <code class=\"language-text\">make()</code>. First of all, we remove the condition that once true uses the default behaviour (<code class=\"language-text\">!flight.isOneWay() &amp;&amp; !isMyCompany(flight)</code>), because it is redundant. Then, for each remaining\ncondition we create a class containing the evaluation of the condition and the related action.<br>\nI skip this step by step diff because it is a repetition of the previous one, but in the repo there are all the commits\nthat show the process. The resulting code, after having extracted all the conditions, is the\nfollowing. (<a href=\"https://github.com/bonfa/IfRemovingARealUseCase/blob/529ca3d37906d6c94ae3bb28ecf810e3f9e75e3b/src/main/java/it/fbonfadelli/hand_baggage/HandBaggageInformationFactory.java\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Source code</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HandBaggageInformationFactory</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HandBaggageInformation</span> <span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span> order<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TranslationRepository</span> translationRepository<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> renderLanguage<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> flightId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Flight</span> flight <span class=\"token operator\">=</span> order<span class=\"token punctuation\">.</span><span class=\"token function\">findFlight</span><span class=\"token punctuation\">(</span>flightId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">LocalDateTime</span> flightOutboundDate <span class=\"token operator\">=</span> flight<span class=\"token punctuation\">.</span><span class=\"token function\">getFirstLeg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFirstHop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeparture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">LocalDateTime</span> outboundDepartureDate <span class=\"token operator\">=</span> order<span class=\"token punctuation\">.</span><span class=\"token function\">getOutboundDepartureDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">LocalDate</span> returnDepartureDate <span class=\"token operator\">=</span> order<span class=\"token punctuation\">.</span><span class=\"token function\">getReturnDepartureDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">NewMyCompanyHandBaggageInformationFactory</span> newMyCompanyHandBaggageInformationFactory <span class=\"token operator\">=</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">NewMyCompanyHandBaggageInformationFactory</span><span class=\"token punctuation\">(</span>translationRepository<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">OldMyCompanyHandBaggageInformationFactory</span> oldMyCompanyHandBaggageInformationFactory <span class=\"token operator\">=</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">OldMyCompanyHandBaggageInformationFactory</span><span class=\"token punctuation\">(</span>translationRepository<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">NotMyCompanyHandBaggageInformationFactory</span> notMyCompanyHandBaggageInformationFactory <span class=\"token operator\">=</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">NotMyCompanyHandBaggageInformationFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">MyCompanyOneWayAfterTheFirstOfNovember</span> myCompanyOneWayAfterTheFirstOfNovember <span class=\"token operator\">=</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyCompanyOneWayAfterTheFirstOfNovember</span><span class=\"token punctuation\">(</span>newMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myCompanyOneWayAfterTheFirstOfNovember<span class=\"token punctuation\">.</span><span class=\"token function\">canHandle</span><span class=\"token punctuation\">(</span>flight<span class=\"token punctuation\">,</span> flightOutboundDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> myCompanyOneWayAfterTheFirstOfNovember<span class=\"token punctuation\">.</span><span class=\"token function\">getFrom</span><span class=\"token punctuation\">(</span>renderLanguage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">MyCompanyOneWayBeforeTheFirstOfNovember</span> myCompanyOneWayBeforeTheFirstOfNovember <span class=\"token operator\">=</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyCompanyOneWayBeforeTheFirstOfNovember</span><span class=\"token punctuation\">(</span>oldMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myCompanyOneWayBeforeTheFirstOfNovember<span class=\"token punctuation\">.</span><span class=\"token function\">canHandle</span><span class=\"token punctuation\">(</span>flight<span class=\"token punctuation\">,</span> flightOutboundDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> myCompanyOneWayBeforeTheFirstOfNovember<span class=\"token punctuation\">.</span><span class=\"token function\">getFrom</span><span class=\"token punctuation\">(</span>renderLanguage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">MyCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember</span> myCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember <span class=\"token operator\">=</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember</span><span class=\"token punctuation\">(</span>newMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember<span class=\"token punctuation\">.</span><span class=\"token function\">canHandle</span><span class=\"token punctuation\">(</span>flight<span class=\"token punctuation\">,</span> outboundDepartureDate<span class=\"token punctuation\">,</span> returnDepartureDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> myCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">getFrom</span><span class=\"token punctuation\">(</span>renderLanguage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">MyCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember</span> myCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span>\n                <span class=\"token class-name\">MyCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember</span><span class=\"token punctuation\">(</span>oldMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember<span class=\"token punctuation\">.</span><span class=\"token function\">canHandle</span><span class=\"token punctuation\">(</span>flight<span class=\"token punctuation\">,</span> outboundDepartureDate<span class=\"token punctuation\">,</span> returnDepartureDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> myCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember<span class=\"token punctuation\">.</span><span class=\"token function\">getFrom</span><span class=\"token punctuation\">(</span>renderLanguage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> notMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">.</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCompanyOneWayAfterTheFirstOfNovember</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">NewMyCompanyHandBaggageInformationFactory</span> newMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">MyCompanyOneWayAfterTheFirstOfNovember</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NewMyCompanyHandBaggageInformationFactory</span> newMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>newMyCompanyHandBaggageInformationFactory <span class=\"token operator\">=</span> newMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">canHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Flight</span> flight<span class=\"token punctuation\">,</span> <span class=\"token class-name\">LocalDateTime</span> flightOutboundDate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> flight<span class=\"token punctuation\">.</span><span class=\"token function\">isOneWay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isMyCompany</span><span class=\"token punctuation\">(</span>flight<span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">&amp;&amp;</span> flightOutboundDate<span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span>FIRST_OF_NOVEMBER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">HandBaggageInformation</span> <span class=\"token function\">getFrom</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> renderLanguage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>newMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>renderLanguage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCompanyOneWayBeforeTheFirstOfNovember</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">OldMyCompanyHandBaggageInformationFactory</span> oldMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">MyCompanyOneWayBeforeTheFirstOfNovember</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OldMyCompanyHandBaggageInformationFactory</span> oldMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>oldMyCompanyHandBaggageInformationFactory <span class=\"token operator\">=</span> oldMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">canHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Flight</span> flight<span class=\"token punctuation\">,</span> <span class=\"token class-name\">LocalDateTime</span> flightOutboundDate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> flight<span class=\"token punctuation\">.</span><span class=\"token function\">isOneWay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isMyCompany</span><span class=\"token punctuation\">(</span>flight<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>flightOutboundDate<span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span>FIRST_OF_NOVEMBER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">HandBaggageInformation</span> <span class=\"token function\">getFrom</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> renderLanguage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>oldMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>renderLanguage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">NewMyCompanyHandBaggageInformationFactory</span> newMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NewMyCompanyHandBaggageInformationFactory</span> newMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>newMyCompanyHandBaggageInformationFactory <span class=\"token operator\">=</span> newMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">canHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Flight</span> flight<span class=\"token punctuation\">,</span> <span class=\"token class-name\">LocalDateTime</span> outboundDepartureDate<span class=\"token punctuation\">,</span> <span class=\"token class-name\">LocalDate</span> returnDepartureDate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>flight<span class=\"token punctuation\">.</span><span class=\"token function\">isOneWay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isMyCompany</span><span class=\"token punctuation\">(</span>flight<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>outboundDepartureDate<span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span>FIRST_OF_NOVEMBER<span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">||</span> returnDepartureDate<span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span>THIRTY_FIRST_OF_OCTOBER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">HandBaggageInformation</span> <span class=\"token function\">getFrom</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> renderLanguage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>newMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>renderLanguage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">OldMyCompanyHandBaggageInformationFactory</span> oldMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">MyCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OldMyCompanyHandBaggageInformationFactory</span> oldMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>oldMyCompanyHandBaggageInformationFactory <span class=\"token operator\">=</span> oldMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">canHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Flight</span> flight<span class=\"token punctuation\">,</span> <span class=\"token class-name\">LocalDateTime</span> outboundDepartureDate<span class=\"token punctuation\">,</span> <span class=\"token class-name\">LocalDate</span> returnDepartureDate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>flight<span class=\"token punctuation\">.</span><span class=\"token function\">isOneWay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isMyCompany</span><span class=\"token punctuation\">(</span>flight<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>outboundDepartureDate<span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span>FIRST_OF_NOVEMBER<span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">||</span> returnDepartureDate<span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span>THIRTY_FIRST_OF_OCTOBER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">HandBaggageInformation</span> <span class=\"token function\">getFrom</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> renderLanguage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> oldMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>renderLanguage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5>3. Create a common signature to extract the chain item</h5>\n<p>The purpose here is to obtain a common signature for all the conditions we have just extracted. As this part is more\ndomain oriented, I am not diving into the details. Just notice the three main modifications:</p>\n<ul>\n<li>the <code class=\"language-text\">Order</code> has the same information as the <code class=\"language-text\">Flight</code> for our case, so we remove the <code class=\"language-text\">Order</code> class in favor of\nthe <code class=\"language-text\">Flight</code> class.</li>\n<li>Keep only one date, which is our threshold date, by playing a bit with <code class=\"language-text\">isAfter()</code> and <code class=\"language-text\">isBefore()</code>.</li>\n<li>Move some operations from the <code class=\"language-text\">HandBaggageInformationFactory</code> class to the <code class=\"language-text\">Flight</code> one, which is more domain\noriented. (<a href=\"https://github.com/bonfa/IfRemovingARealUseCase/blob/7936f7daf9d01d4139b0fcda9980078978009d7a/src/main/java/it/fbonfadelli/hand_baggage/HandBaggageInformationFactory.java\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Source code</a>)</li>\n</ul>\n<p>So, after these operations the code looks like</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HandBaggageInformationFactory</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">LocalDateTime</span> FIRST_OF_NOVEMBER <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2018</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HandBaggageInformation</span> <span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span> order<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TranslationRepository</span> translationRepository<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> renderLanguage<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> flightId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Flight</span> flight <span class=\"token operator\">=</span> order<span class=\"token punctuation\">.</span><span class=\"token function\">findFlight</span><span class=\"token punctuation\">(</span>flightId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">NewMyCompanyHandBaggageInformationFactory</span> newMyCompanyHandBaggageInformationFactory <span class=\"token operator\">=</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">NewMyCompanyHandBaggageInformationFactory</span><span class=\"token punctuation\">(</span>translationRepository<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">OldMyCompanyHandBaggageInformationFactory</span> oldMyCompanyHandBaggageInformationFactory <span class=\"token operator\">=</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">OldMyCompanyHandBaggageInformationFactory</span><span class=\"token punctuation\">(</span>translationRepository<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">NotMyCompanyHandBaggageInformationFactory</span> notMyCompanyHandBaggageInformationFactory <span class=\"token operator\">=</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">NotMyCompanyHandBaggageInformationFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">MyCompanyOneWayAfterTheFirstOfNovember</span> myCompanyOneWayAfterTheFirstOfNovember <span class=\"token operator\">=</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyCompanyOneWayAfterTheFirstOfNovember</span><span class=\"token punctuation\">(</span>newMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myCompanyOneWayAfterTheFirstOfNovember<span class=\"token punctuation\">.</span><span class=\"token function\">canHandle</span><span class=\"token punctuation\">(</span>flight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> myCompanyOneWayAfterTheFirstOfNovember<span class=\"token punctuation\">.</span><span class=\"token function\">getFrom</span><span class=\"token punctuation\">(</span>renderLanguage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">MyCompanyOneWayBeforeTheFirstOfNovember</span> myCompanyOneWayBeforeTheFirstOfNovember <span class=\"token operator\">=</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyCompanyOneWayBeforeTheFirstOfNovember</span><span class=\"token punctuation\">(</span>oldMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myCompanyOneWayBeforeTheFirstOfNovember<span class=\"token punctuation\">.</span><span class=\"token function\">canHandle</span><span class=\"token punctuation\">(</span>flight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> myCompanyOneWayBeforeTheFirstOfNovember<span class=\"token punctuation\">.</span><span class=\"token function\">getFrom</span><span class=\"token punctuation\">(</span>renderLanguage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">MyCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember</span> myCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember <span class=\"token operator\">=</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember</span><span class=\"token punctuation\">(</span>newMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember<span class=\"token punctuation\">.</span><span class=\"token function\">canHandle</span><span class=\"token punctuation\">(</span>flight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> myCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">getFrom</span><span class=\"token punctuation\">(</span>renderLanguage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">MyCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember</span> myCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span>\n                <span class=\"token class-name\">MyCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember</span><span class=\"token punctuation\">(</span>oldMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember<span class=\"token punctuation\">.</span><span class=\"token function\">canHandle</span><span class=\"token punctuation\">(</span>flight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> myCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember<span class=\"token punctuation\">.</span><span class=\"token function\">getFrom</span><span class=\"token punctuation\">(</span>renderLanguage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> notMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">.</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCompanyOneWayAfterTheFirstOfNovember</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">NewMyCompanyHandBaggageInformationFactory</span> newMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">MyCompanyOneWayAfterTheFirstOfNovember</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NewMyCompanyHandBaggageInformationFactory</span> newMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>newMyCompanyHandBaggageInformationFactory <span class=\"token operator\">=</span> newMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">canHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Flight</span> flight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> flight<span class=\"token punctuation\">.</span><span class=\"token function\">isOneWay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">&amp;&amp;</span> flight<span class=\"token punctuation\">.</span><span class=\"token function\">isMyCompany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">&amp;&amp;</span> flight<span class=\"token punctuation\">.</span><span class=\"token function\">getOutboundDepartureDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span>FIRST_OF_NOVEMBER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">HandBaggageInformation</span> <span class=\"token function\">getFrom</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> renderLanguage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>newMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>renderLanguage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCompanyOneWayBeforeTheFirstOfNovember</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">OldMyCompanyHandBaggageInformationFactory</span> oldMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">MyCompanyOneWayBeforeTheFirstOfNovember</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OldMyCompanyHandBaggageInformationFactory</span> oldMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>oldMyCompanyHandBaggageInformationFactory <span class=\"token operator\">=</span> oldMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">canHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Flight</span> flight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> flight<span class=\"token punctuation\">.</span><span class=\"token function\">isOneWay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">&amp;&amp;</span> flight<span class=\"token punctuation\">.</span><span class=\"token function\">isMyCompany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>flight<span class=\"token punctuation\">.</span><span class=\"token function\">getOutboundDepartureDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span>FIRST_OF_NOVEMBER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">HandBaggageInformation</span> <span class=\"token function\">getFrom</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> renderLanguage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>oldMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>renderLanguage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">NewMyCompanyHandBaggageInformationFactory</span> newMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NewMyCompanyHandBaggageInformationFactory</span> newMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>newMyCompanyHandBaggageInformationFactory <span class=\"token operator\">=</span> newMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">canHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Flight</span> flight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>flight<span class=\"token punctuation\">.</span><span class=\"token function\">isOneWay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">&amp;&amp;</span> flight<span class=\"token punctuation\">.</span><span class=\"token function\">isMyCompany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>flight<span class=\"token punctuation\">.</span><span class=\"token function\">getOutboundDepartureDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span>FIRST_OF_NOVEMBER<span class=\"token punctuation\">)</span>\n                        <span class=\"token operator\">||</span> flight<span class=\"token punctuation\">.</span><span class=\"token function\">getReturnDepartureDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span>FIRST_OF_NOVEMBER<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">HandBaggageInformation</span> <span class=\"token function\">getFrom</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> renderLanguage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>newMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>renderLanguage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">OldMyCompanyHandBaggageInformationFactory</span> oldMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">MyCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OldMyCompanyHandBaggageInformationFactory</span> oldMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>oldMyCompanyHandBaggageInformationFactory <span class=\"token operator\">=</span> oldMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">canHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Flight</span> flight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>flight<span class=\"token punctuation\">.</span><span class=\"token function\">isOneWay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">&amp;&amp;</span> flight<span class=\"token punctuation\">.</span><span class=\"token function\">isMyCompany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>flight<span class=\"token punctuation\">.</span><span class=\"token function\">getOutboundDepartureDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span>FIRST_OF_NOVEMBER<span class=\"token punctuation\">)</span>\n                        <span class=\"token operator\">||</span> flight<span class=\"token punctuation\">.</span><span class=\"token function\">getReturnDepartureDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span>FIRST_OF_NOVEMBER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">HandBaggageInformation</span> <span class=\"token function\">getFrom</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> renderLanguage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> oldMyCompanyHandBaggageInformationFactory<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>renderLanguage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5>4. Extracting the interface of the chain item</h5>\n<p>By watching closely all the extracted conditions after the simplifications made, you can notice that now all the items\nhas a common method signature. And if you think that is time of an interface, you are totally right 🏆. So, we can\neasily extract an interface from one conditions chosen randomly, for example <code class=\"language-text\">MyCompanyOneWayAfterTheFirstOfNovember</code>.\n(<a href=\"https://github.com/bonfa/IfRemovingARealUseCase/blob/3e1cac2443d4bd5b0929917b2fc95808a21bc9ca/src/main/java/it/fbonfadelli/hand_baggage/HandBaggageInformationFactory.java\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Source code</a>)</p>\n<p>If you use Idea, its <code class=\"language-text\">Extract interface</code> feature can be helpful.</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>   public interface HandBaggageInformationPolicy {\n<span class=\"token prefix inserted\">+</span>       boolean canHandle(Flight flight);\n<span class=\"token prefix inserted\">+</span>       HandBaggageInformation getFrom(String renderLanguage);\n<span class=\"token prefix inserted\">+</span>   }\n</span>\n\npublic class HandBaggageInformationFactory {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   private static final LocalDateTime FIRST_OF_NOVEMBER = LocalDateTime.of(2018, 11, 1, 0, 0, 0);\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   public HandBaggageInformation from(Order order, TranslationRepository translationRepository, String renderLanguage, Integer flightId) {\n<span class=\"token prefix unchanged\"> </span>       Flight flight = order.findFlight(flightId);\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       NewMyCompanyHandBaggageInformationFactory newMyCompanyHandBaggageInformationFactory =\n<span class=\"token prefix unchanged\"> </span>               new NewMyCompanyHandBaggageInformationFactory(translationRepository);\n<span class=\"token prefix unchanged\"> </span>       OldMyCompanyHandBaggageInformationFactory oldMyCompanyHandBaggageInformationFactory =\n<span class=\"token prefix unchanged\"> </span>               new OldMyCompanyHandBaggageInformationFactory(translationRepository);\n<span class=\"token prefix unchanged\"> </span>       NotMyCompanyHandBaggageInformationFactory notMyCompanyHandBaggageInformationFactory =\n<span class=\"token prefix unchanged\"> </span>               new NotMyCompanyHandBaggageInformationFactory();\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       MyCompanyOneWayAfterTheFirstOfNovember myCompanyOneWayAfterTheFirstOfNovember =\n<span class=\"token prefix unchanged\"> </span>               new MyCompanyOneWayAfterTheFirstOfNovember(newMyCompanyHandBaggageInformationFactory);\n<span class=\"token prefix unchanged\"> </span>       if (myCompanyOneWayAfterTheFirstOfNovember.canHandle(flight)) {\n<span class=\"token prefix unchanged\"> </span>           return myCompanyOneWayAfterTheFirstOfNovember.getFrom(renderLanguage);\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       MyCompanyOneWayBeforeTheFirstOfNovember myCompanyOneWayBeforeTheFirstOfNovember =\n<span class=\"token prefix unchanged\"> </span>               new MyCompanyOneWayBeforeTheFirstOfNovember(oldMyCompanyHandBaggageInformationFactory);\n<span class=\"token prefix unchanged\"> </span>       if (myCompanyOneWayBeforeTheFirstOfNovember.canHandle(flight)) {\n<span class=\"token prefix unchanged\"> </span>           return myCompanyOneWayBeforeTheFirstOfNovember.getFrom(renderLanguage);\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       MyCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember myCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember =\n<span class=\"token prefix unchanged\"> </span>               new MyCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember(newMyCompanyHandBaggageInformationFactory);\n<span class=\"token prefix unchanged\"> </span>       if (myCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember.canHandle(flight)) {\n<span class=\"token prefix unchanged\"> </span>           return myCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember\n<span class=\"token prefix unchanged\"> </span>                   .getFrom(renderLanguage);\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       MyCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember myCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember = new\n<span class=\"token prefix unchanged\"> </span>               MyCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember(oldMyCompanyHandBaggageInformationFactory);\n<span class=\"token prefix unchanged\"> </span>       if (myCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember.canHandle(flight)) {\n<span class=\"token prefix unchanged\"> </span>           return myCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember.getFrom(renderLanguage);\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       return notMyCompanyHandBaggageInformationFactory.make();\n<span class=\"token prefix unchanged\"> </span>   }\n</span>\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>   private class MyCompanyOneWayAfterTheFirstOfNovember {\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>   private class MyCompanyOneWayAfterTheFirstOfNovember implements HandBaggageInformationPolicy {\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       private final NewMyCompanyHandBaggageInformationFactory newMyCompanyHandBaggageInformationFactory;\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       private MyCompanyOneWayAfterTheFirstOfNovember(NewMyCompanyHandBaggageInformationFactory newMyCompanyHandBaggageInformationFactory) {\n<span class=\"token prefix unchanged\"> </span>           this.newMyCompanyHandBaggageInformationFactory = newMyCompanyHandBaggageInformationFactory;\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>       @Override\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       public boolean canHandle(Flight flight) {\n<span class=\"token prefix unchanged\"> </span>           return flight.isOneWay()\n<span class=\"token prefix unchanged\"> </span>                   &amp;&amp; flight.isMyCompany()\n<span class=\"token prefix unchanged\"> </span>                   &amp;&amp; flight.getOutboundDepartureDate().isAfter(FIRST_OF_NOVEMBER);\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>       @Override\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       public HandBaggageInformation getFrom(String renderLanguage) {\n<span class=\"token prefix unchanged\"> </span>           return this.newMyCompanyHandBaggageInformationFactory.from(renderLanguage);\n<span class=\"token prefix unchanged\"> </span>       }\n<span class=\"token prefix unchanged\"> </span>   }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   private class MyCompanyOneWayBeforeTheFirstOfNovember {\n<span class=\"token prefix unchanged\"> </span>       private final OldMyCompanyHandBaggageInformationFactory oldMyCompanyHandBaggageInformationFactory;\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       private MyCompanyOneWayBeforeTheFirstOfNovember(OldMyCompanyHandBaggageInformationFactory oldMyCompanyHandBaggageInformationFactory) {\n<span class=\"token prefix unchanged\"> </span>           this.oldMyCompanyHandBaggageInformationFactory = oldMyCompanyHandBaggageInformationFactory;\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       public boolean canHandle(Flight flight) {\n<span class=\"token prefix unchanged\"> </span>           return flight.isOneWay()\n<span class=\"token prefix unchanged\"> </span>                   &amp;&amp; flight.isMyCompany()\n<span class=\"token prefix unchanged\"> </span>                   &amp;&amp; !flight.getOutboundDepartureDate().isAfter(FIRST_OF_NOVEMBER);\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       private HandBaggageInformation getFrom(String renderLanguage) {\n<span class=\"token prefix unchanged\"> </span>           return this.oldMyCompanyHandBaggageInformationFactory.from(renderLanguage);\n<span class=\"token prefix unchanged\"> </span>       }\n<span class=\"token prefix unchanged\"> </span>   }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   private class MyCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember {\n<span class=\"token prefix unchanged\"> </span>       private final NewMyCompanyHandBaggageInformationFactory newMyCompanyHandBaggageInformationFactory;\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       public MyCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember(NewMyCompanyHandBaggageInformationFactory newMyCompanyHandBaggageInformationFactory) {\n<span class=\"token prefix unchanged\"> </span>           this.newMyCompanyHandBaggageInformationFactory = newMyCompanyHandBaggageInformationFactory;\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       public boolean canHandle(Flight flight) {\n<span class=\"token prefix unchanged\"> </span>           return !flight.isOneWay()\n<span class=\"token prefix unchanged\"> </span>                   &amp;&amp; flight.isMyCompany()\n<span class=\"token prefix unchanged\"> </span>                   &amp;&amp; (flight.getOutboundDepartureDate().isAfter(FIRST_OF_NOVEMBER)\n<span class=\"token prefix unchanged\"> </span>                       || flight.getReturnDepartureDate().isAfter(FIRST_OF_NOVEMBER)\n<span class=\"token prefix unchanged\"> </span>                   );\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       public HandBaggageInformation getFrom(String renderLanguage) {\n<span class=\"token prefix unchanged\"> </span>           return this.newMyCompanyHandBaggageInformationFactory.from(renderLanguage);\n<span class=\"token prefix unchanged\"> </span>       }\n<span class=\"token prefix unchanged\"> </span>   }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   private class MyCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember {\n<span class=\"token prefix unchanged\"> </span>       private final OldMyCompanyHandBaggageInformationFactory oldMyCompanyHandBaggageInformationFactory;\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       private MyCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember(OldMyCompanyHandBaggageInformationFactory oldMyCompanyHandBaggageInformationFactory) {\n<span class=\"token prefix unchanged\"> </span>           this.oldMyCompanyHandBaggageInformationFactory = oldMyCompanyHandBaggageInformationFactory;\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       private boolean canHandle(Flight flight) {\n<span class=\"token prefix unchanged\"> </span>           return !flight.isOneWay()\n<span class=\"token prefix unchanged\"> </span>                   &amp;&amp; flight.isMyCompany()\n<span class=\"token prefix unchanged\"> </span>                   &amp;&amp; (!(flight.getOutboundDepartureDate().isAfter(FIRST_OF_NOVEMBER)\n<span class=\"token prefix unchanged\"> </span>                       || flight.getReturnDepartureDate().isAfter(FIRST_OF_NOVEMBER))\n<span class=\"token prefix unchanged\"> </span>                   );\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       public HandBaggageInformation getFrom(String renderLanguage) {\n<span class=\"token prefix unchanged\"> </span>           return oldMyCompanyHandBaggageInformationFactory.from(renderLanguage);\n<span class=\"token prefix unchanged\"> </span>       }\n<span class=\"token prefix unchanged\"> </span>   }\n</span>}</code></pre></div>\n<p>And then, we are going to make all the conditions implement the interface <code class=\"language-text\">HandBaggageInformationPolicy</code>.\n(<a href=\"https://github.com/bonfa/IfRemovingARealUseCase/blob/9cf7b408ff15217894b3e101b47886f8ce993a97/src/main/java/it/fbonfadelli/hand_baggage/HandBaggageInformationFactory.java\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Source code</a>)</p>\n<p>Unfortunately Idea won't help us in this.</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">public class HandBaggageInformationFactory {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   private static final LocalDateTime FIRST_OF_NOVEMBER = LocalDateTime.of(2018, 11, 1, 0, 0, 0);\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   public HandBaggageInformation from(Order order, TranslationRepository translationRepository, String renderLanguage, Integer flightId) {\n<span class=\"token prefix unchanged\"> </span>       //same as before\n<span class=\"token prefix unchanged\"> </span>   }\n</span>\n\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   private class MyCompanyOneWayAfterTheFirstOfNovember implements HandBaggageInformationPolicy {\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       private final NewMyCompanyHandBaggageInformationFactory newMyCompanyHandBaggageInformationFactory;\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       private MyCompanyOneWayAfterTheFirstOfNovember(NewMyCompanyHandBaggageInformationFactory newMyCompanyHandBaggageInformationFactory) {\n<span class=\"token prefix unchanged\"> </span>           this.newMyCompanyHandBaggageInformationFactory = newMyCompanyHandBaggageInformationFactory;\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       @Override\n<span class=\"token prefix unchanged\"> </span>       public boolean canHandle(Flight flight) {\n<span class=\"token prefix unchanged\"> </span>           return flight.isOneWay()\n<span class=\"token prefix unchanged\"> </span>                   &amp;&amp; flight.isMyCompany()\n<span class=\"token prefix unchanged\"> </span>                   &amp;&amp; flight.getOutboundDepartureDate().isAfter(FIRST_OF_NOVEMBER);\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       @Override\n<span class=\"token prefix unchanged\"> </span>       public HandBaggageInformation getFrom(String renderLanguage) {\n<span class=\"token prefix unchanged\"> </span>           return this.newMyCompanyHandBaggageInformationFactory.from(renderLanguage);\n<span class=\"token prefix unchanged\"> </span>       }\n<span class=\"token prefix unchanged\"> </span>   }\n</span>\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>    private class MyCompanyOneWayBeforeTheFirstOfNovember {\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>    private class MyCompanyOneWayBeforeTheFirstOfNovember implements HandBaggageInformationPolicy {\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       private final OldMyCompanyHandBaggageInformationFactory oldMyCompanyHandBaggageInformationFactory;\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       private MyCompanyOneWayBeforeTheFirstOfNovember(OldMyCompanyHandBaggageInformationFactory oldMyCompanyHandBaggageInformationFactory) {\n<span class=\"token prefix unchanged\"> </span>           this.oldMyCompanyHandBaggageInformationFactory = oldMyCompanyHandBaggageInformationFactory;\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>       @Override\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       public boolean canHandle(Flight flight) {\n<span class=\"token prefix unchanged\"> </span>           return flight.isOneWay()\n<span class=\"token prefix unchanged\"> </span>                   &amp;&amp; flight.isMyCompany()\n<span class=\"token prefix unchanged\"> </span>                   &amp;&amp; !flight.getOutboundDepartureDate().isAfter(FIRST_OF_NOVEMBER);\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>       @Override\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       public HandBaggageInformation getFrom(String renderLanguage) {\n<span class=\"token prefix unchanged\"> </span>           return this.oldMyCompanyHandBaggageInformationFactory.from(renderLanguage);\n<span class=\"token prefix unchanged\"> </span>       }\n<span class=\"token prefix unchanged\"> </span>   }\n</span>\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>    private class MyCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember {\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>    private class MyCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember implements HandBaggageInformationPolicy {\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       private final NewMyCompanyHandBaggageInformationFactory newMyCompanyHandBaggageInformationFactory;\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       public MyCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember(NewMyCompanyHandBaggageInformationFactory newMyCompanyHandBaggageInformationFactory) {\n<span class=\"token prefix unchanged\"> </span>           this.newMyCompanyHandBaggageInformationFactory = newMyCompanyHandBaggageInformationFactory;\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>       @Override\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       public boolean canHandle(Flight flight) {\n<span class=\"token prefix unchanged\"> </span>           return !flight.isOneWay()\n<span class=\"token prefix unchanged\"> </span>                   &amp;&amp; flight.isMyCompany()\n<span class=\"token prefix unchanged\"> </span>                   &amp;&amp; (flight.getOutboundDepartureDate().isAfter(FIRST_OF_NOVEMBER)\n<span class=\"token prefix unchanged\"> </span>                       || flight.getReturnDepartureDate().isAfter(FIRST_OF_NOVEMBER)\n<span class=\"token prefix unchanged\"> </span>                   );\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>       @Override\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       public HandBaggageInformation getFrom(String renderLanguage) {\n<span class=\"token prefix unchanged\"> </span>           return this.newMyCompanyHandBaggageInformationFactory.from(renderLanguage);\n<span class=\"token prefix unchanged\"> </span>       }\n<span class=\"token prefix unchanged\"> </span>   }\n</span>\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>    private class MyCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember {\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>    private class MyCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember implements HandBaggageInformationPolicy {\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       private final OldMyCompanyHandBaggageInformationFactory oldMyCompanyHandBaggageInformationFactory;\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       private MyCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember(OldMyCompanyHandBaggageInformationFactory oldMyCompanyHandBaggageInformationFactory) {\n<span class=\"token prefix unchanged\"> </span>           this.oldMyCompanyHandBaggageInformationFactory = oldMyCompanyHandBaggageInformationFactory;\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>        @Override\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       public boolean canHandle(Flight flight) {\n<span class=\"token prefix unchanged\"> </span>           return !flight.isOneWay()\n<span class=\"token prefix unchanged\"> </span>                   &amp;&amp; flight.isMyCompany()\n<span class=\"token prefix unchanged\"> </span>                   &amp;&amp; (!(flight.getOutboundDepartureDate().isAfter(FIRST_OF_NOVEMBER)\n<span class=\"token prefix unchanged\"> </span>                       || flight.getReturnDepartureDate().isAfter(FIRST_OF_NOVEMBER))\n<span class=\"token prefix unchanged\"> </span>                   );\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>        @Override\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       public HandBaggageInformation getFrom(String renderLanguage) {\n<span class=\"token prefix unchanged\"> </span>           return oldMyCompanyHandBaggageInformationFactory.from(renderLanguage);\n<span class=\"token prefix unchanged\"> </span>       }\n<span class=\"token prefix unchanged\"> </span>   }\n</span>}</code></pre></div>\n<p>Then it's time to extract each policy into its own file and move all the policies into a package, that, for the sake of\ngiving meaningful names, we call <code class=\"language-text\">policy</code>. To do this, we need to duplicate our threshold constant into more than one\npolicy implementation. This could be arguable as it is a duplication. Of course, there are alternatives to this, like\nmaking the constant public, but then we have the problem to decide where to put it.<br>\nSo, given the nature of our real case problem, in which the date will pass soon, and its very urgent time to market, we\ndecide to apply the ostrich algorithm (i.e. we are ignore this discussion) and prefer duplication over other solutions\n🙈🙉🙊.</p>\n<p>Also we move the creation of all the policies before the evaluation, for a reason you will understand in the next step.\n(<a href=\"https://github.com/bonfa/IfRemovingARealUseCase/blob/66da72572de64865537c8baf8f24499ee6b841b7/src/main/java/it/fbonfadelli/hand_baggage/HandBaggageInformationFactory.java\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Source code</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">public class HandBaggageInformationFactory {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   public HandBaggageInformation from(Order order, TranslationRepository translationRepository, String renderLanguage, Integer flightId) {\n<span class=\"token prefix unchanged\"> </span>       Flight flight = order.findFlight(flightId);\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       NewMyCompanyHandBaggageInformationFactory newMyCompanyHandBaggageInformationFactory =\n<span class=\"token prefix unchanged\"> </span>               new NewMyCompanyHandBaggageInformationFactory(translationRepository);\n<span class=\"token prefix unchanged\"> </span>       OldMyCompanyHandBaggageInformationFactory oldMyCompanyHandBaggageInformationFactory =\n<span class=\"token prefix unchanged\"> </span>               new OldMyCompanyHandBaggageInformationFactory(translationRepository);\n<span class=\"token prefix unchanged\"> </span>       NotMyCompanyHandBaggageInformationFactory notMyCompanyHandBaggageInformationFactory =\n<span class=\"token prefix unchanged\"> </span>               new NotMyCompanyHandBaggageInformationFactory();\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       MyCompanyOneWayAfterTheFirstOfNovember myCompanyOneWayAfterTheFirstOfNovember =\n<span class=\"token prefix unchanged\"> </span>               new MyCompanyOneWayAfterTheFirstOfNovember(newMyCompanyHandBaggageInformationFactory);\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>       MyCompanyOneWayBeforeTheFirstOfNovember myCompanyOneWayBeforeTheFirstOfNovember =\n<span class=\"token prefix inserted\">+</span>               new MyCompanyOneWayBeforeTheFirstOfNovember(oldMyCompanyHandBaggageInformationFactory);\n<span class=\"token prefix inserted\">+</span>       MyCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember myCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember =\n<span class=\"token prefix inserted\">+</span>               new MyCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember(newMyCompanyHandBaggageInformationFactory);\n<span class=\"token prefix inserted\">+</span>       MyCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember myCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember = new\n<span class=\"token prefix inserted\">+</span>               MyCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember(oldMyCompanyHandBaggageInformationFactory);\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       if (myCompanyOneWayAfterTheFirstOfNovember.canHandle(flight)) {\n<span class=\"token prefix unchanged\"> </span>           return myCompanyOneWayAfterTheFirstOfNovember.getFrom(renderLanguage);\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>       MyCompanyOneWayBeforeTheFirstOfNovember myCompanyOneWayBeforeTheFirstOfNovember =\n<span class=\"token prefix deleted\">-</span>               new MyCompanyOneWayBeforeTheFirstOfNovember(oldMyCompanyHandBaggageInformationFactory);\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       if (myCompanyOneWayBeforeTheFirstOfNovember.canHandle(flight)) {\n<span class=\"token prefix unchanged\"> </span>           return myCompanyOneWayBeforeTheFirstOfNovember.getFrom(renderLanguage);\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>       MyCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember myCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember =\n<span class=\"token prefix deleted\">-</span>               new MyCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember(newMyCompanyHandBaggageInformationFactory);\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       if (myCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember.canHandle(flight)) {\n<span class=\"token prefix unchanged\"> </span>           return myCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember\n<span class=\"token prefix unchanged\"> </span>                   .getFrom(renderLanguage);\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>       MyCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember myCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember = new\n<span class=\"token prefix deleted\">-</span>               MyCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember(oldMyCompanyHandBaggageInformationFactory);\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       if (myCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember.canHandle(flight)) {\n<span class=\"token prefix unchanged\"> </span>           return myCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember.getFrom(renderLanguage);\n<span class=\"token prefix unchanged\"> </span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       return notMyCompanyHandBaggageInformationFactory.make();\n<span class=\"token prefix unchanged\"> </span>   }\n</span>}</code></pre></div>\n<h5>5. Inject the chain at construction time</h5>\n<p>Now that we have all the policies created at the same point of our code, we can put all of them inside a list, loop over\nthe list and just apply the first policy satisfying the condition. In this way, we remove the chain of <code class=\"language-text\">if</code> in favor of\na chain of\nresponsibility. (<a href=\"https://github.com/bonfa/IfRemovingARealUseCase/blob/4320112c0b1080ad59d89af2ea530c10f47ba57c/src/main/java/it/fbonfadelli/hand_baggage/HandBaggageInformationFactory.java\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Source code</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">public class HandBaggageInformationFactory {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   public HandBaggageInformation from(Order order, TranslationRepository translationRepository, String renderLanguage, Integer flightId) {\n<span class=\"token prefix unchanged\"> </span>       Flight flight = order.findFlight(flightId);\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       NewMyCompanyHandBaggageInformationFactory newMyCompanyHandBaggageInformationFactory =\n<span class=\"token prefix unchanged\"> </span>               new NewMyCompanyHandBaggageInformationFactory(translationRepository);\n<span class=\"token prefix unchanged\"> </span>       OldMyCompanyHandBaggageInformationFactory oldMyCompanyHandBaggageInformationFactory =\n<span class=\"token prefix unchanged\"> </span>               new OldMyCompanyHandBaggageInformationFactory(translationRepository);\n<span class=\"token prefix unchanged\"> </span>       NotMyCompanyHandBaggageInformationFactory notMyCompanyHandBaggageInformationFactory =\n<span class=\"token prefix unchanged\"> </span>               new NotMyCompanyHandBaggageInformationFactory();\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       HandBaggageInformationPolicy myCompanyOneWayAfterTheFirstOfNovember =\n<span class=\"token prefix unchanged\"> </span>               new MyCompanyOneWayAfterTheFirstOfNovember(newMyCompanyHandBaggageInformationFactory);\n<span class=\"token prefix unchanged\"> </span>       HandBaggageInformationPolicy myCompanyOneWayBeforeTheFirstOfNovember =\n<span class=\"token prefix unchanged\"> </span>               new MyCompanyOneWayBeforeTheFirstOfNovember(oldMyCompanyHandBaggageInformationFactory);\n<span class=\"token prefix unchanged\"> </span>       HandBaggageInformationPolicy myCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember =\n<span class=\"token prefix unchanged\"> </span>               new MyCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember(newMyCompanyHandBaggageInformationFactory);\n<span class=\"token prefix unchanged\"> </span>       HandBaggageInformationPolicy myCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember = new\n<span class=\"token prefix unchanged\"> </span>               MyCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember(oldMyCompanyHandBaggageInformationFactory);\n</span>\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>       List&lt;HandBaggageInformationPolicy> policies = Arrays.asList(\n<span class=\"token prefix inserted\">+</span>               myCompanyOneWayAfterTheFirstOfNovember,\n<span class=\"token prefix inserted\">+</span>               myCompanyOneWayBeforeTheFirstOfNovember,\n<span class=\"token prefix inserted\">+</span>               myCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember,\n<span class=\"token prefix inserted\">+</span>               myCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember\n<span class=\"token prefix inserted\">+</span>       );\n<span class=\"token prefix inserted\">+</span>\n<span class=\"token prefix inserted\">+</span>       for (HandBaggageInformationPolicy policy : policies) {\n<span class=\"token prefix inserted\">+</span>           if (policy.canHandle(flight)) {\n<span class=\"token prefix inserted\">+</span>               return policy.getFrom(renderLanguage);\n<span class=\"token prefix inserted\">+</span>           }\n<span class=\"token prefix inserted\">+</span>       }\n</span>\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>       if (myCompanyOneWayAfterTheFirstOfNovember.canHandle(flight)) {\n<span class=\"token prefix deleted\">-</span>           return myCompanyOneWayAfterTheFirstOfNovember.getFrom(renderLanguage);\n<span class=\"token prefix deleted\">-</span>       }\n<span class=\"token prefix deleted\">-</span>\n<span class=\"token prefix deleted\">-</span>       if (myCompanyOneWayBeforeTheFirstOfNovember.canHandle(flight)) {\n<span class=\"token prefix deleted\">-</span>           return myCompanyOneWayBeforeTheFirstOfNovember.getFrom(renderLanguage);\n<span class=\"token prefix deleted\">-</span>       }\n<span class=\"token prefix deleted\">-</span>\n<span class=\"token prefix deleted\">-</span>       if (myCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember.canHandle(flight)) {\n<span class=\"token prefix deleted\">-</span>           return myCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember\n<span class=\"token prefix deleted\">-</span>                           .getFrom(renderLanguage);\n<span class=\"token prefix deleted\">-</span>       }\n<span class=\"token prefix deleted\">-</span>       if (myCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember.canHandle(flight)) {\n<span class=\"token prefix deleted\">-</span>           return myCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember.getFrom(renderLanguage);\n<span class=\"token prefix deleted\">-</span>       }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       return notMyCompanyHandBaggageInformationFactory.make();\n<span class=\"token prefix unchanged\"> </span>   }\n</span>}</code></pre></div>\n<p>If you prefer, you can use a stream instead of a classical loop.</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">public class HandBaggageInformationFactory {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   public HandBaggageInformation from(Order order, TranslationRepository translationRepository, String renderLanguage, Integer flightId) {\n<span class=\"token prefix unchanged\"> </span>       Flight flight = order.findFlight(flightId);\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       NewMyCompanyHandBaggageInformationFactory newMyCompanyHandBaggageInformationFactory =\n<span class=\"token prefix unchanged\"> </span>               new NewMyCompanyHandBaggageInformationFactory(translationRepository);\n<span class=\"token prefix unchanged\"> </span>       OldMyCompanyHandBaggageInformationFactory oldMyCompanyHandBaggageInformationFactory =\n<span class=\"token prefix unchanged\"> </span>               new OldMyCompanyHandBaggageInformationFactory(translationRepository);\n<span class=\"token prefix unchanged\"> </span>       NotMyCompanyHandBaggageInformationFactory notMyCompanyHandBaggageInformationFactory =\n<span class=\"token prefix unchanged\"> </span>               new NotMyCompanyHandBaggageInformationFactory();\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       HandBaggageInformationPolicy myCompanyOneWayAfterTheFirstOfNovember =\n<span class=\"token prefix unchanged\"> </span>               new MyCompanyOneWayAfterTheFirstOfNovember(newMyCompanyHandBaggageInformationFactory);\n<span class=\"token prefix unchanged\"> </span>       HandBaggageInformationPolicy myCompanyOneWayBeforeTheFirstOfNovember =\n<span class=\"token prefix unchanged\"> </span>               new MyCompanyOneWayBeforeTheFirstOfNovember(oldMyCompanyHandBaggageInformationFactory);\n<span class=\"token prefix unchanged\"> </span>       HandBaggageInformationPolicy myCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember =\n<span class=\"token prefix unchanged\"> </span>               new MyCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember(newMyCompanyHandBaggageInformationFactory);\n<span class=\"token prefix unchanged\"> </span>       HandBaggageInformationPolicy myCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember = new\n<span class=\"token prefix unchanged\"> </span>               MyCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember(oldMyCompanyHandBaggageInformationFactory);\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       List&lt;HandBaggageInformationPolicy> policies = Arrays.asList(\n<span class=\"token prefix unchanged\"> </span>               myCompanyOneWayAfterTheFirstOfNovember,\n<span class=\"token prefix unchanged\"> </span>               myCompanyOneWayBeforeTheFirstOfNovember,\n<span class=\"token prefix unchanged\"> </span>               myCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember,\n<span class=\"token prefix unchanged\"> </span>               myCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember\n<span class=\"token prefix unchanged\"> </span>       );\n</span>\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>       return policies.stream()\n<span class=\"token prefix inserted\">+</span>               .filter(policy -> policy.canHandle(flight))\n<span class=\"token prefix inserted\">+</span>               .findFirst()\n<span class=\"token prefix inserted\">+</span>               .map(policy -> policy.getFrom(renderLanguage))\n<span class=\"token prefix inserted\">+</span>               .orElse(notMyCompanyHandBaggageInformationFactory.make());\n</span>\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>       for (HandBaggageInformationPolicy policy : policies) {\n<span class=\"token prefix deleted\">-</span>           if (policy.canHandle(flight)) {\n<span class=\"token prefix deleted\">-</span>               return policy.getFrom(renderLanguage);\n<span class=\"token prefix deleted\">-</span>           }\n<span class=\"token prefix deleted\">-</span>       }\n<span class=\"token prefix deleted\">-</span>\n<span class=\"token prefix deleted\">-</span>       return notMyCompanyHandBaggageInformationFactory.make();\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   }\n</span>}</code></pre></div>\n<p>Now we are going to move the responsibility of creating the policies in a new class, named <code class=\"language-text\">HandBaggagePoliciesFactory</code>.\nThe purpose here, is to have each class which performs a single operation. Does it sound familiar 🤔? No? Yes? Well,\nthis is the <em>Single Responsibility Principle</em> 🤩. Again, if you use Idea, you can use its <code class=\"language-text\">Extract method object</code>\nfeature. I know, it's getting kind of repetitive 😅 but this is one of the refactoring commands we use most frequently\nwhen we refactor code, so using it makes you save a lot of\ntime.(<a href=\"https://github.com/bonfa/IfRemovingARealUseCase/blob/0255c3442abd34a07832a367ca0ee04bfc624659/src/main/java/it/fbonfadelli/hand_baggage/HandBaggageInformationFactory.java\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Source code</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">public class HandBaggageInformationFactory {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   public HandBaggageInformation from(Order order, TranslationRepository translationRepository, String renderLanguage, Integer flightId) {\n<span class=\"token prefix unchanged\"> </span>       Flight flight = order.findFlight(flightId);\n</span>\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>       NewMyCompanyHandBaggageInformationFactory newMyCompanyHandBaggageInformationFactory =\n<span class=\"token prefix deleted\">-</span>               new NewMyCompanyHandBaggageInformationFactory(translationRepository);\n<span class=\"token prefix deleted\">-</span>       OldMyCompanyHandBaggageInformationFactory oldMyCompanyHandBaggageInformationFactory =\n<span class=\"token prefix deleted\">-</span>               new OldMyCompanyHandBaggageInformationFactory(translationRepository);\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       NotMyCompanyHandBaggageInformationFactory notMyCompanyHandBaggageInformationFactory =\n<span class=\"token prefix unchanged\"> </span>              new NotMyCompanyHandBaggageInformationFactory();\n</span>\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>       HandBaggageInformationPolicy myCompanyOneWayAfterTheFirstOfNovember =\n<span class=\"token prefix deleted\">-</span>               new MyCompanyOneWayAfterTheFirstOfNovember(newMyCompanyHandBaggageInformationFactory);\n<span class=\"token prefix deleted\">-</span>       HandBaggageInformationPolicy myCompanyOneWayBeforeTheFirstOfNovember =\n<span class=\"token prefix deleted\">-</span>               new MyCompanyOneWayBeforeTheFirstOfNovember(oldMyCompanyHandBaggageInformationFactory);\n<span class=\"token prefix deleted\">-</span>       HandBaggageInformationPolicy myCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember =\n<span class=\"token prefix deleted\">-</span>               new MyCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember(newMyCompanyHandBaggageInformationFactory);\n<span class=\"token prefix deleted\">-</span>       HandBaggageInformationPolicy myCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember = new\n<span class=\"token prefix deleted\">-</span>               MyCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember(oldMyCompanyHandBaggageInformationFactory);\n<span class=\"token prefix deleted\">-</span>\n<span class=\"token prefix deleted\">-</span>       List&lt;HandBaggageInformationPolicy> policies = Arrays.asList(\n<span class=\"token prefix deleted\">-</span>               myCompanyOneWayAfterTheFirstOfNovember,\n<span class=\"token prefix deleted\">-</span>               myCompanyOneWayBeforeTheFirstOfNovember,\n<span class=\"token prefix deleted\">-</span>               myCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember,\n<span class=\"token prefix deleted\">-</span>               myCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember\n<span class=\"token prefix deleted\">-</span>       );\n</span>\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>       List&lt;HandBaggageInformationPolicy> policies = new HandBaggagePoliciesFactory().make(translationRepository);\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       return policies.stream()\n<span class=\"token prefix unchanged\"> </span>               .filter(policy -> policy.canHandle(flight))\n<span class=\"token prefix unchanged\"> </span>               .findFirst()\n<span class=\"token prefix unchanged\"> </span>               .map(policy -> policy.getFrom(renderLanguage))\n<span class=\"token prefix unchanged\"> </span>               .orElse(notMyCompanyHandBaggageInformationFactory.make());\n<span class=\"token prefix unchanged\"> </span>   }\n</span>\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>   private static class HandBaggagePoliciesFactory {\n<span class=\"token prefix inserted\">+</span>       public List&lt;HandBaggageInformationPolicy> make(TranslationRepository translationRepository) {\n<span class=\"token prefix inserted\">+</span>           NewMyCompanyHandBaggageInformationFactory newMyCompanyHandBaggageInformationFactory =\n<span class=\"token prefix inserted\">+</span>                   new NewMyCompanyHandBaggageInformationFactory(translationRepository);\n<span class=\"token prefix inserted\">+</span>           OldMyCompanyHandBaggageInformationFactory oldMyCompanyHandBaggageInformationFactory =\n<span class=\"token prefix inserted\">+</span>                   new OldMyCompanyHandBaggageInformationFactory(translationRepository);\n<span class=\"token prefix inserted\">+</span>\n<span class=\"token prefix inserted\">+</span>           HandBaggageInformationPolicy myCompanyOneWayAfterTheFirstOfNovember =\n<span class=\"token prefix inserted\">+</span>                   new MyCompanyOneWayAfterTheFirstOfNovember(newMyCompanyHandBaggageInformationFactory);\n<span class=\"token prefix inserted\">+</span>           HandBaggageInformationPolicy myCompanyOneWayBeforeTheFirstOfNovember =\n<span class=\"token prefix inserted\">+</span>                   new MyCompanyOneWayBeforeTheFirstOfNovember(oldMyCompanyHandBaggageInformationFactory);\n<span class=\"token prefix inserted\">+</span>           HandBaggageInformationPolicy myCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember =\n<span class=\"token prefix inserted\">+</span>                   new MyCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember(newMyCompanyHandBaggageInformationFactory);\n<span class=\"token prefix inserted\">+</span>           HandBaggageInformationPolicy myCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember = new\n<span class=\"token prefix inserted\">+</span>                   MyCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember(oldMyCompanyHandBaggageInformationFactory);\n<span class=\"token prefix inserted\">+</span>\n<span class=\"token prefix inserted\">+</span>           return Arrays.asList(\n<span class=\"token prefix inserted\">+</span>                   myCompanyOneWayAfterTheFirstOfNovember,\n<span class=\"token prefix inserted\">+</span>                   myCompanyOneWayBeforeTheFirstOfNovember,\n<span class=\"token prefix inserted\">+</span>                   myCompanyRoundTripAtLeastOneDepartureAfterTheFirstOfNovember,\n<span class=\"token prefix inserted\">+</span>                   myCompanyRoundTripAllDeparturesBeforeTheFirstOfNovember\n<span class=\"token prefix inserted\">+</span>           );\n<span class=\"token prefix inserted\">+</span>       }\n<span class=\"token prefix inserted\">+</span>   }\n</span>}</code></pre></div>\n<p>And after extracting the class <code class=\"language-text\">HandBaggagePoliciesFactory</code> in its own file, we are going to inject the policies as\nparameter at construction time of <code class=\"language-text\">HandBaggageInformationFactory</code>. In case of Idea, you can make the IDE work for you.\nYou can just make the <code class=\"language-text\">policies</code> variable of <code class=\"language-text\">from</code> method become a field, with the command <code class=\"language-text\">Extract field</code>, decide to\ndefine it in the constructor and, then, simply use the <code class=\"language-text\">Extract parameter</code> feature in order to update all the\nconstructors of your object.</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">public class HandBaggageInformationFactory {\n\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>   private final List&lt;HandBaggageInformationPolicy> handBaggageInformationPolicies;\n</span>\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>   public HandBaggageInformationFactory(List&lt;HandBaggageInformationPolicy> handBaggageInformationPolicies) {\n<span class=\"token prefix inserted\">+</span>       this.handBaggageInformationPolicies = handBaggageInformationPolicies;\n<span class=\"token prefix inserted\">+</span>   }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   public HandBaggageInformation from(Order order, String renderLanguage, Integer flightId) {\n<span class=\"token prefix unchanged\"> </span>       Flight flight = order.findFlight(flightId);\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       NotMyCompanyHandBaggageInformationFactory notMyCompanyHandBaggageInformationFactory =\n<span class=\"token prefix unchanged\"> </span>               new NotMyCompanyHandBaggageInformationFactory();\n</span>\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>       List&lt;HandBaggageInformationPolicy> policies = new HandBaggagePoliciesFactory().make(translationRepository);\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       return handBaggageInformationPolicies.stream()\n<span class=\"token prefix unchanged\"> </span>               .filter(policy -> policy.canHandle(flight))\n<span class=\"token prefix unchanged\"> </span>               .findFirst()\n<span class=\"token prefix unchanged\"> </span>               .map(policy -> policy.getFrom(renderLanguage))\n<span class=\"token prefix unchanged\"> </span>               .orElse(notMyCompanyHandBaggageInformationFactory.make());\n<span class=\"token prefix unchanged\"> </span>   }\n</span>\n}</code></pre></div>\n<p>In our example, only the <code class=\"language-text\">HandBaggageInformationFactoryTest</code> has been updated. Notice, though, that we don't need to\nperform changes on the tests at all. They still\npass. (<a href=\"https://github.com/bonfa/IfRemovingARealUseCase/blob/99d743baa3d65c8041cb09af6dde757408914272/src/main/java/it/fbonfadelli/hand_baggage/HandBaggageInformationFactory.java\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Source code</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">public class HandBaggageInformationFactoryTest {\n\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   private HandBaggageInformationFactory handBaggageInformationFactory;\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   @Before\n<span class=\"token prefix unchanged\"> </span>   public void setUp() {\n<span class=\"token prefix unchanged\"> </span>       TranslationRepository translationRepository = Mockito.mock(TranslationRepository.class);\n</span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>        handBaggageInformationFactory = new HandBaggageInformationFactory();\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>        handBaggageInformationFactory =\n<span class=\"token prefix inserted\">+</span>                new HandBaggageInformationFactory(HandBaggagePoliciesFactory.make(translationRepository));\n<span class=\"token prefix inserted\">+</span>        }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   //The rest is the same\n</span>}</code></pre></div>\n<p>In order to maintain the same level of abstraction, we are going to inject also\nthe <code class=\"language-text\">NotMyCompanyHandBaggageInformationFactory</code> into the <code class=\"language-text\">HandBaggageInformationFactory</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">public class HandBaggageInformationFactory {\n\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   private final List&lt;HandBaggageInformationPolicy> handBaggageInformationPolicies;\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>   private final NotMyCompanyHandBaggageInformationFactory fallbackHandBaggageFactory;\n</span>\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>   public HandBaggageInformationFactory(List&lt;HandBaggageInformationPolicy> handBaggageInformationPolicies) {\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>   public HandBaggageInformationFactory(List&lt;HandBaggageInformationPolicy> handBaggageInformationPolicies,\n<span class=\"token prefix inserted\">+</span>                                        NotMyCompanyHandBaggageInformationFactory fallbackHandBaggageFactory) {\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       this.handBaggageInformationPolicies = handBaggageInformationPolicies;\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>       this.fallbackHandBaggageFactory = fallbackHandBaggageFactory;\n<span class=\"token prefix inserted\">+</span>   }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   public HandBaggageInformation from(Order order, String renderLanguage, Integer flightId) {\n<span class=\"token prefix unchanged\"> </span>       Flight flight = order.findFlight(flightId);\n</span>\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>       NotMyCompanyHandBaggageInformationFactory notMyCompanyHandBaggageInformationFactory =\n<span class=\"token prefix deleted\">-</span>                       new NotMyCompanyHandBaggageInformationFactory();\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       return handBaggageInformationPolicies.stream()\n<span class=\"token prefix unchanged\"> </span>               .filter(policy -> policy.canHandle(flight))\n<span class=\"token prefix unchanged\"> </span>               .findFirst()\n<span class=\"token prefix unchanged\"> </span>               .map(policy -> policy.getFrom(renderLanguage))\n<span class=\"token prefix unchanged\"> </span>               .orElse(fallbackHandBaggageFactory.make());\n<span class=\"token prefix unchanged\"> </span>   }\n</span>}</code></pre></div>\n<p>And, then, again, the <code class=\"language-text\">HandBaggageInformationFactoryTest</code> gets\nupdated. (<a href=\"https://github.com/bonfa/IfRemovingARealUseCase/blob/eac1ba3e1dc8f5cce3ba6c545349cd6d4730671e/src/main/java/it/fbonfadelli/hand_baggage/HandBaggageInformationFactory.java\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Source code</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">public class HandBaggageInformationFactoryTest {\n\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>private HandBaggageInformationFactory handBaggageInformationFactory;\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>    @Before\n<span class=\"token prefix unchanged\"> </span>    public void setUp() {\n<span class=\"token prefix unchanged\"> </span>        TranslationRepository translationRepository = Mockito.mock(TranslationRepository.class);\n<span class=\"token prefix unchanged\"> </span>        handBaggageInformationFactory =\n<span class=\"token prefix unchanged\"> </span>           new HandBaggageInformationFactory(\n<span class=\"token prefix unchanged\"> </span>               HandBaggagePoliciesFactory.make(translationRepository),\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>                    new NotMyCompanyHandBaggageInformationFactory()\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>           );\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>    //The rest is the same\n<span class=\"token prefix unchanged\"> </span>   }\n</span>}</code></pre></div>\n<p>And, that's it. You could keep on working on this piece of code to improve it more and more. But for post, we reached\nour goal, so no more refactoring 👏.</p>\n<h5>Conclusion</h5>\n<p>In this article we saw how to transform, step by step, a nested if structure into a chain of responsibility. The purpose\nof it is to make the code more readable and though easier to extend without introducing bugs. The main steps are flatten\nthe if structure into a sequence of plain if clauses, extract each if clause and its correspondent effect into a\nseparate class, extract an interface which is common to all the extracted classes, create an array containing all the\nclasses, loop over it by using the first item of the list that is able to handle the case you are dealing with, inject\nthe list of classes in order to make the class work with any combination of rules that you want. Additionally, we saw\nsome features of Idea IDE that allow us to perform most of the refactoring operations automatically, with only a few\nshortcuts.</p>","frontmatter":{"title":"Refactoring: a real case of a nested if structure transformed into a chain of responsibility","comments":true,"authors":["francesco_bonfadelli"],"tags":["clean code"],"date":"18 Sep 2018","description":"In this post my colleague Francesco Bonfadelli will show you how to transform a nested if structure into a chain of responsibility.","math":false,"image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/626d954a3593aaffa9ded37c914248aa/fe30d/ifremoval.jpg","srcSet":"/static/626d954a3593aaffa9ded37c914248aa/e1dbc/ifremoval.jpg 750w,\n/static/626d954a3593aaffa9ded37c914248aa/4cce6/ifremoval.jpg 1080w,\n/static/626d954a3593aaffa9ded37c914248aa/f8e90/ifremoval.jpg 1366w,\n/static/626d954a3593aaffa9ded37c914248aa/fe30d/ifremoval.jpg 1920w","sizes":"100vw"},"sources":[{"srcSet":"/static/626d954a3593aaffa9ded37c914248aa/24bb5/ifremoval.webp 750w,\n/static/626d954a3593aaffa9ded37c914248aa/97dd1/ifremoval.webp 1080w,\n/static/626d954a3593aaffa9ded37c914248aa/b148d/ifremoval.webp 1366w,\n/static/626d954a3593aaffa9ded37c914248aa/70abf/ifremoval.webp 1920w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5479166666666666}}}},"fields":{"slug":"/2018/09/18/refactoring-if-chain-of-responsibility/","readingTime":{"text":"26 min read"}}},"site":{"siteMetadata":{"author":"Fabrizio Duroni"}}},"pageContext":{"slug":"/2018/09/18/refactoring-if-chain-of-responsibility/"}},"staticQueryHashes":["3076394108","379746230","4028829600","630498219"]}