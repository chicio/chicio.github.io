{"componentChunkName":"component---src-templates-post-tsx","path":"/2018/03/20/golden-master-test-characterization-test-legacy-code/","result":{"data":{"markdownRemark":{"html":"<p><em>In this post I will talk about golden master test aka characterization test: what it is and how to use it.</em></p>\n<hr>\n<p>In the last few months the focus during my daily job was not only on mobile. I had the chance to work on some front-end\nand back-end application of <a href=\"https://lmgroup.lastminute.com/\" title=\"lastminute.com group\">lastminute.com group</a>. In\nparticular, I worked with my team to renew the customer area of all the main brands sites:\nvolagratis.com, <a href=\"https://www.it.lastminute.com/\" title=\"lastminute\">lastminute.com</a>\nand <a href=\"https://www.rumbo.es/\" title=\"rumbo\">rumbo.es</a>. During the last week I did pair programming\nwith <a href=\"https://www.linkedin.com/in/emanueleianni/\" title=\"Emanuele Ianni\">Emanuele Ianni</a>. Emanuele is a senior full-stack\nsoftware engineer and a true nerd <img class=\"emoji-icon\" alt=\"emoji-alien\" data-icon=\"emoji-alien\" style=\"display: inline; margin: 0; position: relative; width: 20px\" src=\"data:image/png;base64, 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\" title=\"emoji-alien\">/computer science lover <img class=\"emoji-icon\" alt=\"emoji-heart\" data-icon=\"emoji-heart\" style=\"display: inline; margin: 0; position: relative; width: 20px\" src=\"data:image/png;base64, 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\" title=\"emoji-heart\">. We needed to implement a new feature for a\nfamily of microservices (based on Java 1.8 and Spring Boot) that make up the back-end of the customer area, both for web\nand mobile apps of <a href=\"https://lmgroup.lastminute.com/\" title=\"lastminute.com group\">lastminute.com group</a>. Unfortunately, we\nfound some legacy code without tests, exactly where we planned to add the feature. At this moment Emanuele showed me the\nGolden master testing technique. So what is golden master testing? As always (and maybe you can expect it because you\nare a huge fan of my blog and you read all my previous posts <img class=\"emoji-icon\" alt=\"emoji-laughing\" data-icon=\"emoji-laughing\" style=\"display: inline; margin: 0; position: relative; width: 20px\" src=\"data:image/png;base64, \" title=\"emoji-laughing\">) Wikipedia gives us all the answer we need:</p>\n<blockquote>\n<p>In computer programming, a <strong>characterization test (also known as Golden Master Testing)</strong> is a means to describe (characterize) the actual behavior of an existing piece of software, and therefore protect existing behavior of legacy code against unintended changes via automated testing. This term was coined by <strong>Michael Feathers</strong>...... When  creating a characterization test, one must observe what outputs occur for a given set of inputs. Given an observation that the legacy code gives a certain output based on given inputs, then a test can be written that asserts that the output of the legacy code matches the observed result for the given inputs.</p>\n</blockquote>\n<p>So Golden master testing, mostly know as characterization test, is a technique by which we can be able to put large and\ncomplex legacy code under test: we generated some output given some input for a piece of code, and we write tests in\nwhich we assert that the output from the source code must be the same we received before. In this way we can start to\nrefactor a piece of code and be sure that our modifications didn't change the behaviour of the source code. Whoa!! No\nmore risky approaches to do refactoring without tests!!! <img class=\"emoji-icon\" alt=\"emoji-relieved\" data-icon=\"emoji-relieved\" style=\"display: inline; margin: 0; position: relative; width: 20px\" src=\"data:image/png;base64, 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\" title=\"emoji-relieved\"> <img class=\"emoji-icon\" alt=\"emoji-clap\" data-icon=\"emoji-clap\" style=\"display: inline; margin: 0; position: relative; width: 20px\" src=\"data:image/png;base64, \" title=\"emoji-clap\"><br>\nNow it's time for an example. In this article I will show you a simple example where I apply this technique to put under\ntest a piece of legacy code. You can find the entire source code\nin <a href=\"https://github.com/chicio/Golden-Master-Testing-Characterization-Test\" title=\"Golden Master Testing Characterization Test repo\">this github repository</a>\n.<br>\nSuppose for example that you found this class, <code class=\"language-text\">TravelsAdapter</code>, in the code you're working on.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TravelsAdapter</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Travel</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">adapt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonNode</span> jsonNode<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InvalidTravelException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Travel</span><span class=\"token punctuation\">></span></span> travels <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">JsonNode</span> payloadNode <span class=\"token operator\">=</span> jsonNode<span class=\"token punctuation\">.</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>payloadNode<span class=\"token punctuation\">.</span><span class=\"token function\">findValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orderId\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span>\n                <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBlank</span><span class=\"token punctuation\">(</span>payloadNode<span class=\"token punctuation\">.</span><span class=\"token function\">findValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orderId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">textValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidTravelException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid order id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">long</span> orderId <span class=\"token operator\">=</span> payloadNode<span class=\"token punctuation\">.</span><span class=\"token function\">findValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orderId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">asLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">JsonNode</span> flights <span class=\"token operator\">=</span> payloadNode<span class=\"token punctuation\">.</span><span class=\"token function\">withArray</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flights\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flights<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidTravelException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid json (no flights)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        flights<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEachRemaining</span><span class=\"token punctuation\">(</span>flight <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">ObjectNode</span> nodeFlight <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectNode</span><span class=\"token punctuation\">)</span> flight<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nodeFlight<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flightId\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBlank</span><span class=\"token punctuation\">(</span>nodeFlight<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flightId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">textValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidTravelException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid flightNumber value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InvalidTravelException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token class-name\">String</span> flightNumber <span class=\"token operator\">=</span> nodeFlight<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flightId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">textValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> arrivalAirport <span class=\"token operator\">=</span> nodeFlight<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"to\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">textValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> departureAirport <span class=\"token operator\">=</span> nodeFlight<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"from\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">textValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> airline <span class=\"token operator\">=</span> nodeFlight<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"airline\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">textValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            travels<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Travel</span><span class=\"token punctuation\">(</span>\n                            orderId<span class=\"token punctuation\">,</span>\n                            flight<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                            flightNumber<span class=\"token punctuation\">,</span>\n                            airline<span class=\"token punctuation\">,</span>\n                            departureAirport<span class=\"token punctuation\">,</span>\n                            arrivalAirport<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> travels<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It's really a mess. So we start to think \"I want to see the tests of this class to understand what it does\", but we\nsearch for them in the project and...there aren't any tests for this class!!! <img class=\"emoji-icon\" alt=\"emoji-fearful\" data-icon=\"emoji-fearful\" style=\"display: inline; margin: 0; position: relative; width: 20px\" src=\"data:image/png;base64, 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\" title=\"emoji-fearful\">. The logic contained in this\nclass seems a little bit twisted, and also it would take a lot of time to write a complete suite of test case because we\nneed to understand from the beginning every single path contained in this class. This is a case where golden master\ntesting could help us.<br>\nThe first thing we can do is to observe the method returns a list of <code class=\"language-text\">Travel</code> objects. To write our golden master tests\nwe need to find a way to do a comparison between the <code class=\"language-text\">Travel</code> objects returned from the <code class=\"language-text\">adapt</code> method and the one we\nexpect. To do this we can add for example a <code class=\"language-text\">toString</code> method the <code class=\"language-text\">Travel</code> class and test the returned value from it. So\nthe <code class=\"language-text\">Travel</code> class will be the following one.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Travel</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> orderId<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> flights<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> flightId<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> airline<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> departureAirport<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> arrivalAirport<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Travel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> orderId<span class=\"token punctuation\">,</span>\n           <span class=\"token class-name\">String</span> flights<span class=\"token punctuation\">,</span>\n           <span class=\"token class-name\">String</span> flightId<span class=\"token punctuation\">,</span>\n           <span class=\"token class-name\">String</span> airline<span class=\"token punctuation\">,</span>\n           <span class=\"token class-name\">String</span> departureAirport<span class=\"token punctuation\">,</span>\n           <span class=\"token class-name\">String</span> arrivalAirport<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>orderId <span class=\"token operator\">=</span> orderId<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>flights <span class=\"token operator\">=</span> flights<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>flightId <span class=\"token operator\">=</span> flightId<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>airline <span class=\"token operator\">=</span> airline<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>departureAirport <span class=\"token operator\">=</span> departureAirport<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>arrivalAirport <span class=\"token operator\">=</span> arrivalAirport<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Travel{\"</span> <span class=\"token operator\">+</span>\n                    <span class=\"token string\">\"orderId=\"</span> <span class=\"token operator\">+</span> orderId <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">+</span>\n                    <span class=\"token string\">\"flights='\"</span> <span class=\"token operator\">+</span> flights <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">+</span>\n                    <span class=\"token string\">\"flightId='\"</span> <span class=\"token operator\">+</span> flightId <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">+</span>\n                    <span class=\"token string\">\"airline='\"</span> <span class=\"token operator\">+</span> airline <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">+</span>\n                    <span class=\"token string\">\"departureAirport='\"</span> <span class=\"token operator\">+</span> departureAirport <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">+</span>\n                    <span class=\"token string\">\"arrivalAirport='\"</span> <span class=\"token operator\">+</span> arrivalAirport <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span>\n                <span class=\"token char\">'}'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we can write some tests and use the output as the expectation. In this way we will be sure that if we start to do\nsome refactoring operation on this class our modification didn't broken any behaviour of the class. So we can do our\nrefactoring with an high level of confidence that everything is working as it was working before our modification :\nrelieved:. To get the output for the test, you can write your test and made them fails, and in the meanwhile log the\nresult so that we can copy it and use it in the next run iteration of our test. The following test is the one we\ngenerated for the class we saw before.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TravelsAdapterTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">goldenMaster</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvalidTravelException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">TravelsAdapter</span> travelsAdapter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TravelsAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Travel</span><span class=\"token punctuation\">></span></span> travels <span class=\"token operator\">=</span> travelsAdapter<span class=\"token punctuation\">.</span><span class=\"token function\">adapt</span><span class=\"token punctuation\">(</span><span class=\"token function\">generateRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">StringBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        travels<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>bp <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            builder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>bp<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            builder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>\n                builder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Travel{\"</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">\"orderId=0, \"</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">\"flights='{\"</span> <span class=\"token operator\">+</span>\n                                <span class=\"token string\">\"\\\"from\\\":\\\"MXP\\\",\"</span> <span class=\"token operator\">+</span>\n                                <span class=\"token string\">\"\\\"to\\\":\\\"FCO\\\",\"</span> <span class=\"token operator\">+</span>\n                                <span class=\"token string\">\"\\\"flightId\\\":\\\"1111\\\",\"</span> <span class=\"token operator\">+</span>\n                                <span class=\"token string\">\"\\\"direction\\\":\\\"OUTBOUND\\\",\"</span> <span class=\"token operator\">+</span>\n                                <span class=\"token string\">\"\\\"airline\\\":\\\"U2\\\",\"</span> <span class=\"token operator\">+</span>\n                                <span class=\"token string\">\"\\\"departure\\\":\\\"2018-04-20T12:00:00\\\",\"</span> <span class=\"token operator\">+</span>\n                                <span class=\"token string\">\"\\\"boardingCard\\\":{\"</span> <span class=\"token operator\">+</span>\n                                    <span class=\"token string\">\"\\\"id\\\":\\\"485\\\",\"</span> <span class=\"token operator\">+</span>\n                                    <span class=\"token string\">\"\\\"firstName\\\":\\\"Fabrizio\\\",\"</span> <span class=\"token operator\">+</span>\n                                    <span class=\"token string\">\"\\\"lastName\\\":\\\" Duroni\\\",\"</span> <span class=\"token operator\">+</span>\n                                    <span class=\"token string\">\"\\\"seat\\\":\\\"V23\\\",\"</span> <span class=\"token operator\">+</span>\n                                    <span class=\"token string\">\"\\\"urls\\\":[\"</span> <span class=\"token operator\">+</span>\n                                        <span class=\"token string\">\"\\\"http://aboardingcard/resource1\\\",\"</span> <span class=\"token operator\">+</span>\n                                        <span class=\"token string\">\"\\\"http://aboardingcard/resource2\\\",\"</span> <span class=\"token operator\">+</span>\n                                        <span class=\"token string\">\"\\\"http://aboardingcard/resource3\\\"\"</span> <span class=\"token operator\">+</span>\n                                <span class=\"token string\">\"]}}', \"</span> <span class=\"token operator\">+</span>\n                                <span class=\"token string\">\"flightId='1111', \"</span> <span class=\"token operator\">+</span>\n                                <span class=\"token string\">\"airline='U2', \"</span> <span class=\"token operator\">+</span>\n                                <span class=\"token string\">\"departureAirport='MXP', \"</span> <span class=\"token operator\">+</span>\n                                <span class=\"token string\">\"arrivalAirport='FCO'\"</span> <span class=\"token operator\">+</span>\n                          <span class=\"token string\">\"}\\n\"</span> <span class=\"token operator\">+</span>\n                        <span class=\"token string\">\"Travel{\"</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">\"orderId=0, \"</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">\"flights='{\"</span> <span class=\"token operator\">+</span>\n                                <span class=\"token string\">\"\\\"from\\\":\\\"FCO\\\",\"</span> <span class=\"token operator\">+</span>\n                                <span class=\"token string\">\"\\\"to\\\":\\\"MXP\\\",\"</span> <span class=\"token operator\">+</span>\n                                <span class=\"token string\">\"\\\"flightId\\\":\\\"1112\\\",\"</span> <span class=\"token operator\">+</span>\n                                <span class=\"token string\">\"\\\"direction\\\":\\\"RETURN\\\",\"</span> <span class=\"token operator\">+</span>\n                                <span class=\"token string\">\"\\\"airline\\\":\\\"AA\\\",\"</span> <span class=\"token operator\">+</span>\n                                <span class=\"token string\">\"\\\"departure\\\":\\\"2018-05-01T10:00:00\\\",\"</span> <span class=\"token operator\">+</span>\n                                <span class=\"token string\">\"\\\"boardingCard\\\":{\"</span> <span class=\"token operator\">+</span>\n                                    <span class=\"token string\">\"\\\"id\\\":\\\"486\\\",\"</span> <span class=\"token operator\">+</span>\n                                    <span class=\"token string\">\"\\\"firstName\\\":\\\"Chiara\\\",\"</span> <span class=\"token operator\">+</span>\n                                    <span class=\"token string\">\"\\\"lastName\\\":\\\"Polito\\\",\"</span> <span class=\"token operator\">+</span>\n                                    <span class=\"token string\">\"\\\"seat\\\":\\\"A15\\\",\"</span> <span class=\"token operator\">+</span>\n                                    <span class=\"token string\">\"\\\"urls\\\":[\"</span> <span class=\"token operator\">+</span>\n                                        <span class=\"token string\">\"\\\"http://aboardingcard/resource1\\\",\"</span> <span class=\"token operator\">+</span>\n                                        <span class=\"token string\">\"\\\"http://aboardingcard/resource2\\\",\"</span> <span class=\"token operator\">+</span>\n                                        <span class=\"token string\">\"\\\"http://aboardingcard/resource3\\\"\"</span> <span class=\"token operator\">+</span>\n                                    <span class=\"token string\">\"]}}', \"</span> <span class=\"token operator\">+</span>\n                                    <span class=\"token string\">\"flightId='1112', \"</span> <span class=\"token operator\">+</span>\n                                    <span class=\"token string\">\"airline='AA', \"</span> <span class=\"token operator\">+</span>\n                                    <span class=\"token string\">\"departureAirport='FCO', \"</span> <span class=\"token operator\">+</span>\n                                    <span class=\"token string\">\"arrivalAirport='MXP'\"</span> <span class=\"token operator\">+</span>\n                        <span class=\"token string\">\"}\\n\"</span>\n                <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">JsonNode</span> <span class=\"token function\">generateRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readTree</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"{\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"  \\\"data\\\": {\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"    \\\"orderId\\\": \\\"73hb6yh3be6ebe63bdy6\\\",\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"    \\\"flights\\\": [\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"      {\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"        \\\"from\\\": \\\"MXP\\\",\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"        \\\"to\\\": \\\"FCO\\\",\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"        \\\"flightId\\\": \\\"1111\\\",\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"        \\\"direction\\\": \\\"OUTBOUND\\\",\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"        \\\"airline\\\": \\\"U2\\\",\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"        \\\"departure\\\": \\\"2018-04-20T12:00:00\\\",\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"        \\\"boardingCard\\\": {\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"            \\\"id\\\": \\\"485\\\",\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"            \\\"firstName\\\": \\\"Fabrizio\\\",\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"            \\\"lastName\\\": \\\" Duroni\\\",\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"            \\\"seat\\\": \\\"V23\\\",\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"            \\\"urls\\\": [\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"              \\\"http://aboardingcard/resource1\\\",\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"              \\\"http://aboardingcard/resource2\\\",\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"              \\\"http://aboardingcard/resource3\\\"\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"            ]\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"        }\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"      },\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"      {\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"        \\\"from\\\": \\\"FCO\\\",\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"        \\\"to\\\": \\\"MXP\\\",\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"        \\\"flightId\\\": \\\"1112\\\",\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"        \\\"direction\\\": \\\"RETURN\\\",\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"        \\\"airline\\\": \\\"AA\\\",\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"        \\\"departure\\\": \\\"2018-05-01T10:00:00\\\",\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"        \\\"boardingCard\\\": {\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"            \\\"id\\\": \\\"486\\\",\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"            \\\"firstName\\\": \\\"Chiara\\\",\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"            \\\"lastName\\\": \\\"Polito\\\",\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"            \\\"seat\\\": \\\"A15\\\",\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"            \\\"urls\\\": [\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"              \\\"http://aboardingcard/resource1\\\",\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"              \\\"http://aboardingcard/resource2\\\",\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"              \\\"http://aboardingcard/resource3\\\"\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"            ]\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"        }\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"      }\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"    ]\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"  }\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"}\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this example we generated just one test case, but usually a lot more of them. Basically we can apply a technique\nnamed <strong>\"property testing\"</strong>: a lot of random input are generated so that there will be an high probability to execute\nall the possible branch in our source code (and in this way have a higher test coverage). So we put our <code class=\"language-text\">TravelsAdapter</code>\nunder test and we can now start to work on this class without any kind of risk <img class=\"emoji-icon\" alt=\"emoji-relieved\" data-icon=\"emoji-relieved\" style=\"display: inline; margin: 0; position: relative; width: 20px\" src=\"data:image/png;base64, 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\" title=\"emoji-relieved\">. Now it's time to test this\ntechnique in your legacy code <img class=\"emoji-icon\" alt=\"emoji-grin\" data-icon=\"emoji-grin\" style=\"display: inline; margin: 0; position: relative; width: 20px\" src=\"data:image/png;base64, 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\" title=\"emoji-grin\">.</p>","frontmatter":{"title":"Golden master testing aka Characterization test: a powerful tool to win your fight against legacy code","comments":true,"authors":["fabrizio_duroni","emanuele_ianni"],"tags":["test driven development","agile","clean code"],"date":"20 Mar 2018","description":"In this post I will talk about golden master test aka characterization test: what it is and how to use it.","math":false,"image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080808","images":{"fallback":{"src":"/static/9d9a7b2ecd184aab09c000b49a81c294/b26e1/golden-master.jpg","srcSet":"/static/9d9a7b2ecd184aab09c000b49a81c294/9cf0f/golden-master.jpg 750w,\n/static/9d9a7b2ecd184aab09c000b49a81c294/b26e1/golden-master.jpg 981w","sizes":"100vw"},"sources":[{"srcSet":"/static/9d9a7b2ecd184aab09c000b49a81c294/7ed49/golden-master.webp 750w,\n/static/9d9a7b2ecd184aab09c000b49a81c294/e2aa4/golden-master.webp 981w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5321100917431192}}}},"fields":{"slug":"/2018/03/20/golden-master-test-characterization-test-legacy-code/","readingTime":{"text":"8 min read"}}},"site":{"siteMetadata":{"author":"Fabrizio Duroni"}}},"pageContext":{"slug":"/2018/03/20/golden-master-test-characterization-test-legacy-code/"}},"staticQueryHashes":["3076394108","379746230","4028829600","630498219"]}