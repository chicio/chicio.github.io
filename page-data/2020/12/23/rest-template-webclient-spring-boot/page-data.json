{"componentChunkName":"component---src-templates-post-tsx","path":"/2020/12/23/rest-template-webclient-spring-boot/","result":{"data":{"markdownRemark":{"html":"<p><em>During the last months I worked a lot with Spring Boot backend applications. In this post I explain how you can consume\na REST api from a Spring Boot application using RestTemplate and (the new) WebClient.</em></p>\n<hr>\n<p>In the last few months I started to work as a backend developer during my daily job (and (for now) I\ndo <a href=\"https://github.com/chicio/ID3TagEditor\" title=\"ID3TagEditor\">mobile/web frontend development only in my spare time</a>). The\nbackend applications I'm working on use Spring Boot as application framework. Let's start from a definition of what are\nSpring and Spring Boot:</p>\n<blockquote>\n<p>The Spring Framework is an application framework and inversion of control container for the Java platform. The framework's core features can be used by any Java application, but there are extensions for building web applications on top of the Java EE (Enterprise Edition) platform. Although the framework does not impose any specific programming model, it has become popular in the Java community as an addition to the Enterprise JavaBeans (EJB) model. The Spring Framework is open source.</p>\n</blockquote>\n<blockquote>\n<p>Spring Boot is Spring's convention-over-configuration solution for creating stand-alone, production-grade Spring-based Applications that you can \"just run\".[22] It is preconfigured with the Spring team's \"opinionated view\" of the best configuration and use of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need very little Spring configuration.</p>\n</blockquote>\n<p>So as you can understand from the definition above these frameworks speed up the development by giving some production\nready tools/configurations/setup out of the box. As you read from the descriptions above these are frameworks from the\nJava world. In fact all the code I wrote is in one of these two languages: Java and Kotlin. In particular, all the new\nstuff I developed in the last month has been written in Kotlin. For those who don't know, Kotlin is</p>\n<blockquote>\n<p>...is a cross-platform, statically typed, general-purpose programming language with type inference made by JetBrains. Kotlin is designed to interoperate fully with Java, and the JVM version of Kotlin's standard library depends on the Java Class Library,[3] but type inference allows its syntax to be more concise...</p>\n</blockquote>\n<p>If you ever developed something in Swift, with Kotlin you will feel at home <img class=\"emoji-icon\" alt=\"emoji-heart_eyes\" data-icon=\"emoji-heart_eyes\" style=\"display: inline; margin: 0; position: relative; width: 20px\" src=\"data:image/png;base64, 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\" title=\"emoji-heart_eyes\"> (we will talk about this topic\nin another post <img class=\"emoji-icon\" alt=\"emoji-smirk\" data-icon=\"emoji-smirk\" style=\"display: inline; margin: 0; position: relative; width: 20px\" src=\"data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAUKElEQVR4Ae2bBZAcR7auv5NZ1dXd09MDYskCy5KZ2V5m3jAs7969zMzMzMx87/LG3mU2s7Uys62xmIebuyrzvKnpjFBHh6Qw2/e9l6E/MntmuvJ8/zmVlVXq5v+3/9/+f/t/ugnPc/sNMB/6EBsj5SwMZ4iwSWClsTKKUg5RNL3TWYUDqmzD81AmPPCRj/Ak4J9XA37j+YGW7d/GxSq8M7a80cRyuo1N2RQMpiCIEbAD3jtFveK7uTwu9U2f6sOp4xuifOHE/2YLoC/pCtj6DspLRnmPsXxXoWheZkvGmLLFJDm4IsYjVhckIANTq6Iul6De4LuC73h80+Fa3nfb/lbv+LepWT4FNJ8zAxaCftatViPasJYPRbH8dKFkzrTDEWbIYIuKiT2SFDClUWx1NQwtR8orkUIFMQUA1HfRbh1tHoDGIdz8PnxrFu108anBtQXf8LhaRrflH8xS/dMdu/kIkD1rA65/Nc+qrV7NxcWY3ytW7OuikYioapHEYYoR0ehazMrzMCsuQCqbkOI4RGUQC0JfRQsooA6yJtqeRuvb8Afvwh+4h2x2N76doR1LNu/I5jLadXdtO+WXgC3PyoDHPsAzaqd8DHnyg/xUsSy/WRiLh+xoTFT2mHJEtOIs7Po3YpZdDKXxAJcBHjRAC6AcZSyAAYlAgNY0/vAW3M5vkB18AN/MyJoGN5vSnUkb7ab++saP8meAvlBrgGx9N9VlJf6mOGw/FC8tEI1YbMkRLT8Zu+lqzPJLISqCdkEdIoZn0lR9qJYCZG38oTtw2z5DduhxXMuSzTnSyS7tmvvI4RY/cuGnmQf0+TRA7n4nq8bH+Wh5JHp1vKJANCxElYX+pDdhNlyNJKPg2wiAyDObTRl0AgUwRbQzi9+xYMLE18nqXbKakh7s0pzLbpie5oPnf4H9gD73BgT4peN8rrgkvihZlmCHIRobIzrt/ZgVrwBNETyIPLfXGO03woDE+IM3kz3ycbKZGVwNOoc7tKfSb01Oc8XTMcE+VfivvYmx9cv59AL85cnKBDsixEuWEp/1vZil5yK+gWgGONCsJ0L/XAm3OIdoG6msx4ysRxqPobQwBYt4XVPAX/SmFXz+IxO0eQoteopVYk5dyV8Vx6JXJssTbNUQj40SnfZtmOoGSGdATP9i9rxUQP9rcS1kYe7o9G+DR/4TZJbEJ+D1ladq9lfAtwMe0GdeAQH+8Q/xU5VR+9OFlckCeEQ8nBBtugIZPWUx8+AHM/78Cwe+Bck4pjiM1B8Ho2AE0/Vnf9/JWv/r+7njma8BAf62d3PBhjG5rrimOFRYlhBVIVr7csya1/eARRAA4YVtCgqgCkT4vdeQ7b6FbB66+Xqwt93YMaOvvfzT3HW8SrDHg/+2FRSvOJP/LC8rbM7h46rFjq/Crn5tz23NEDJQ98JmP0g0DeMUKS6Dzh7ENXpJcVoopu6UqX188v4G7umeAgawn7qCD1RH7Y8VViREowl2yGJXXoKUl4PvIAwsevoimeBTMBZZEM2dgAFVpO3XX7RKJ/7mAR4ANNdTMUAA+4sXM/Ky1fJvxRWFpfGShKhisSPLMEvOARxC2pf5F1dCzwSJStA50NtOq6BOoeFOLcZ89Ja9dI9mQHSs7L9/E1cnVXtKVI0wpQUlBqmsAVHEN0GEl1ITVVSixRhNc2ox5jz2pJqd8v5N2dW/v4X/DAa44xkguS4ZJxkuyndHVYsZirBFgyQJUhxBfAvw4S/Dfb0JZmQevPK8NiMQGQDwCk5Bc4GQQh5jkmDTDn6od3M2PO+++5Jx/cSd07jAqMczwP7BKzm/VJYLbSXCFC2mYJBCCTERuBbEsiCDa6QcPNxgvtYljgwrlw8xNF6E1IN7jo2wvTkb020OHGqQZp7qcIEVy4awQ3FvzlTzGBdjNYV0MfacoVROL/yDV+r5r/kctwP+eAYYwK6omHfGFbv4MMMWLBIZiBIQB0Vlcn+dr1+/iy337GfycJ1OJ8MYoVItcsn5a3jflSczMpr0gnouWmyYm+3wic8+zp1376U+38Z7JUkili6rcPF5q3jTa9axdFUF2j6PNY95MXZXtuQsKyq8E/wWwAH+aIugANHGMZLvPpvfLC6NV8ajhUV3TdFgSlUoDvG1b0zwJ397F1vu3Ee71mKoANVKTBJBfbbF1runuOehA1x63hLKZcD3L1juKSo7IuOYnGzwy797GzffvI9Yu4xUIiqlCMkyJg81uPu+Q9y8ZQ+lGDadNIxkDVhQ71Ae13G4Rlb64nb+e6bdbwBEg9f+X7+AjUlRTrElixQsJjZIZME4/u0jD/Hpz04wNmx41RtP4pzLNnHChnHKpQLOeQ4fqnP/1l1ce80EW++f5M2vWwFpBqqAD70eeY32Tw0igID0vS5Ei8eaahne/V0XcPaF61i2vIK1hmary54d09x3+zbuvW07f/l397Fvf53vurKCRHnsusiQs+RMv36Bbvz2a3ikfx2QgUti8borufrMjdF/ltaXiJcUiasFzEjCp75a458+dpjzL1zGB374Us49Ywl0G9BsQZaBCBQLUCoy30yJpg9Qbs2BelAXwPuh9RibUgExobcghmZphGx8JdVyDK02tLugClEE5RIUhrj3oSk+9rd3cPfWw3zfB5bxnrcM4+c6pPNd0qk2rZ0tHnwy+/bXfpbPAG3AHbUCRkvmdJsIEgtizeJC8ugTHf7jM4d55RtX8xO/cClV34BtD4F3ATADn/Z6HNWCAQ9kfuByOTA+5h43C8MUVCm3WrD/AHQ9YEEiMHGvFwPGcu7acTb+0Sv4iz+4YyHWfZy9qcCp6yzSMIssOVPOBv6z/ZMboH9skkhPksj04CNBMXzkS7OcePoIP/1zJ1CdfgJ274SsDi5XDXwTSEG0F1AXcCGDmD7JU5Q5IrHgBLqEO04F0t6crtaLIa0vxpTHlseYx5rHrPQYcpacKWcjHHjQAAmysbCcSMAKUWTYczBj+7Tykz+xjqHZOZirA11wnVDaDAI8P5skGZhDcwHege8A3cXYhmbmFmPNY957MFtkwApEwiIbWECCGDwFYhsxKjZACHRE+M7vW8umUQeHu2ANoCGIwfrJJUeWGKfgeQ6aAtJXSNK3EQJ8+Atj0Lkum5bZxZjbNAOqkDPlbEAMyDGvAkYoigEB0kw5cXXMphGLTrZABFSBnkSAWMAIruWZnHFMzmakDspFw9qVEaWqga6CPpsNkECq1OcdB6cd9abHCCwdi1i1PAILZIpqDzaP9fWnlcjmYtLpDAHEQM4GmKMZIKE3i4wcCdi0MzRr0ju2BnZFEgEPjz3R4dZ7Wzy0rcPh6Yw0VbQXCZVhyxWvrfD2BeGObwIykHAjUBDmp1PueKDD1vtb7NjbpdH0OA8EqFM3JnzvVaOsXhHh074JJpsY53EAgIaEDSxGGg1ck4zztHGg4fLlvSBq+wsRSWDbkyn//aUa9z/aQbxntGxYUhGSYUFEyDzMNhz//KkZymV47StKaEeRp1LsMWQZfPbLTb58XZ3p6YyhgjA+bFhTFawFVWinyoMPt/izuuO3fngJpYLg/REadQ7VBXkPDnK2YIAGEQ3mIfPMq/eoyxYkoMEMAUEQC9+4qcWff7ROMRFO2hSzZMxC6mkddgwlEEegwEhJiARu2tpYMMAg9jhVIKEzwmzN87t/W+fuh1NOXBtx3vklhkpCa8ohbbc4FgOZEyqJYcfBlMd2tjjvtALaBVSDAx5cGlg8OdvxbocVoJMxueiYd6ga1BsEDyH97a7SHRN+9nfHOW1zRLUCsRWcVe66qc11/9WgGMuiCdbAcCKoKmq6BAOO3ywcbigXvy3hO39hmDUrLMUYxArTc8r//HWNuR0p1aqhYMF7pRQJHRxIF1Qg0KjXBbnA4hfZjnU3qEHMdWXn6lRRp+B92OQIGgonB3v7yw3YFGptmA1vjeDll0bs3xFx99dSRoeFNMsNg9e/3iKlLjSPs//xQEje5pMMm883vV3mjEIKeFg5anjHt0X8yx9kpNNKMYGZeeWEkyJOPV3QNAMEwnHQHoNmiqa6yAbKsU4BBbKd837ilK7FO8V7j1GDoEf2J3jcobCft4BRMCCpYg5kvPNdltISy2N3KqUivO4NhsvO9TDpIBKO2UzfmdDOoNW/aw5Q07B23PJtPx9zzecc9Unl7Msj3vjWmNFWhu8oYgz44KmSM/RYupCzAe5Yt8MeyG7dz5Ov2+zbpL6ozqDeAxK25wriQbU3tqEPv1OFZDbj7W81vPkdgjUgHQeTPvzNU3323weuHJEBnfVsGjNs+klL1xkKCOzt4hsKtu9+woH6UMmLd4S+nbMR6ulYBqT/9RB7fuoiJoodPUOzUEIYBBCrAb4nXZBI2BMQTHAgezKiuD+7CvI0DJABAzyhl94cU4pMOQoiaLYg3/dUCiX868We6mJl1FtM5GyDBpiBEDqNlPTgvNyhHUVTwAdxlG26HF2YELgANrwWecrbf2Tg74tAJAj0JIHT9b1XBtT/vLal5Ew5G9AB9FgGpEDrmt3+lqypXtuK6xI2MSEmc3RhFEKPVTBBEmRyEaTHED31vz9Rbr5NeXxCoXDkdGMQPIwF0LANdxnkDFlbfc4EtID0WAYAeKD5Z9/i0ek5fdA1Pdr1+FTBAzKQHSMhaAk61s8Gsy1H12BFFGBqWvj1PzN89psCiQSDjjKfCBKOgQOfKdrxuJYnZ8mZgGZg5HgGtOZTWvfu089p3aPtI5ch9YSJWFDe9wOHsT3KzwIQNsgM6hinQkn45vWCdATvBQjwFrAhhtCLAAj4vv+r6Sha8+QsORPkOr4BGv5o/pdv4ca5ab/D1XouatdDJqB9VWCC7EAvEPqerPRn7djqXy+GhG0PCtd807B6TBge6j+GDByzJwXUSa9qW5489rkZvyNnAeYDmx7PAIAMqE3MUbt9t/6Xm/H4huLD2YMPVGZAkYAlKB/3g/dnV46tSKAEVODh++Bv/sZQVKGSCCtXAXHfcaMjBkguBPECKfg2uLriZj05Q84Ci8qeyv8MKVAHZn/wWm68Y5W/e9WwO1/KgimBiQ1YQWyAOtpDH/pLWoG+akCB/qwHeXANmHhEuOE6YcstwpAVlgwLM3Vl82kS9h6hQlSAMPaC5sognPdkc46Dk/7unAGYDUz6VAwA6ACzc21G/vFe/dufr7q/lZIpSiLEkcdYAxGICJgBEwiQJmTTDnirAil0mjBfg6lJ2LELtm8TJp6AQ/sE64VlI1AuCLV5Zd0ZwmlnA12OGOCDCU7QcEn0bU/aULI5T3vatfPYFxjmgdnAxFM1QMM5M/UXW5l49Vr511eW3A/bRPCxQSIPkfRMUAEGV3oh7Sr33q0cOixkqdJqQa0mzM7A3Gw+hvk5aDUEsh5XKRZGClAwECFEQ3DmxYa3v18oiIf+rNOT+vDstB1O1TmPm3LcuV3+9S+26gQwFVj06RhA8HsaKF/xWf/5bw3L5k1x9kbiCMRgjGCiEI8R8CHbChRg+4Ty87+idGtQiiCyYI0Q53ARFGJICjCaCIUKDFVhZFxYshpO2CysP1k4YYNQrQJzDhocAfe5Qsl3wbfA15R01tM9nDGx23/jis/q54HJwNB9pp8Ss8ByYM2p46z/3NXyKyvW2XPjlZZ43GDHDKYskCgSA5FC2Bq7xPDYfmHPLqVd722ovAMbKXFBKBSgNASVKowuheFhqCwoKQFOoQs0FDqAD1nXMF5c6YGu4Ju9xS6dXtBBx8Fd7t4rPqO/8+g0O4G9wCHAPVMDAErAMmDty9ey7l/fJr+6fI09LV7VM8FUBVMySALEikR9u8FK3zpgCE0DSN9DzSyXQhrGHiAAh74/66SCdsC3fJ75HvwBx6G97pHv/rL+9i272QXsBg4DrWf3Mbm+kHbNI/ce5J5XL9WNQ0ZXYXpBiRICFQAklCrtkMU6MK9QU5gH6rkUGiG8bg8KF45B6NX0emcgZF1z+CZoPV/plWzGk+7P2LfL3/O9X9E/uGUPe4EDofwbz9XnBLuA5lowQb85wV2vXcFoVfQkUVAF8Qp5r4JqnzEiA8UWyplB9cH7HjBeetnO1e0Z6huKzvfg3VQv89t2+G+++/P6VwvJ2dcHPwfwXBkA4WwEdLqD/NN93HfxUplbYd1ZJiPqQdODCGYABFOOuoIjA+AalPWkWVjhO6AtxdfB5fAzSnrI0TyQtW9+jH9+wyf0o9MtJoGDoexnAZ5rAwgmuGCE+dQjuiftsPXkkq4oe12l4TfqCBkk/LWgrg/QA0oYh9cZ4AJ4NxdoW9EmPfCax8150ilPdtCxb7e/+y9u0z/+6et0CzAV4EPm0ef10+LAMLAkaKxkGf7bN3P5q0+Uq0aXmhPtiMEO964QUhJsASgIEgMWpP8miRCuVzQYpinQUVw3ZL6puHrPgNlJv/2G7fo/P/w1bms5asAMMBVUA/SF+spMBRgBxoBRoLqmQuV3Xs2Fl62VNy0Zk7OiipHcBFs2SCJIASTs53MZAwA+gKPhDq7b613TL8Jnda9T0/rA7Xv0679yA1v31qkDYYfHTMh6/cX4zlASqqEaTBgOxkQ/cSEnvm2zufDEMb2wMsyGQskkJhGIBYnARP0VEO7fMyA8wuq2fKdeY8f2Gdn65Sf81r/YynYgC6C1AD8fxp0X80tTBigF+CDKwBCQWDDvOJnlr1zLmlOWmLVLy7q6HDOeRFRiSwKQOjqdjHozZXqyKfsem/K7b9rN3i8+ziEHPgA2gGYADqIF+JfKt8aiYMRQUDm8LgKFIBvk+3qCiY7QB3WD2kArwDeCWkD2Uv3iZAQkQDGoBBQGTDCh728O8P3wQS2gHdQBsv8t3xwVIB5QFPpgQP8qQDCANECmA9LnJ8gXrg0+ORicWwEfFMx4/tv/Aag0Qj8pxPCgAAAAAElFTkSuQmCC\" title=\"emoji-smirk\">).<br>\nAs a consequence of the fact that we live in the <a href=\"https://microservices.io\" title=\"microservices\">\"Microservices era\"</a>, one of\nthe most common operation that I do in my code is consume a REST api of one microservice from another one. How can you\ndo that in a Spring Boot application? There are two main component that we can use: RestTemplate and WebClient. Let's\nsee how they works by developing a small Spring Boot application that call an external service and will return the\nresult of this call through an endpoint.</p>\n<h4>The application</h4>\n<p>The application I create is very simple. It (obviously) use Spring Boot as application framework, Gradle as build system\nand Kotlin as main language (I'm using also Kotlin DSL instead of Groovy for the gradle file depedencies definition).\nThe application contains a single controller called <code class=\"language-text\">SpringBootRestClientsCheatsheetsApi</code> that exposes two simple api:</p>\n<ul>\n<li><code class=\"language-text\">&quot;/clients/rest-template/command/{restTemplateCommand}&quot;</code></li>\n<li><code class=\"language-text\">&quot;/clients/webclient/command/{webClientCommand}&quot;</code></li>\n</ul>\n<p>These two api internally invoke various endpoint of an external \"Tattoo archive\" fake API: the first one\nusing <code class=\"language-text\">RestTemplateService</code>, a class that use <code class=\"language-text\">RestTemplate</code> as REST client, the second one using <code class=\"language-text\">WebClientService</code>, a\nclass that uses <code class=\"language-text\">WebClient</code> as REST client. Let's see some code starting from the gradle file. In it you can see all the\nSpring Boot dependencies. In particular I'm using the new <code class=\"language-text\">spring-boot-starter-webflux</code> that contains both client,\nbecause as we will see later <code class=\"language-text\">WebClient</code> as been recently added to the framework (starting from the new Spring 5.0\nReactive).</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>jetbrains<span class=\"token punctuation\">.</span>kotlin<span class=\"token punctuation\">.</span>gradle<span class=\"token punctuation\">.</span>tasks<span class=\"token punctuation\">.</span>KotlinCompile\n\nplugins <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"org.springframework.boot\"</span><span class=\"token punctuation\">)</span> version <span class=\"token string\">\"2.4.1\"</span>\n\t<span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"io.spring.dependency-management\"</span><span class=\"token punctuation\">)</span> version <span class=\"token string\">\"1.0.10.RELEASE\"</span>\n\t<span class=\"token function\">kotlin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jvm\"</span><span class=\"token punctuation\">)</span> version <span class=\"token string\">\"1.4.21\"</span>\n\t<span class=\"token function\">kotlin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"plugin.spring\"</span><span class=\"token punctuation\">)</span> version <span class=\"token string\">\"1.4.21\"</span>\n<span class=\"token punctuation\">}</span>\n\ngroup <span class=\"token operator\">=</span> <span class=\"token string\">\"it.chicio\"</span>\nversion <span class=\"token operator\">=</span> <span class=\"token string\">\"0.0.1-SNAPSHOT\"</span>\njava<span class=\"token punctuation\">.</span>sourceCompatibility <span class=\"token operator\">=</span> JavaVersion<span class=\"token punctuation\">.</span>VERSION_11\n\nrepositories <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">mavenCentral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\ndependencies <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">implementation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"org.springframework.boot:spring-boot-starter-webflux\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">implementation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"org.jetbrains.kotlin:kotlin-reflect\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">implementation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"org.jetbrains.kotlin:kotlin-stdlib-jdk8\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">implementation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"org.springframework.boot:spring-boot-starter-web\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">implementation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"org.springframework.boot:spring-boot-starter-actuator\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">implementation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.fasterxml.jackson.module:jackson-module-kotlin:2.11.+\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">testImplementation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"org.springframework.boot:spring-boot-starter-test\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\ntasks<span class=\"token punctuation\">.</span>withType<span class=\"token operator\">&lt;</span>KotlinCompile<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\tkotlinOptions <span class=\"token punctuation\">{</span>\n\t\tfreeCompilerArgs <span class=\"token operator\">=</span> <span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-Xjsr305=strict\"</span><span class=\"token punctuation\">)</span>\n\t\tjvmTarget <span class=\"token operator\">=</span> <span class=\"token string\">\"11\"</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\ntasks<span class=\"token punctuation\">.</span>withType<span class=\"token operator\">&lt;</span>Test<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">useJUnitPlatform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now let's see the <code class=\"language-text\">SpringBootRestClientsCheatsheetsApi</code> controller. It is a standard <code class=\"language-text\">RestController</code>. As you can see\nthe two services classes are passed as dependecies at construction time using Spring Dependency Injection. The methods\nparse the request command received and based on its value they call one of the external fake endpoints using one of the\nservice classes.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@RestController</span>\n<span class=\"token annotation builtin\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"clients\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token function\">SpringBootRestClientsCheatsheetsApi</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> restTemplateService<span class=\"token operator\">:</span> RestTemplateService<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> webClientService<span class=\"token operator\">:</span> WebClientService\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation builtin\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/rest-template/command/{restTemplateCommand}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">commandRestTemplate</span><span class=\"token punctuation\">(</span>\n        <span class=\"token annotation builtin\">@PathVariable</span> restTemplateCommand<span class=\"token operator\">:</span> RestTemplateCommand\n    <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ResponseEntity<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> <span class=\"token operator\">=</span> ResponseEntity<span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span>restTemplateCommand<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        RestTemplateCommand<span class=\"token punctuation\">.</span>GetForEntity <span class=\"token operator\">-></span> restTemplateService<span class=\"token punctuation\">.</span><span class=\"token function\">getForEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        RestTemplateCommand<span class=\"token punctuation\">.</span>GetForObject <span class=\"token operator\">-></span> restTemplateService<span class=\"token punctuation\">.</span><span class=\"token function\">getForObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        RestTemplateCommand<span class=\"token punctuation\">.</span>PostForEntity <span class=\"token operator\">-></span> restTemplateService<span class=\"token punctuation\">.</span><span class=\"token function\">postForEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        RestTemplateCommand<span class=\"token punctuation\">.</span>PostForObject <span class=\"token operator\">-></span> restTemplateService<span class=\"token punctuation\">.</span><span class=\"token function\">postForObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        RestTemplateCommand<span class=\"token punctuation\">.</span>Put <span class=\"token operator\">-></span> restTemplateService<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        RestTemplateCommand<span class=\"token punctuation\">.</span>Delete <span class=\"token operator\">-></span> restTemplateService<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        RestTemplateCommand<span class=\"token punctuation\">.</span>Exchange <span class=\"token operator\">-></span> restTemplateService<span class=\"token punctuation\">.</span><span class=\"token function\">exchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token annotation builtin\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/webclient/command/{webClientCommand}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">command</span><span class=\"token punctuation\">(</span>\n        <span class=\"token annotation builtin\">@PathVariable</span> webClientCommand<span class=\"token operator\">:</span> WebClientCommand\n    <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ResponseEntity<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> <span class=\"token operator\">=</span> ResponseEntity<span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span>webClientCommand<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        WebClientCommand<span class=\"token punctuation\">.</span>GetSynchronous <span class=\"token operator\">-></span> webClientService<span class=\"token punctuation\">.</span><span class=\"token function\">getSynchronous</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        WebClientCommand<span class=\"token punctuation\">.</span>GetAsynchronous <span class=\"token operator\">-></span> webClientService<span class=\"token punctuation\">.</span><span class=\"token function\">getAsynchronous</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        WebClientCommand<span class=\"token punctuation\">.</span>PostSynchronous <span class=\"token operator\">-></span> webClientService<span class=\"token punctuation\">.</span><span class=\"token function\">postSynchronous</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        WebClientCommand<span class=\"token punctuation\">.</span>PostAsynchronous <span class=\"token operator\">-></span> webClientService<span class=\"token punctuation\">.</span><span class=\"token function\">postAsynchronous</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        WebClientCommand<span class=\"token punctuation\">.</span>PutSynchronous <span class=\"token operator\">-></span> webClientService<span class=\"token punctuation\">.</span><span class=\"token function\">putSynchronous</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        WebClientCommand<span class=\"token punctuation\">.</span>DeleteSynchronous <span class=\"token operator\">-></span> webClientService<span class=\"token punctuation\">.</span><span class=\"token function\">deleteSynchronous</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        WebClientCommand<span class=\"token punctuation\">.</span>Exchange <span class=\"token operator\">-></span> webClientService<span class=\"token punctuation\">.</span><span class=\"token function\">exchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The two service classes are created in a standard Spring Configuration with their respective REST clients. These\nservices use a <code class=\"language-text\">TattooServiceConfiguration</code> class to get the base url for the external fake api.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Configuration</span>\n<span class=\"token keyword\">class</span> SpringBootRestClientsCheatsheetsConfiguration <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation builtin\">@Bean</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">restTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RestTemplate <span class=\"token operator\">=</span> <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token annotation builtin\">@Bean</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">restTemplateService</span><span class=\"token punctuation\">(</span>\n            restTemplate<span class=\"token operator\">:</span> RestTemplate<span class=\"token punctuation\">,</span>\n            tattooServiceConfiguration<span class=\"token operator\">:</span> TattooServiceConfiguration\n    <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RestTemplateService <span class=\"token operator\">=</span> <span class=\"token function\">RestTemplateService</span><span class=\"token punctuation\">(</span>tattooServiceConfiguration<span class=\"token punctuation\">,</span> restTemplate<span class=\"token punctuation\">)</span>\n\n    <span class=\"token annotation builtin\">@Bean</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">webClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> WebClient <span class=\"token operator\">=</span> <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token annotation builtin\">@Bean</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">webClientService</span><span class=\"token punctuation\">(</span>\n            webClient<span class=\"token operator\">:</span> WebClient<span class=\"token punctuation\">,</span>\n            tattooServiceConfiguration<span class=\"token operator\">:</span> TattooServiceConfiguration\n    <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> WebClientService <span class=\"token operator\">=</span> <span class=\"token function\">WebClientService</span><span class=\"token punctuation\">(</span>tattooServiceConfiguration<span class=\"token punctuation\">,</span> webClient<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Configuration</span>\n<span class=\"token annotation builtin\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"tattooservice\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> TattooServiceConfiguration <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> url<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The external fake Tattoo archive API is composed of four endpoints:</p>\n<ul>\n<li>one GET tattoo API</li>\n<li>one POST tattoo API</li>\n<li>one PUT tattoo API</li>\n<li>one DELETE tattoo API</li>\n</ul>\n<p>I omitted the PATCH verb because I don't use it very often. To interact with these API I created some classes that are\nneeded as request or response object in these calls. Below you can find them. One important thing to note: as a\nconsequence of the fact that all these are <code class=\"language-text\">data</code> classes I had to add <code class=\"language-text\">jackson-module-kotlin</code> as dependency in order to\nmake Jackson (a suite of data-processing and serialization tools used internally by Spring) work with Kotlin <code class=\"language-text\">data</code>\nclasses. See <code class=\"language-text\">implementation(&quot;com.fasterxml.jackson.module:jackson-module-kotlin:2.11.+&quot;)</code> dependecy in the gradle file\nabove.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@JsonIgnoreProperties</span><span class=\"token punctuation\">(</span>ignoreUnknown <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">Tattoo</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">var</span> id<span class=\"token operator\">:</span> Long<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">var</span> title<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">var</span> dimensions<span class=\"token operator\">:</span> Dimensions<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">var</span> style<span class=\"token operator\">:</span> TattooStyles\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token keyword\">class</span> TattooStyles <span class=\"token punctuation\">{</span>\n    NewSchool<span class=\"token punctuation\">,</span>\n    OldSchool<span class=\"token punctuation\">,</span>\n    Tribal<span class=\"token punctuation\">,</span>\n    Japanese\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">Dimensions</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">val</span> height<span class=\"token operator\">:</span> Long<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> width<span class=\"token operator\">:</span> Long\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">TattooPostResult</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">val</span> result<span class=\"token operator\">:</span> String\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The external fake API are served using the standalone version of <a href=\"http://wiremock.org\" title=\"wiremock\">WireMock</a>, a Java mock\nserver.</p>\n<h4>RestTemplate</h4>\n<p><code class=\"language-text\">RestTemplate</code> is the standard way to consume APIs in a synchronous way. Even if it has been deprecated starting from\nSpring 5.0 in favour of <code class=\"language-text\">WebClient</code>, it is still widely used. The standard way to create a <code class=\"language-text\">RestTemplate</code> instance is by\nusing the <code class=\"language-text\">RestTemplateBuilder</code> class. During the creation it is possible to customize some parameters, like for example\nthe connection timeout.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Bean</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">restTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RestTemplate <span class=\"token operator\">=</span> <span class=\"token function\">RestTemplateBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">setConnectTimeout</span><span class=\"token punctuation\">(</span>Duration<span class=\"token punctuation\">.</span><span class=\"token function\">ofSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now we are ready to call the external APIs. Let's start from the GET one. We can use one of these methods:</p>\n<ul>\n<li><code class=\"language-text\">getForEntity</code>, a method that will return a <code class=\"language-text\">ResponseEntity</code> that contains as body the content of the API response but\nalso other useful information (e.g. Headers, HTTP status code)</li>\n<li><code class=\"language-text\">getForObject</code>, a method thaty will return directly the content of the API response without any other information</li>\n</ul>\n<p>Both these methods will return the content deserialized into the Kotlin <code class=\"language-text\">Tattoo</code> class we saw above. If the server\nreturn a 4xx or 5xx status code RestTemplate will throw a <code class=\"language-text\">RestClientResponseException</code> that we can catch to do some\nfallback operations. We can construct the url to be called using the <code class=\"language-text\">UriComponentsBuilder</code>. These class will be used\nfor all the code snippet below.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">getForEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ResponseEntity<span class=\"token operator\">&lt;</span>Tattoo<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    restTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">getForEntity</span><span class=\"token punctuation\">(</span>\n            UriComponentsBuilder\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">fromHttpUrl</span><span class=\"token punctuation\">(</span>tattooServiceConfiguration<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/tattoo/123\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">toUri</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Tattoo<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> RestClientResponseException<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ResponseEntity<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>rawStatusCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">getForObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Tattoo<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    restTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">getForObject</span><span class=\"token punctuation\">(</span>\n            UriComponentsBuilder\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">fromHttpUrl</span><span class=\"token punctuation\">(</span>tattooServiceConfiguration<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/tattoo/123\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">toUri</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Tattoo<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> RestClientResponseException<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The POST external api can be called with two similar methods:</p>\n<ul>\n<li><code class=\"language-text\">postForEntity</code>, again, a method that will return a <code class=\"language-text\">ResponseEntity</code></li>\n<li><code class=\"language-text\">postForObject</code>, as above, a method that will return directly the content of the API response</li>\n</ul>\n<p>In this case we have to pass a body in the request of the call. These can be done by passing an instance of the class\nthat represents the body content. Jackson will do all the hard work <img class=\"emoji-icon\" alt=\"emoji-heart_eyes\" data-icon=\"emoji-heart_eyes\" style=\"display: inline; margin: 0; position: relative; width: 20px\" src=\"data:image/png;base64, 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\" title=\"emoji-heart_eyes\">.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">postForEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ResponseEntity<span class=\"token operator\">&lt;</span>TattooPostResult<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    restTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">postForEntity</span><span class=\"token punctuation\">(</span>\n            UriComponentsBuilder\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">fromHttpUrl</span><span class=\"token punctuation\">(</span>tattooServiceConfiguration<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/tattoo/123\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">toUri</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">Tattoo</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"A new beautiful tattoo\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Dimensions</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TattooStyles<span class=\"token punctuation\">.</span>NewSchool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            TattooPostResult<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> RestClientResponseException<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ResponseEntity<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>rawStatusCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">postForObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> TattooPostResult<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    restTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">postForObject</span><span class=\"token punctuation\">(</span>\n            UriComponentsBuilder\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">fromHttpUrl</span><span class=\"token punctuation\">(</span>tattooServiceConfiguration<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/tattoo/123\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">toUri</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">Tattoo</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"A new beautiful tattoo\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Dimensions</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TattooStyles<span class=\"token punctuation\">.</span>NewSchool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            TattooPostResult<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> RestClientResponseException<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Next is the PUT api. These can be called by using the <code class=\"language-text\">put</code> method. In this case there's no return body (because put\ndoesn't accept it as standard) so there's only one implementation method for these HTTP verb.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">    <span class=\"token keyword\">fun</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> tattoo <span class=\"token operator\">=</span> <span class=\"token function\">Tattoo</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"A new beautiful tattoo\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Dimensions</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TattooStyles<span class=\"token punctuation\">.</span>NewSchool<span class=\"token punctuation\">)</span>\n        restTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>\n                UriComponentsBuilder\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">fromHttpUrl</span><span class=\"token punctuation\">(</span>tattooServiceConfiguration<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/tattoo/123\"</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">toUri</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                tattoo<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n        <span class=\"token string\">\"Tattoo resource created <span class=\"token interpolation variable\">$tattoo</span>\"</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> RestClientResponseException<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> error <span class=\"token operator\">=</span> <span class=\"token string\">\"Put client error <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>e<span class=\"token punctuation\">.</span>rawStatusCode<span class=\"token delimiter variable\">}</span></span>\"</span>\n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n        error\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then we have the DELETE api. Again, also here we have just one implementation.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    restTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>\n            UriComponentsBuilder\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">fromHttpUrl</span><span class=\"token punctuation\">(</span>tattooServiceConfiguration<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/tattoo/123\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">toUri</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token string\">\"Tattoo resource deleted\"</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> RestClientResponseException<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> error <span class=\"token operator\">=</span> <span class=\"token string\">\"Put client error <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>e<span class=\"token punctuation\">.</span>rawStatusCode<span class=\"token delimiter variable\">}</span></span>\"</span>\n    logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n    error\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Last but not least we have an additional <code class=\"language-text\">exchange</code> method. This <code class=\"language-text\">RestTemplate</code> method let you can API with different\nHTTP verbs by specifing it in the parameter list. There are various override of this method that take into account all\nthe parameters required by the different HTTP verbs (e.g. POST body request). In the example below I try to call again\nthe POST API.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">exchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ResponseEntity<span class=\"token operator\">&lt;</span>TattooPostResult<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    restTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">exchange</span><span class=\"token punctuation\">(</span>\n            UriComponentsBuilder\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">fromHttpUrl</span><span class=\"token punctuation\">(</span>tattooServiceConfiguration<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/tattoo/123\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">toUri</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            HttpMethod<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">,</span>\n            HttpEntity<span class=\"token operator\">&lt;</span>Tattoo<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">Tattoo</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"A new beautiful tattoo\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Dimensions</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TattooStyles<span class=\"token punctuation\">.</span>NewSchool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            TattooPostResult<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> RestClientResponseException<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ResponseEntity<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>rawStatusCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>WebClient</h4>\n<p><code class=\"language-text\">WebClient</code> is the new REST client starting from Spring 5.0 Reactive. In the long term it will substitute <code class=\"language-text\">RestTemplate</code>\n. The key feature of these new client is that it can do asynchronous non blocking calls that published reactive <code class=\"language-text\">Mono</code>\nor <code class=\"language-text\">Flux</code> streams. The caller can subscribe to these streams and react to them. Anyway you can still also do synchronous\nblocking calls. Let's start from the creation by using the <code class=\"language-text\">WebClient.builder()</code>. Also in these case I customized the\nconnection timeout.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Bean</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">webClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> WebClient <span class=\"token operator\">=</span> WebClient<span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">clientConnector</span><span class=\"token punctuation\">(</span><span class=\"token function\">ReactorClientHttpConnector</span><span class=\"token punctuation\">(</span>HttpClient<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>TcpClient\n                <span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">option</span><span class=\"token punctuation\">(</span>ChannelOption<span class=\"token punctuation\">.</span>CONNECT_TIMEOUT_MILLIS<span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">doOnConnected</span> <span class=\"token punctuation\">{</span> connection<span class=\"token operator\">:</span> Connection <span class=\"token operator\">-></span>\n                    connection<span class=\"token punctuation\">.</span><span class=\"token function\">addHandlerLast</span><span class=\"token punctuation\">(</span><span class=\"token function\">ReadTimeoutHandler</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">,</span> TimeUnit<span class=\"token punctuation\">.</span>MILLISECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    connection<span class=\"token punctuation\">.</span><span class=\"token function\">addHandlerLast</span><span class=\"token punctuation\">(</span><span class=\"token function\">WriteTimeoutHandler</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">,</span> TimeUnit<span class=\"token punctuation\">.</span>MILLISECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  </code></pre></div>\n<p>Now I was ready to call again the APIs we saw before. To call them there's just one <code class=\"language-text\">retrieve</code> method. To call the\ndifferent HTTP verbs I just had to customized the request with the correct method:</p>\n<ul>\n<li><code class=\"language-text\">get()</code>, for GET</li>\n<li><code class=\"language-text\">post()</code>, for POST</li>\n<li><code class=\"language-text\">delete()</code>, for DELETE</li>\n<li><code class=\"language-text\">put()</code>, for PUT</li>\n</ul>\n<p>If the API returns an error we receive an event on the <code class=\"language-text\">onStatus</code> response callback and we can do some fallback\noperations. As we said in the introduction <code class=\"language-text\">WebClient</code> can do synchronous and asynchrouns calls. How?</p>\n<ul>\n<li>If we want to do a synchronous call, we can instruct the <code class=\"language-text\">WebClient</code> to convert to a <code class=\"language-text\">ResponseEntity</code> the result of\nthe API call with the <code class=\"language-text\">toEntity</code> method and then call the <code class=\"language-text\">block()</code> method to immediately subscribe and block\nindefinitely the call (so until timeout or until we receive a response)</li>\n<li>If we want to do a asynchronous call, we can instruct the <code class=\"language-text\">WebClient</code> to convert to <code class=\"language-text\">Mono</code> the result of the API call\nwith the <code class=\"language-text\">bodyToMono</code> method.</li>\n</ul>\n<p>Below you can find the synchronous and asynchrounous versions of the API calls.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">getSynchronous</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ResponseEntity<span class=\"token operator\">&lt;</span>Tattoo<span class=\"token operator\">></span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> webClient\n        <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">uri</span><span class=\"token punctuation\">(</span>UriComponentsBuilder\n                <span class=\"token punctuation\">.</span><span class=\"token function\">fromHttpUrl</span><span class=\"token punctuation\">(</span>tattooServiceConfiguration<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/tattoo/123\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">toUri</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">retrieve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">onStatus</span><span class=\"token punctuation\">(</span>HttpStatus<span class=\"token operator\">::</span>is4xxClientError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> Mono<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token function\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4XX Error <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">statusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">onStatus</span><span class=\"token punctuation\">(</span>HttpStatus<span class=\"token operator\">::</span>is5xxServerError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> Mono<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token function\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5XX Error <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">statusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">toEntity</span><span class=\"token punctuation\">(</span>Tattoo<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">getAsynchronous</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Mono<span class=\"token operator\">&lt;</span>Tattoo<span class=\"token operator\">></span> <span class=\"token operator\">=</span> webClient\n        <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">uri</span><span class=\"token punctuation\">(</span>UriComponentsBuilder\n                <span class=\"token punctuation\">.</span><span class=\"token function\">fromHttpUrl</span><span class=\"token punctuation\">(</span>tattooServiceConfiguration<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/tattoo/123\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">toUri</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">retrieve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">onStatus</span><span class=\"token punctuation\">(</span>HttpStatus<span class=\"token operator\">::</span>is4xxClientError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> Mono<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token function\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4XX Error <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">statusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">onStatus</span><span class=\"token punctuation\">(</span>HttpStatus<span class=\"token operator\">::</span>is5xxServerError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> Mono<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token function\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5XX Error <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">statusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">bodyToMono</span><span class=\"token punctuation\">(</span>Tattoo<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">postSynchronous</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ResponseEntity<span class=\"token operator\">&lt;</span>TattooPostResult<span class=\"token operator\">></span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> webClient\n        <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">uri</span><span class=\"token punctuation\">(</span>UriComponentsBuilder\n                <span class=\"token punctuation\">.</span><span class=\"token function\">fromHttpUrl</span><span class=\"token punctuation\">(</span>tattooServiceConfiguration<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/tattoo/123\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">toUri</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span>BodyInserters<span class=\"token punctuation\">.</span><span class=\"token function\">fromValue</span><span class=\"token punctuation\">(</span><span class=\"token function\">Tattoo</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"A new beautiful tattoo\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Dimensions</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TattooStyles<span class=\"token punctuation\">.</span>NewSchool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">retrieve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">onStatus</span><span class=\"token punctuation\">(</span>HttpStatus<span class=\"token operator\">::</span>is4xxClientError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> Mono<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token function\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4XX Error <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">statusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">onStatus</span><span class=\"token punctuation\">(</span>HttpStatus<span class=\"token operator\">::</span>is5xxServerError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> Mono<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token function\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5XX Error <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">statusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">toEntity</span><span class=\"token punctuation\">(</span>TattooPostResult<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">postAsynchronous</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Mono<span class=\"token operator\">&lt;</span>TattooPostResult<span class=\"token operator\">></span> <span class=\"token operator\">=</span> webClient\n        <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">uri</span><span class=\"token punctuation\">(</span>UriComponentsBuilder\n                <span class=\"token punctuation\">.</span><span class=\"token function\">fromHttpUrl</span><span class=\"token punctuation\">(</span>tattooServiceConfiguration<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/tattoo/123\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">toUri</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span>BodyInserters<span class=\"token punctuation\">.</span><span class=\"token function\">fromValue</span><span class=\"token punctuation\">(</span><span class=\"token function\">Tattoo</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"A new beautiful tattoo\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Dimensions</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TattooStyles<span class=\"token punctuation\">.</span>NewSchool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">retrieve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">onStatus</span><span class=\"token punctuation\">(</span>HttpStatus<span class=\"token operator\">::</span>is4xxClientError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> Mono<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token function\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4XX Error <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">statusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">onStatus</span><span class=\"token punctuation\">(</span>HttpStatus<span class=\"token operator\">::</span>is5xxServerError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> Mono<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token function\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5XX Error <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">statusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">bodyToMono</span><span class=\"token punctuation\">(</span>TattooPostResult<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">putSynchronous</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> tattoo <span class=\"token operator\">=</span> <span class=\"token function\">Tattoo</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"A new beautiful tattoo\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Dimensions</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TattooStyles<span class=\"token punctuation\">.</span>NewSchool<span class=\"token punctuation\">)</span>\n    webClient\n            <span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">uri</span><span class=\"token punctuation\">(</span>UriComponentsBuilder\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">fromHttpUrl</span><span class=\"token punctuation\">(</span>tattooServiceConfiguration<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/tattoo/123\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">toUri</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span>BodyInserters<span class=\"token punctuation\">.</span><span class=\"token function\">fromValue</span><span class=\"token punctuation\">(</span>tattoo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">retrieve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">onStatus</span><span class=\"token punctuation\">(</span>HttpStatus<span class=\"token operator\">::</span>is4xxClientError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> Mono<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token function\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4XX Error <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">statusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">onStatus</span><span class=\"token punctuation\">(</span>HttpStatus<span class=\"token operator\">::</span>is5xxServerError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> Mono<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token function\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5XX Error <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">statusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">bodyToMono</span><span class=\"token punctuation\">(</span>Void<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Tattoo resource created <span class=\"token interpolation variable\">$tattoo</span>\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">deleteSynchronous</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">{</span>\n    webClient\n            <span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">uri</span><span class=\"token punctuation\">(</span>UriComponentsBuilder\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">fromHttpUrl</span><span class=\"token punctuation\">(</span>tattooServiceConfiguration<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/tattoo/123\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">toUri</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">retrieve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">onStatus</span><span class=\"token punctuation\">(</span>HttpStatus<span class=\"token operator\">::</span>is4xxClientError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> Mono<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token function\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4XX Error <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">statusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">onStatus</span><span class=\"token punctuation\">(</span>HttpStatus<span class=\"token operator\">::</span>is5xxServerError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> Mono<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token function\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5XX Error <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">statusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">bodyToMono</span><span class=\"token punctuation\">(</span>Void<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Tattoo resource deleted\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Conclusion</h4>\n<p>You can find the complete source code of the application described above in\nthis <a href=\"https://github.com/chicio/SpringBoot-RestClients-Cheatsheets\" title=\"spring boot resttemplate webclient cheatsheet\">github repository</a>\n.<br>\nThe last months were really challenging. The COVID-19 pandemic has caused great disruption and I got involved to help\nthe company where I work, <a href=\"https://lmgroup.lastminute.com/\" title=\"lastminute.com group\">lastminute.com group</a> to get out of\nfrom this mess. It was hard and it will still be really hard for a long time. In this mess I returned (again one more\ntime in my career) to do some backend development and I started to learn Spring Boot. Let's see what the future holds\nfor me. <img class=\"emoji-icon\" alt=\"emoji-muscle\" data-icon=\"emoji-muscle\" style=\"display: inline; margin: 0; position: relative; width: 20px\" src=\"data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAR80lEQVR4AeyYA6wsTxpHT1VjesxrrG3btoK1GWsRrm0jWNu2bT37Yu6d/7in7afZZOM8Th7OMPxyvl9VF7imuc51rqNykXndg29sVFcWnqkXS09WC/nbaWoul6WJE/ve4SSJ/x754W+E5D9Aj9mD+MALHsDFwretOxfrzU8019bvUW7NYRRLKKoKZCRBROR7BI6FNR52XHPy58B1f+mb9r8Hne6/gREzQLzm/utcDKrz5Xs0V9a/v3yr28xVF1fIV0toWg5FCISuknk+sW3iuy5hnBAEEaNul+HWBoON7e3xaPwE4F9cZtQkTS5cvlFcqc0vf331trefa6yuUWzU0PI6epKQdTukSUT3wF7MnR1y5RKtezyQ2CijGgZZHGH3eqvaRC4wA1RNkVwIb/ntlnjvM+/1gaWb3WytsbRCuVknl9fJGQbqeED/2F4Cc4i90ebYwS1ueodbUGtU8dQCiTMhp0AUhYfHQ//3zAD1VGEuhDc/9jYPry8tPLW2uEyxXiGXz5E3dLRTv1nXJxp0CRwPTdeZaxSZv/GNKbQWwXawPRuvs0Ona37mI3t7MTNAPVWYC+Edt1x6dqU1R7FaQS8Y6LqKqikoUkHWGiRhhD0Y4XgB9fkGN3nQQ4ncCeZ//4G5uUEWBhR07W5ADvCvtGVQKLpxp3yhiJbLoSinxSVSSMhS9GYTrVhlODiEEIJbPvlp2DvbDA7vR11YpX7buyJXTUZB8sRn9+3bAX/gMqM++/bznC/be7qKqislRTuduoaiSKQUZ2SFgEw3qKzfGO8Xv+T2D384haVFenv/Rf0O9yTJV7Esh9i0EIomS7p47EwacKow58uvQHlyhicBKcQZeabypClJlpJfvRELC3Ms3fHOWN0OxtotSI0yjm0x7t5A7+gh+u0dnDA6zgxQTxXmApBZmplnxPlf8oIs4+z6P3FQdJ3Ve9wdZzQgVXMIVNxBl1G7zdb+/Rzcf2x3387o3d85NP4GM0D97J4hF4CAzJWKREjOyANICVmUEI6G+K5LbmkFzw3JZIa726Z7/DhH9x4I/n2s+4Pfb00+dXwcHAYkIIDsijoL6EZOVzQdRVHIOEuWQhpFhL6PNxnjOAG+52Nu7dA+scHeA5t7fn98+JG/dtx/Ax4QADGQXVGrwD1XyvlStXRTPV9AaCpSgARIUhLPw3MdRrsd+u02vU6Pza3eYE97+K2fHB9+yfSxpvI2MAHcK+40+Mg7rdyn2miu6oUiUlMQCECQWA5u7waGG0fZPXyYE0c2zT8fH3321HD/6ZYV9KaJu1N5C3CA+IprQKtZf0axOSf0YvHsHkCVEKfEjoXV3WWwsUF7q+N8/M+brzrQ9/cA0TR15//EPWaI5Dx586Nus1Sfm3tsqdFEMQykqiCEhDAk8Dwcc4w1GvPnI91vnJL/1zTtETAA+tP/3hV7IWJUCs9oLC7UjHIFzdBRhEAiSMKQ0LFwTZOJafGfjv37adoTwJ5Kh1f0jdDrbnc7vdysvbgyv0iuVEKq0+GfpqRhSODaeLbDxA6cvhsenqZtXvzEZzQFjFuJRzSXlm5TqNbRCgaaIlGkgogT4sAjcm0i32fk+L22HW8AFlP5q6IBhUrtFZWFBYxKGUVTUBQFiYA4Jgl9As8nCiLGbtidyvsAV0UD3vKk2922tTD/8HJjDu1kd+YAJcuyrOEvMrPaYxzb5zzbtm3b791n2zYXrm3btu1tD5pVidedFWtN315n7t7XiFl/R7X7/0M5me12FsBYg0mQdPFTjScE7yl9PK31Hj5uBGi0Oj+2cvkVzVn0i1aBMxZrBBJEXxKrCakq8TMBYjqFzvePCwH++GtvXl7d2vjupY1NGr0uGn2sdZgQSb7KJeBnPkR88H0gftwI0Gl3v3b9ssuu7qys4prNevPDCAbAV7kE4qQkhAApca7vBx9XArSWuj+2tLWVR1/RcPXqTwzERAqeMEv9akz0nhgDJQyA9HEhwJ990223rW1vfXFvbYOi086pr0BSmkU/k08+kGIkxoSkWAHx4+JorFG0v2N1c7vZmkW/WeT0z6u/KQiBGCtSWRJy9CMpJlKS8P4dr+G2tr6kJZu+ANifJN8+caoEJh90Af71a2/mYnb+CW81S6sr39pd36DR6WCd1f2/KRAIPjdAX5Y5/VOIpJQQufT/8f/uOz/rhmav8Y2u2fmiVrt9U9FsbBrruiLCUgzDuHXZvp9U58qqOuKr8k1pMn7+cDh5EbD7AQkw7K1cvPa/7va7VtbXPrm9vIJrNQ7SX4CUkBAIoSJWJSkE4hRZgCiRi9jffOdn3NZdXfrNla2t75hOl+Xu8ipFq41tzLLMki2ltRgDvpqJPKEcDRnu79E/f/5I//yFp036o/8BXvh+CVAYx8WsarS+tre+7lrdLq558I+PqACZdDkTYELMAiRiigSJ4b1lwD9+32f9wvpVV//J1nXXrS9tbNNeXs4HKq4oMFYQMahlQZMPhLzaLPNqczIYXDPYufAjOyeP/+C5YycePO5f+D3gHe+TADGOuJh1eu2v7q5oZKxB0x8xAlUixUDyJSnFLEb2WQT83df4Vm/l6hv/45rb7/ihretupLuxMSXfwzULnM0Lq7q8BESkJp/IiDESpvATP8WEaWmyvL5hlze3v/fMO9/xJc9/0et+CngswP+94O1ysRJ0v/GQV1+kId26uXrH5Z/S7C1hm0Xd9c0UokMkeUgxk86pH0OdESkRQhqz+HlfddP22uXbD7nhEz7pizavv4ne5jqtXodm01E4h1VhjUZfBFIkW9LmmsesGCorNJ2h1WzSbLeZZugVX73cftgLX/DqXwL+59e/8vb09095o4rwfk6BoU2fury6vN5od3CN4qDzoxYjhFRHKdYixJib4MwP31PMq65e39p81A2f9Emftn3jzUxrntZSh9Ys8k5PleriQmrKEFOtwMyFWItNJErCWUOjUVCI5Gvn7KxEG19QNP/7Oc95eQf4p1/7qrvSPzz5dSrC+yHAhVH1ad3lXj7ctM5qakqGJCBBkloANEKklP0kpD76xb/yJdevrm6tP/K6T7zr07ZvuInlKfnOco9mYXHWYSOIj4iEmrzmPKgHRH3SzDBOMGIxZiZA7bVE+bLC/eMznv7CDvAXv/5VdxyeAdMneW8WY/ykhnZlrXtkPgOSRiiqJyIkAjGOQtxD7frV7n9ce/stn749rfnl1VU67RYtMbgYsWWJkA4+NyUWLQsMB4IoDICAWKBR1OWjf1/25fz505/2glXgNw4VABKH2d8/+Y3yd9/1GVdLo5mjpNFHAINaTICAEYjkyFsg+FQOqtAH+PnPvuoHr7vl+u/bvukmVtbWa/IWXArYJAfkU5on+p7kF0HSTAGD9goDbeeQXhvsBkngi7/Y//rTn/6iIfBHdytACJHD7EpoW2s3nHOImCnQ9Ke2BHqDPonkqAggw/Ojcu/zLuttfuGn3vjXWzfexOrWNu1Om6ZzuLySRLMGUvYCqAgk9KMPekD2URNEhRe0Ywguj05oYkjtFnF1leqq6/ncz9j/wyc99SUvBh7Hgrm9nQGHWbtHzxVu2Vhbp5Z2fxbTH7DGgWZIozBAGuyMGX7DV1z729feesuVS5ddSbPdoeEM1oDJRHLkVccD0iqClla+VvLpQHCljQhJdDIlAQN6Q2i3WV5dY3zF1Xzi7Sf++fFPfdEzgXnCuCNHj3GoNdpNa20nj7752lzI0mQM4grcDA1Hs1VQen/+cy9v3/CZn3bzzyxdeRWdpSUahcNawSgxpaCEBQig0wT1KkQWQIlr+gtJdLFk6teIsQgzgYWIpVWA77Tprq2xfcX2zTffcN23APdjztz0QQ6zI68/2bJGmiJapxFIgiQD+TrUohiLLQqKWYRbTdKoYG9YnvvyO6/8iWtuub1TrKzRKCzOJEwmF0ESMQEoYZJGO+r9+ahz4EV08oCIRj850LrEgBGDM0Iw5PHYmq0Rlpa4bKP7zSwKMH2Qw6zbTs2isAWgAkxReRAlrj9QEKRoUvR6sw1T/H6fDv6yz/jsO+/qbGwhzmFJSAgQK5QuSnAGvVZB5knrdVIvInM9x4CkOgZYtCx0TBqsCDaLYPPyekrmU1kwN32Qw6zZcK3CiJGktVmVYKKefyfU6v5gHc3eMml9TP/Ucb7ws++68/pP+xQRKxgixFJLWgfGATklv3hfBRD1agkdw2LI7IxFJJGmQHUhCSQgBogRoidziGnltx/9agNE1NxvP/JVHGZfeO1SU7KoCUkzxPoDVeX56ImAa7Sx3S69jU2u+NTPkllWECKkEqKQYmZFQE2bWponv9AMNeVVaTJxybUfSckiJoG1yjwSAclcAyEE4mSCHw+pRkPKqhwCBTC5pJWgw7QMIjXJQIyBFIXI3A+OByNKjOCaHVZvvBWxjhC9rg5Bm5qm8EK3z8j3mFNXXzuDmtGGN/MYhKCfC4BeGxKeCHjvqUZ9Rrs79C9cYH8wejtgUbu4AA3pWitWIAsgMULwWQSNnkZVu3YIiIEk5N3hlFNQyYqOs0XiJNTm5ruaiFZ13eFJFklSi25sFiIBot+tE4mEEEJiPB4x3S9g7/Qpzp86y5nd0TMAuRQBhPrrliWrnTL5FCqipqCmfiZLSPVzM3GqEkLQXSKPvk59QmaeBGmxttPBdJcZAHTUmZq0kCAZEL0vthZW23+SHJCc+uNxSX+/z7lTpzj9rqMcP7lz5rnvuvBYIF1qBohzdrtwlqxzCJlQwhIkQpwbV1kcDzEQq0rPB8osCvEg2vP1rYsgJa98tX/VoguiIuSMk3jQCsTmckTLKVILEmLCVxXj0ZjB/j6753Y4c+ocR0+c402n9v7lrTvVWSBcqgBc3mvdiBhSJj8hljN1BaO1r9GtSRJIvkbOhCnydVSxtFA1+gAHBEkIBkTliAbRmieC3lA3cr1G7/tICJ6qqpiMJ4yHQwb9IXu7fc5f2Of0+T6vO7l3r0e95cIjtfn5SxWgudwtPpkUieUEPxxQhQnoNriu3lSAqILUSEEbplevAqhp6stCgzdzRBMCRG2eMYWZ0xWhUOm+o6/8FCWT0SSn/HA4mmLCXn/Ebn/MiZ3hmVedGtzrOUf2HwiMFJeUAelTr2hd1jVy83g4YrK/x0giNAp87j12Pm1zlCVFogpDJrywnp9CBK1daotCAp1bkaivjSSd5fl4Tes6Uvkqi1pVnnJcMZmUjMuS0ahkOJ76STVbgXKiPzn6xjPDx7z85OAJ+5NwChgsHtFfNANsjEtlDK3dC7t5xyYMpiI0CgqTm5KSMAcTAINIQpIKI3LglbDoqNPSBRUpCxdnvu4lMSR8jKQc5VAftJYer+QnZcW49JnwuArZ74wrf3xv8so3nR098c3nhs8d+Ex4ouR3VAB/qQLIu/vlmbO742PLzb1VfGDYbdLK63lREmYuyoDUchhrMmlndO9AD1CAWjhdvhISERAVIIWYyyXESPA1qhAy6XJGfIpJNYNn7CPjMtAvK39yv3zTu3cnL3jnhcnzjg2qtynJSskPlfgeMH6ftsRODxi+6vTgv9uF/ON4UhXdVlFvX0kWQCOW5keY7hXkA9MMp9liRLDZ1+IYyU6jD3qSRMiI+JCmCFQhUvqY/cTX2Jv43XPD6o3H9suXvXtn8tLjg+qtQFwgPlbyA/WeQ0w43FaAzbs22994x2b7B1Y77tamNR0rJoQYhlVK/dKn0djH0oq4prUtZ2g3rHSdkU7hjMwEsDKFFQxSC2TIXju5ZhGEeheZSKIKqSYdgu9Pa3hnFI6cHVWvPTsIbz41KN+6U4azSjoA1QLxkWIMVKi9PwK0gS1gHVjaatsrCzHdKPiyisNxCMNhyOpGwDQdrbah1TC22yhMt+vcSqfBRsPZtZZlrVe4tZZjzTm7alJy1po2QAhxFIVQhbQ/qeL5/SnGVTrT9/7I+WE4tjeuTg8DfSDOkfaKEiW+4ANqH4gABlgF1oAe0NTHANICBEC9Ua+AuWvrwEF9sl4LQACCrwmFhc9VwgolPYeJolyM9gcsgFqh5FUALCBAVCQFgFmA3M21zOMQMaNinnSlKBeuPR+gCRc3UfKNhQyIGWoLhG32h9w/RIB4SJrPIwCRD6IJHypToof4wzIgLoIPsf0/01OcLYDnfB8AAAAASUVORK5CYII=\" title=\"emoji-muscle\"><img class=\"emoji-icon\" alt=\"emoji-purple_heart\" data-icon=\"emoji-purple_heart\" style=\"display: inline; margin: 0; position: relative; width: 20px\" src=\"data:image/png;base64, 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\" title=\"emoji-purple_heart\"></p>","frontmatter":{"title":"Spring Boot + Kotlin Rest client cheatsheet: RestTemplate and Webclient","comments":true,"authors":["fabrizio_duroni"],"tags":["java","kotlin","spring","spring boot","backend","web development"],"date":"23 Dec 2020","description":"During the last months I worked a lot with Spring Boot backend applications. In this post I explain how you can consume a REST api from a Spring Boot application using RestTemplate and (the new) WebClient.","math":false,"image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/f6f0c8ac72a265b5fc255e0c8104de54/a06b6/spring-boot-rest.jpg","srcSet":"/static/f6f0c8ac72a265b5fc255e0c8104de54/5f965/spring-boot-rest.jpg 750w,\n/static/f6f0c8ac72a265b5fc255e0c8104de54/a06b6/spring-boot-rest.jpg 1000w","sizes":"100vw"},"sources":[{"srcSet":"/static/f6f0c8ac72a265b5fc255e0c8104de54/ee7ce/spring-boot-rest.webp 750w,\n/static/f6f0c8ac72a265b5fc255e0c8104de54/0f033/spring-boot-rest.webp 1000w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5}}}},"fields":{"slug":"/2020/12/23/rest-template-webclient-spring-boot/","readingTime":{"text":"12 min read"}}},"site":{"siteMetadata":{"author":"Fabrizio Duroni"}}},"pageContext":{"slug":"/2020/12/23/rest-template-webclient-spring-boot/"}},"staticQueryHashes":["3076394108","3736063423","4028829600","4159577854"]}