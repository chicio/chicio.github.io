{"componentChunkName":"component---src-templates-post-tsx","path":"/2020/07/02/expose-uikit-to-swiftui/","result":{"data":{"markdownRemark":{"html":"<p><em>Do you know that it is possible to use UKit components in SwiftUI? Let's see how you can use UIViewRepresentable and\nUIViewControllerRepresentable to use your UIKit based component or to fill the gap for missing SwiftUI API.</em></p>\n<hr>\n<p>SwiftUI has been around for more than a year now. With its reactive paradigm approach it is a big step forward when\ncompared to the UIKit imperative approach. But as a consequence of the fact that UIKit has been with\nus <a href=\"https://en.wikipedia.org/wiki/IOS_SDK\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">for almost twelve years</a> and there are millions of apps already publish on\nthe app store, a lot of developers have tons of UKit based library and custom components. Another interesting point is\nthe fact that at the moment of this writing a lot of UIKit components from the iOS SDK\nare <a href=\"https://www.hackingwithswift.com/quick-start/swiftui/answering-the-big-question-should-you-learn-swiftui-uikit-or-both\" title=\"uikit missing swiftui\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">missing a counterpart in SwiftUI</a>\n.<br>\nAnyway, you are just starting to develop a new app and you want to create it in SwiftUI (targeting only for iOS 13 and\nup because, you know, for compatibility reason <img class=\"emoji-icon\" alt=\"emoji-laughing\" data-icon=\"emoji-laughing\" style=\"display: inline; margin: 0; position: relative; width: 20px\" src=\"data:image/png;base64, \" title=\"emoji-laughing\">) without losing the ability to speed up you development by\nreusing your UIKit based libraries and components. Is there a solution to this problem? Yes!! <img class=\"emoji-icon\" alt=\"emoji-relaxed\" data-icon=\"emoji-relaxed\" style=\"display: inline; margin: 0; position: relative; width: 20px\" src=\"data:image/png;base64, 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\" title=\"emoji-relaxed\"><br>\nIn this post I will show you how you can leverage the power of <code class=\"language-text\">UIViewRepresentable</code> and <code class=\"language-text\">UIViewControllerRepresentable</code>\nprotocols to expose your UIKit views and controller as standard SwiftUI components. Before going deeper with an example\nlet's see the definition of this two protocol from the official Apple documentation.<br>\nLet's start\nfrom <a href=\"https://developer.apple.com/documentation/swiftui/uiviewrepresentable\" title=\"uiviewrepresentable documentation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">UIViewRepresentable</a>:</p>\n<blockquote>\n<p>UIViewRepresentable. A wrapper for a UIKit view that you use to integrate that view into your SwiftUI view hierarchy...Adopt this protocol in one of your app's custom instances, and use its methods to create, update, and tear down your view. The creation and update processes parallel the behavior of SwiftUI views, and you use them to configure your view with your app's current state information...</p>\n</blockquote>\n<p>And here we have the other one\nfor <a href=\"https://developer.apple.com/documentation/swiftui/uiviewcontrollerrepresentable\" title=\"uiviewcontrollerrepresentable\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">UIViewControllerRepresentable</a>:</p>\n<blockquote>\n<p>UIViewControllerRepresentable. A view that represents a UIKit view controller...Adopt this protocol in one of your app's custom instances, and use its methods to create, update, and tear down your view controller. The creation and update processes parallel the behavior of SwiftUI views, and you use them to configure your view controller with your app's current state information...The system doesn't automatically communicate changes occurring within your view controller to other parts of your SwiftUI interface. When you want your view controller to coordinate with other SwiftUI views, you must provide a Coordinator instance to facilitate those interactions. For example, you use a coordinator to forward target-action and delegate messages from your view controller to any SwiftUI views.</p>\n</blockquote>\n<p>There are a lot of concepts here: view lifecycle, notification, delegation and communication with Coordinator. :\ncold_sweat: But don't worry, with an example you will see how easy it is to use <code class=\"language-text\">UIViewRepresentable</code>\nand <code class=\"language-text\">UIViewControllerRepresentable</code>.</p>\n<h4>Implementation</h4>\n<p>In this example we will create a simple app that will let the user select a document using and instance of the UIKit\nbased controller <code class=\"language-text\">UIDocumentPickerViewController</code> and we will print the name of the file selected using a customized\nUIKit <code class=\"language-text\">UILabel</code>. Let's start from the custom UIKit <code class=\"language-text\">UILabel</code> view. To use our custom <code class=\"language-text\">UILabel</code> in SwiftUI we need to\nwrap it in a struct that implements the first protocol we saw above: <code class=\"language-text\">UIViewRepresentable</code>. This protocol contains two\nmethods:</p>\n<ul>\n<li><code class=\"language-text\">makeUIView(context: Self.Context) -> Self.UIViewType</code>, a method where you create the UIKit to be used in SwiftUI</li>\n<li><code class=\"language-text\">updateUIView(_ uiView: Self.UIViewType, context: Self.Context)</code> a method called when the view must be redrawn due to\nexternal changes (e.g. a State update)</li>\n</ul>\n<p>The <code class=\"language-text\">Self.UIViewType</code> type is\nan <a href=\"https://www.hackingwithswift.com/articles/74/understanding-protocol-associated-types-and-their-constraints\" title=\"swift protocol associated type\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">associated type</a>\nof the protocol and it must match the type of the UIKit view wrapped.<br>\nSo for our example we can implement a <code class=\"language-text\">DocumentNameLabel</code> struct that implements the <code class=\"language-text\">UIViewRepresentable</code> protocol. In\nthe <code class=\"language-text\">makeUIView</code> method we create an instance of the customized UILabel that we want to expose. In the <code class=\"language-text\">updateUIView</code> we\nwill update the text shown by the label with the value contained in a <code class=\"language-text\">@Binding</code> var updated from the container view (do\nyou\nremember <a href=\"https://www.hackingwithswift.com/quick-start/swiftui/what-is-the-binding-property-wrapper\" title=\"binding swiftui\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">what is a @Binding var</a>\n, right?).</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">DocumentNameLabel</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIViewRepresentable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute atrule\">@Binding</span> <span class=\"token keyword\">var</span> content<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">makeUIView</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">UILabel</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> label <span class=\"token operator\">=</span> <span class=\"token class-name\">UILabel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        label<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token literal constant\">#colorLiteral</span><span class=\"token punctuation\">(</span>red<span class=\"token punctuation\">:</span> <span class=\"token number\">0.721568644</span><span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">:</span> <span class=\"token number\">0.8862745166</span><span class=\"token punctuation\">,</span> blue<span class=\"token punctuation\">:</span> <span class=\"token number\">0.5921568871</span><span class=\"token punctuation\">,</span> alpha<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        label<span class=\"token punctuation\">.</span>layer<span class=\"token punctuation\">.</span>borderColor <span class=\"token operator\">=</span> <span class=\"token literal constant\">#colorLiteral</span><span class=\"token punctuation\">(</span>red<span class=\"token punctuation\">:</span> <span class=\"token number\">0.2745098174</span><span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">:</span> <span class=\"token number\">0.4862745106</span><span class=\"token punctuation\">,</span> blue<span class=\"token punctuation\">:</span> <span class=\"token number\">0.1411764771</span><span class=\"token punctuation\">,</span> alpha<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        label<span class=\"token punctuation\">.</span>layer<span class=\"token punctuation\">.</span>borderWidth <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n        <span class=\"token keyword\">return</span> label\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">updateUIView</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> uiView<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UILabel</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        uiView<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> content\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>After the view, we need to take care of the UIKit controller used to select the\ndocument, <code class=\"language-text\">UIDocumentPickerViewController</code>. We will wrap it in a struct that implements\nthe <code class=\"language-text\">UIViewControllerRepresentable</code>. This protocol contains four methods:</p>\n<ul>\n<li><code class=\"language-text\">makeUIViewController(context: Self.Context) -> Self.UIViewControllerType</code>, a method used to create the instance of\nthe view controller to be used in your SwiftUI screen</li>\n<li><code class=\"language-text\">updateUIViewController(Self.UIViewControllerType, context: Self.Context)</code>, a method called when the view controller\nmust be redrawn/updated due to external changes (e.g. a State update)</li>\n<li><code class=\"language-text\">makeCoordinator() -> Self.Coordinator</code>, a method used to create the custom instance that you use to communicate\nchanges from your view controller to other parts of your SwiftUI interface</li>\n<li><code class=\"language-text\">static func dismantleUIViewController(Self.UIViewControllerType, coordinator: Self.Coordinator)</code>, a method called to\nclean up additional resources used by the view controller when it is dismissed</li>\n</ul>\n<p>As for the previous protocol, The <code class=\"language-text\">Self.UIViewControllerType</code> type is\nan <a href=\"https://www.hackingwithswift.com/articles/74/understanding-protocol-associated-types-and-their-constraints\" title=\"swift protocol associated type\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">associated type</a>\nof the protocol and he must match the type of the UIViewController wrapped.<br>\nLe't start from the first method reported above, where we will create the instance of\nthe <code class=\"language-text\">UIDocumentPickerViewController</code> that we want to expose to SwiftUI. The delegate of this controller will be\nthe <code class=\"language-text\">Coordinator</code> instance created in the <code class=\"language-text\">makeCoodinator</code> protocol method. So the Coordinator will be responder for all\nthe <code class=\"language-text\">UIDocumentPickerDelegate</code> methods. Remember that the <code class=\"language-text\">makeCoordinator</code> method is called before everything else when\nwe will create our <code class=\"language-text\">DocumentPickerViewController</code> instance in SwiftUI. The <code class=\"language-text\">Coordinator</code> receive a reference to the\nwrapping struct. This reference is used to trigger a custom callback contained in the <code class=\"language-text\">var callback: (URL) -> ()</code>\nproperty that is received at <code class=\"language-text\">DocumentPickerViewController</code> construction time when\nthe <code class=\"language-text\">documentPicker(_ controller: UIDocumentPickerViewController, didPickDocumentsAt urls: [URL])</code> method of\nthe <code class=\"language-text\">UIDocumentPickerDelegate</code> protocol is invoked. In this way we are able to send back to SwiftUI the result of the\ninteraction with the <code class=\"language-text\">UIDocumentPickerViewController</code>. Last but not least there's also the <code class=\"language-text\">updateUIViewController</code>\nmethod, but in this case with an empty implementation because we don't need to update the status of the view controller\nusing some SwiftUI state change.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">DocumentPickerViewController</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIViewControllerRepresentable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> callback<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">makeCoordinator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Coordinator</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Coordinator</span><span class=\"token punctuation\">(</span>documentController<span class=\"token punctuation\">:</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">updateUIViewController</span><span class=\"token punctuation\">(</span>\n        <span class=\"token omit keyword\">_</span> uiViewController<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIDocumentPickerViewController</span><span class=\"token punctuation\">,</span>\n        context<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIViewControllerRepresentableContext</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">DocumentPickerViewController</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">makeUIViewController</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">UIDocumentPickerViewController</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> controller <span class=\"token operator\">=</span> <span class=\"token class-name\">UIDocumentPickerViewController</span><span class=\"token punctuation\">(</span>documentTypes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token constant\">kUTTypeText</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">open</span><span class=\"token punctuation\">)</span>\n        controller<span class=\"token punctuation\">.</span>delegate <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>coordinator\n        <span class=\"token keyword\">return</span> controller\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Coordinator</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSObject</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">UIDocumentPickerDelegate</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> documentController<span class=\"token punctuation\">:</span> <span class=\"token class-name\">DocumentPickerViewController</span>\n\n        <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>documentController<span class=\"token punctuation\">:</span> <span class=\"token class-name\">DocumentPickerViewController</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>documentController <span class=\"token operator\">=</span> documentController\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">documentPicker</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> controller<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIDocumentPickerViewController</span><span class=\"token punctuation\">,</span> didPickDocumentsAt urls<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> urls<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">startAccessingSecurityScopedResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">defer</span> <span class=\"token punctuation\">{</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">stopAccessingSecurityScopedResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n            documentController<span class=\"token punctuation\">.</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>urls<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we are ready to use our UIKit controller and our custom UIView in a SwiftUI view. We can just add them to the <code class=\"language-text\">body</code>\nfield of our view and use them as a standard SwiftUI component. One thing to be noted is the set of the <code class=\"language-text\">frame</code> on\nthe <code class=\"language-text\">DocumentNameLabel</code> component. This is a consequence of the fact that sometimes the UIKit views wrapped with\nthe <code class=\"language-text\">UIViewRepresentable</code> protocol take as much space as they can in a <code class=\"language-text\">VStack</code> component. This means that if we don't\nset the frame in our example the label would take the majority of the screen space (leaving only the space for button to\nbe shown).</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ContentView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute atrule\">@State</span> <span class=\"token keyword\">var</span> isDocumentPickerPresented<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token attribute atrule\">@State</span> <span class=\"token keyword\">var</span> documentUrl<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"\"</span></span>\n\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">VStack</span><span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Spacer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token class-name\">DocumentNameLabel</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">:</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>$documentUrl<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">frame</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">:</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span>\n            <span class=\"token class-name\">Button</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>isDocumentPickerPresented<span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Document selection\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">frame</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">:</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> alignment<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">sheet</span><span class=\"token punctuation\">(</span>isPresented<span class=\"token punctuation\">:</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>$isDocumentPickerPresented<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">DocumentPickerViewController</span> <span class=\"token punctuation\">{</span> url <span class=\"token keyword\">in</span>\n                        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>documentUrl <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span>lastPathComponent\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token class-name\">Spacer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Conclusion</h4>\n<p>You can find all the code above in\nthis <a href=\"https://github.com/chicio/Use-UIKit-In-SwiftUI\" title=\"github swiftui uikit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">example repository on Github</a>. Don't\nhesitate to clone it and start to play with the example. <code class=\"language-text\">UIViewRepresentable</code> and <code class=\"language-text\">UIViewControllerRepresentable</code> are\nthe tools provided by Apple to let you mix the power and versatility of UIKit with the declarative reactive approach of\nSwiftUI. I hope that in next future releases of the iOS SDK there will be no need to write this custom wrapper\ncomponents at least for all the standard UIKit components.</p>","frontmatter":{"title":"Use UIKit components in SwiftUI: UIViewControllerRepresentable and UIViewRepresentable","comments":true,"authors":["fabrizio_duroni"],"tags":["swift","ios","apple","mobile application development"],"date":"02 Jul 2020","description":"Do you know that it is possible to use UKit components in SwiftUI? Let's see how you can use UIViewRepresentable and UIViewControllerRepresentable to use your UIKit based component or to fill the gap for missing SwiftUI API.","math":false,"image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#883848","images":{"fallback":{"src":"/static/f0e2ac15f2a686b94797634972601225/a6b2a/use-uikit-in-swiftui.jpg","srcSet":"/static/f0e2ac15f2a686b94797634972601225/1a064/use-uikit-in-swiftui.jpg 750w,\n/static/f0e2ac15f2a686b94797634972601225/d46c4/use-uikit-in-swiftui.jpg 1080w,\n/static/f0e2ac15f2a686b94797634972601225/f1277/use-uikit-in-swiftui.jpg 1366w,\n/static/f0e2ac15f2a686b94797634972601225/a6b2a/use-uikit-in-swiftui.jpg 1920w","sizes":"100vw"},"sources":[{"srcSet":"/static/f0e2ac15f2a686b94797634972601225/f1ea4/use-uikit-in-swiftui.webp 750w,\n/static/f0e2ac15f2a686b94797634972601225/8da40/use-uikit-in-swiftui.webp 1080w,\n/static/f0e2ac15f2a686b94797634972601225/d9667/use-uikit-in-swiftui.webp 1366w,\n/static/f0e2ac15f2a686b94797634972601225/e04a9/use-uikit-in-swiftui.webp 1920w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.359375}}}},"fields":{"slug":"/2020/07/02/expose-uikit-to-swiftui/","readingTime":{"text":"8 min read"}}},"site":{"siteMetadata":{"author":"Fabrizio Duroni"}}},"pageContext":{"slug":"/2020/07/02/expose-uikit-to-swiftui/"}},"staticQueryHashes":["2796887856","3076394108","379746230","4028829600"],"slicesMap":{}}