{"componentChunkName":"component---src-templates-post-tsx","path":"/2020/04/19/dependecy-injection-swift/","result":{"data":{"markdownRemark":{"html":"<p><em>There are a lot of dependency injection framework in the open source swift world with really cool features like object\ngraph, persistence etc. But what if all you need is a lightweight dependencies container? In this post I will show you\nhow to create it by leveraging the Metatype Type, Generics, the Hashable protocol and the Equatable protocol.</em></p>\n<hr>\n<p>The open source Swift world is full of useful framework. You can find almost everything you need (there\nare <a href=\"https://www.fabrizioduroni.it/2018/05/07/born-id3tageditor-mp3id3tagger/\" title=\"id3 tag editor\">rare cases where you need to write something that still doesn't exist</a>\nout there). Anyway, a lot of the frameworks and libraries you will find out do more than you need. See for example the\nworld of the dependencies injection framework. We have a lot of alternatives from which we can\nchoose: <a href=\"https://github.com/Swinject/Swinject\" title=\"dependencies injection swift Swinject\">Swinject</a>\n, <a href=\"https://github.com/scribd/Weaver\" title=\"dependecies injection swift Weaver\">Weaver</a> etc. This frameworks come with a lot\nof features like: object graph construction, injection with property wrappers, instance persistence etc. This are all\nuseful feature, but if your needs are very limited (just a dependecies container register/resolver using protocol and\nclasses) the previous frameworks gives you just a big overhead and complexity on you code. This is why for my recent\nproject I tried to write my own very simple dependencies injector container by leveraging the power of Swift Metatype\nand the Hashable protocol. Let's go and see the how I created it <img class=\"emoji-icon\" alt=\"emoji-smirk\" data-icon=\"emoji-smirk\" style=\"display: inline; margin: 0; position: relative; width: 25px\" src=\"data:image/png;base64, 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\" title=\"emoji-smirk\">.</p>\n<h4>Implementation</h4>\n<p>The main class of dependencies injector container is composed by 2 classes: <code class=\"language-text\">DependeciesContainer</code> and <code class=\"language-text\">DependencyKey</code>\n.<br>\nThe main one stores in the field <code class=\"language-text\">dependecies</code> a dictionary of all the dependencies registered using an instance of the\nsecond one. <code class=\"language-text\">DependeciesContainer</code> exposes two methods:</p>\n<ul>\n<li><code class=\"language-text\">register&lt;T&gt;(type: T.Type, name: String? = nil, service: Any)</code>, that lets you register a new dependency in the\ncontainer. It accepts 3 parameter. The first one is the <code class=\"language-text\">Type</code> of the dependency. The second one is a string that\nlet's you identify different named variations of the same dependencies (e.g. you register <code class=\"language-text\">Cat</code> and <code class=\"language-text\">Dog</code>, two\ndifferent implementation of an hypothetical <code class=\"language-text\">Animal</code> protocol). The third one is the instance saved in\nthe <code class=\"language-text\">dependecies</code> dictionary.</li>\n<li><code class=\"language-text\">resolve&lt;T&gt;(type: T.Type, name: String? = nil) -&gt; T?</code>, that lets you get an instance previously registered. This\nmethod accept the same first two parameter of the previous method. It will return null if none of the registered\ninstance has a combination of <code class=\"language-text\">type</code> and <code class=\"language-text\">name</code> as the one received as parameters.</li>\n</ul>\n<p>As you can see both method extensively uses generics in order to be able to accept any possible class or protocol you\nmay want to use. This is the implementation of <code class=\"language-text\">DependeciesContainer</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DependeciesContainer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> shared <span class=\"token operator\">=</span> <span class=\"token function\">DependeciesContainer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> dependecies<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">DependencyKey</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">Any</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">func</span> register<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">.</span><span class=\"token keyword\">Type</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span> service<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> dependencyKey <span class=\"token operator\">=</span> <span class=\"token function\">DependencyKey</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">:</span> type<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">)</span>\n        dependecies<span class=\"token punctuation\">[</span>dependencyKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> service\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> resolve<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">.</span><span class=\"token keyword\">Type</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> T<span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> dependencyKey <span class=\"token operator\">=</span> <span class=\"token function\">DependencyKey</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">:</span> type<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> dependecies<span class=\"token punctuation\">[</span>dependencyKey<span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> T\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, you can ask some question after seeing this code. First of all, what is a <code class=\"language-text\">Type</code>?\nApple <a href=\"https://docs.swift.org/swift-book/ReferenceManual/Types.html#grammar_metatype-type\" title=\"swift metatype\">defines it</a>\nas:</p>\n<blockquote>\n<p>A metatype type refers to the type of any type, including class types, structure types, enumeration types, and protocol types.</p>\n</blockquote>\n<p>A metatype is the representation of the type of an instance. It allows you to use all of class properties and methods of\na type. It allows also to threat your code as a data. In this specific case we are using the <code class=\"language-text\">Type</code> metatype to identify\nan instance from its own description.<br>\nThe second one question that you could ask is: how can you use the <code class=\"language-text\">DependecyKey</code> class instances as key in\nyour <code class=\"language-text\">dependecies</code> dictionary? This is possible thanks to the <code class=\"language-text\">Hashable</code> and <code class=\"language-text\">Equatable</code> protocols. This class\nimplements the <code class=\"language-text\">hash(into hasher: inout Hasher)</code> method of the <code class=\"language-text\">Hashable</code> protocol by using the combination of <code class=\"language-text\">type</code>\nand <code class=\"language-text\">name</code> received from the <code class=\"language-text\">DependeciesContainer</code>. In that method I'm putting in the same hasher the <code class=\"language-text\">type</code> and\nthe <code class=\"language-text\">name</code>. In particular for the first one I'm extracting a unique identifier using the <code class=\"language-text\">ObjectIdentifier</code> function\nfrom the Swift <code class=\"language-text\">Reflection</code> package.<br>\nIt also implements the <code class=\"language-text\">Equatable</code> protocol using the same fields in\nthe <code class=\"language-text\">static func == (lhs: DependencyKey, rhs: DependencyKey) -&gt; Bool</code> method. By implementing this two protocol a class\ncould be used as key in a dictionary.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DependencyKey</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Hashable</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Equatable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">let</span> type<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Any</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">Type</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">let</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Any</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">Type</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> type\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>into hasher<span class=\"token punctuation\">:</span> <span class=\"token keyword\">inout</span> <span class=\"token builtin\">Hasher</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        hasher<span class=\"token punctuation\">.</span><span class=\"token function\">combine</span><span class=\"token punctuation\">(</span><span class=\"token function\">ObjectIdentifier</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        hasher<span class=\"token punctuation\">.</span><span class=\"token function\">combine</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">func</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>lhs<span class=\"token punctuation\">:</span> <span class=\"token builtin\">DependencyKey</span><span class=\"token punctuation\">,</span> rhs<span class=\"token punctuation\">:</span> <span class=\"token builtin\">DependencyKey</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Bool</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> lhs<span class=\"token punctuation\">.</span>type <span class=\"token operator\">==</span> rhs<span class=\"token punctuation\">.</span>type <span class=\"token operator\">&amp;&amp;</span> lhs<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> rhs<span class=\"token punctuation\">.</span>name\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is all I need for my ultra light dependencies injector <img class=\"emoji-icon\" alt=\"emoji-heart_eyes\" data-icon=\"emoji-heart_eyes\" style=\"display: inline; margin: 0; position: relative; width: 25px\" src=\"data:image/png;base64, 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\" title=\"emoji-heart_eyes\">!!! Let's see it in action in an example.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">protocol</span> <span class=\"token builtin\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function\">isAlive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Bool</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function\">isAlive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Bool</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function\">miaow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"miaow\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function\">isAlive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Bool</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"wooof\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Tiger</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function\">isAlive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Bool</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function\">roar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"roar\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">protocol</span> <span class=\"token builtin\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function\">breath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SickPerson</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function\">breath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"fiuu\"</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function\">cough</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"cough\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> dc <span class=\"token operator\">=</span> <span class=\"token builtin\">DependeciesContainer</span><span class=\"token punctuation\">.</span>shared\n\n<span class=\"token comment\">// Register using class `Type` Dog</span>\ndc<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Dog</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> service<span class=\"token punctuation\">:</span> <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> dog <span class=\"token operator\">=</span> dc<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Dog</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>describing<span class=\"token punctuation\">:</span> dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"__lldb_expr_7.Dog\\n\"</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">.</span><span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"wooof\\n\"</span>\n\n<span class=\"token comment\">// Register using protocol `Type` Person</span>\ndc<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> service<span class=\"token punctuation\">:</span> <span class=\"token function\">SickPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> dc<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>describing<span class=\"token punctuation\">:</span> person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"__lldb_expr_7.SickPerson\\n\"</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span><span class=\"token function\">breath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"fiuu\\n\"</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>person <span class=\"token keyword\">as</span><span class=\"token operator\">!</span> <span class=\"token builtin\">SickPerson</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">cough</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"cough\\n\"</span>\n\n<span class=\"token comment\">// Register using protocol `Type` Animal and variations</span>\ndc<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Animal</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Cat\"</span><span class=\"token punctuation\">,</span> service<span class=\"token punctuation\">:</span> <span class=\"token function\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ndc<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Animal</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Tiger\"</span><span class=\"token punctuation\">,</span> service<span class=\"token punctuation\">:</span> <span class=\"token function\">Tiger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> cat <span class=\"token operator\">=</span> dc<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Animal</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Cat\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>describing<span class=\"token punctuation\">:</span> cat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"__lldb_expr_9.Cat\\n\"</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>cat<span class=\"token punctuation\">.</span><span class=\"token function\">isAlive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>cat <span class=\"token keyword\">as</span><span class=\"token operator\">!</span> <span class=\"token builtin\">Cat</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">miaow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//\"miaow\\n\"</span>\n<span class=\"token keyword\">let</span> tiger <span class=\"token operator\">=</span> dc<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Animal</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Tiger\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>describing<span class=\"token punctuation\">:</span> tiger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"__lldb_expr_9.Tiger\\n\"</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>tiger<span class=\"token punctuation\">.</span><span class=\"token function\">isAlive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tiger <span class=\"token keyword\">as</span><span class=\"token operator\">!</span> <span class=\"token builtin\">Tiger</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">roar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"roar\\n\"</span></code></pre></div>\n<h4>Conclusion</h4>\n<p>You can find all the code shown in this\npost <a href=\"https://github.com/chicio/dependencies-injection-swift-example\" title=\"custom tab bar swiftui\">in this Github repo</a>.\nRemember: sometimes with a couple of classes you can avoid to import big frameworks and library into your projects. You\njust need to study hard the languages and SDK fundamental. <img class=\"emoji-icon\" alt=\"emoji-heartpulse\" data-icon=\"emoji-heartpulse\" style=\"display: inline; margin: 0; position: relative; width: 25px\" src=\"data:image/png;base64, \" title=\"emoji-heartpulse\"></p>","frontmatter":{"title":"How to: create your SUPER simple dependency injector container in Swift","comments":true,"authors":["fabrizio_duroni"],"tags":["swift","ios","apple","mobile application development"],"date":"19 Apr 2020","description":"There are a lot of dependency injection framework in the open source swift world with really cool features like object graph, persistence etc. But what if all you need is a lightweight dependencies container? In this post I will show you how to create it by leveraging the Metatype Type, Generics, the Hashable protocol and the Equatable protocol.","math":false,"image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/d1433c217eae3352ae0de585a162cef2/dfe1c/dp-container.jpg","srcSet":"/static/d1433c217eae3352ae0de585a162cef2/dfe1c/dp-container.jpg 700w","sizes":"100vw"},"sources":[{"srcSet":"/static/d1433c217eae3352ae0de585a162cef2/f2e78/dp-container.webp 700w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.34285714285714286}}}},"fields":{"slug":"/2020/04/19/dependecy-injection-swift/","readingTime":{"text":"6 min read"}}},"site":{"siteMetadata":{"author":"Fabrizio Duroni"}}},"pageContext":{"slug":"/2020/04/19/dependecy-injection-swift/"}},"staticQueryHashes":["3076394108","3736063423","4028829600","4159577854"]}