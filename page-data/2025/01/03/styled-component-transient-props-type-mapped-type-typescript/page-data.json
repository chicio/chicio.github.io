{"componentChunkName":"component---src-templates-post-tsx","path":"/2025/01/03/styled-component-transient-props-type-mapped-type-typescript/","result":{"data":{"markdownRemark":{"html":"<p><em>Transient props and shouldForwardProp are styled components API let you filter out props that\nshould not be passed to the underlying React node or DOM element. In this post we will see how we can create a type\nto automatically define transient props from the interface (of props) of a parent component.</em></p>\n<hr>\n<p>Styled component propagate by default all the props passed to a component to the underlying React node or DOM\nelement.\nThe framework offers a couple of ways to avoid this behavior.\nThe first one is <a href=\"https://styled-components.com/docs/api#transient-props\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Transient props</a>. By using <code class=\"language-text\">$</code> as a\nprefix of a prop name it will not be propagated.\nThe second one is the <code class=\"language-text\">shouldforwardProp</code>.\nThis is a fine-grained way to prevent the prop forward with a specific filter that acts on the name of the\nprops. You can add it using  the <code class=\"language-text\">withConfig</code> api or the <code class=\"language-text\">shouldforwardProp</code> prop as in the example below.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">BigCardProps</span> <span class=\"token punctuation\">{</span>\n  big<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> PostCardContainer <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>div<span class=\"token operator\">&lt;</span>BigCardProps<span class=\"token operator\">></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  /// ...other css rules...\n  \n  /// usage of the \"big\" prop\n  </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>props<span class=\"token punctuation\">.</span>$big <span class=\"token operator\">&amp;&amp;</span> css<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> width: 48%; </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">}\n  \n  /// ...other csss rules...\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\nPostCardContainer<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">shouldForwardProp</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>prop<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> prop <span class=\"token operator\">!==</span> <span class=\"token string\">\"big\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Anyway, both these methods require a manual development specific on the prop names. In particular, it is very\ntedious when you have a parent component and its children are styled components that should receive the same props.\nHowever, you want to avoid forwarding them to the DOM (because their main purpose is styling/logic condition).<br>\nSee, for example, the code below, where there is a parent component that calls a hook and uses a styled component as\nchildren to create an overlay effect.\nThe <code class=\"language-text\">StyledOverlay</code> component receive all the props of the container component, and we want to:</p>\n<ul>\n<li>avoid the forward for <code class=\"language-text\">zIndex</code> and <code class=\"language-text\">delay</code> because they are not DOM attributes.\nThis is why they are contained again in the <code class=\"language-text\">StyledOverlayProps</code> interface with the <code class=\"language-text\">$</code> transient prop prefix.</li>\n<li>forward the <code class=\"language-text\">onClick</code> prop to the underling DOM element (and so we don't add the property to the <code class=\"language-text\">StyledOverlayProps</code> but</li>\n</ul>\n<p>we still pass it to the component).</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">StyledOverlayProps</span> <span class=\"token punctuation\">{</span>\n  $zIndex<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  $delay<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> StyledOverlay <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>div<span class=\"token operator\">&lt;</span>StyledOverlayProps<span class=\"token operator\">></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> props<span class=\"token punctuation\">.</span>$zIndex<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n  background: rgba(0, 0, 0, 0.6);\n  opacity: 0;\n  animation: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>opacity<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 0.25s linear </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>props<span class=\"token punctuation\">.</span>$delay<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n  animation-fill-mode: forwards;\n  backdrop-filter: blur(4px);\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">OverlayProps</span> <span class=\"token punctuation\">{</span>\n  zIndex<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  delay<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">onClick</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> Overlay<span class=\"token operator\">:</span> <span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>OverlayProps<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> zIndex<span class=\"token punctuation\">,</span> onClick<span class=\"token punctuation\">,</span> delay <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useLockBodyScroll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StyledOverlay</span></span>\n      <span class=\"token attr-name\">$zIndex</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>zIndex<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">$delay</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>delay<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In the last couple of years, I felt in love with the TypeScript type system.\nIt is so powerful and flexible that it allows you to write DSL with validation that other languages would dream of.\nA lot of colleagues still argue that this kind of knowledge on the specific part of TypeScript, but I strongly\ndisagree.\nWhy? Because in this post, I will show you a practical application of the knowledge I acquired to solve the\nproblem above.\nIn particular, we want to avoid coding two different interfaces,\nbut just creating a new one starting from the <code class=\"language-text\">OverlayProps</code>\nthat adds the <code class=\"language-text\">$</code> sign to the ones that should be transient props, and skips <code class=\"language-text\">$</code>\nfor the ones that are DOM attributes.</p>\n<h4>Implementation</h4>\n<p>Based on the description above, we want to define a <code class=\"language-text\">TransientProps</code> type that is able to:</p>\n<ul>\n<li>add the <code class=\"language-text\">$</code> prefix to props that are not DOM attributes, and are defined by ourselves</li>\n<li>skip the DOM props in some way, because they should still be forwarded</li>\n</ul>\n<p>To start ith the implementation, we need first to check some types exposed by React.<br>\nIn particular for our use case it will be useful the <a href=\"https://react-typescript-cheatsheet.netlify.app/docs/react-types/ComponentProps\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">ComponentProps</code> type</a>.\nThis utility type lets us extract the props of a React component received as generic parameter.<br>\nThe other interesting type is <code class=\"language-text\">React.JSX.IntrinsicElements</code>.\nThis is a type that declares which JSX elements are allowed/defined and their props.\nIn the case of React DOM, these are the HTML tags.<br>\nSo we can start to define some custom types.\nFirst a type to convert anything to a string, that we will call <code class=\"language-text\">Stringify</code>.\nNext a type that describe a possible <code class=\"language-text\">DOMElement</code>,\nthat in our case will be <code class=\"language-text\">React.JSX.IntrinsicElements</code> or <code class=\"language-text\">false</code>,\nif we don't want to pass/we don't have the need to get the props of the underlying DOM node.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Stringify<span class=\"token operator\">&lt;</span>PropName<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> PropName <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">string</span></span> <span class=\"token operator\">?</span> PropName <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">DomElement</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> React<span class=\"token punctuation\">.</span><span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span>IntrinsicElements <span class=\"token operator\">|</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>So given a <code class=\"language-text\">DomElement</code>, we could have two cases:</p>\n<ul>\n<li>we want to remap all the properties received because none of them is related to the underlying DOM node</li>\n<li>we want to remap all the properties received expect the one related to the underlying node</li>\n</ul>\n<p>We can create a type that we will call <code class=\"language-text\">OmitDomProps</code>,\nthat we will use to select the properties to be remapped into transient props based on the condition above.\nIn particular, if we don't have a <code class=\"language-text\">DomElement</code> defined (so it <code class=\"language-text\">extends false</code>),\nwe will just return the <code class=\"language-text\">CustomProps</code> received.\nIf we have a <code class=\"language-text\">DomElement</code> (so it is inside the <code class=\"language-text\">React.JSX.IntrinsicElements</code> interface),\nwe will omit its prop from the original <code class=\"language-text\">CustomProps</code> interface</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">OmitDomProps<span class=\"token operator\">&lt;</span>CustomProps<span class=\"token punctuation\">,</span> Component <span class=\"token keyword\">extends</span> DomElement<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> Component <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token boolean\">false</span></span>\n        <span class=\"token operator\">?</span> <span class=\"token keyword\">keyof</span> CustomProps\n        <span class=\"token operator\">:</span> <span class=\"token keyword\">keyof</span> Omit<span class=\"token operator\">&lt;</span>CustomProps<span class=\"token punctuation\">,</span> <span class=\"token keyword\">keyof</span> ComponentProps<span class=\"token operator\">&lt;</span>Component<span class=\"token operator\">>></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now we are ready to create the <code class=\"language-text\">TransientProps</code> type.\nThis type receives two generic parameters:</p>\n<ul>\n<li>the <code class=\"language-text\">CustomProps</code> interface for which we want to remap the properties as transient ones.</li>\n<li>the <code class=\"language-text\">IntrinsicElements</code> if needed to get the type of the underlying dome element. If not passed it will have a default <code class=\"language-text\">false</code> value and all the props will become transient.</li>\n</ul>\n<p>This type will use TypeScript mapped types to remap the properties of <code class=\"language-text\">CustomProps</code> received.\nThe utility types created before are used to conditionally filter out DOM properties if needed.\nWe can add our utility type to the <code class=\"language-text\">styled-components</code> module.\nIn this way,\nthanks to <a href=\"https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">module augmentation</a>,\nwe will have the <code class=\"language-text\">TransientProps</code> type exposed as it is a type from the framework itself.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// ...Other imports...</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> ComponentProps <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">\"styled-components\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...Other needed types for defining styled components themes...</span>\n  \n  <span class=\"token keyword\">type</span> <span class=\"token class-name\">Stringify<span class=\"token operator\">&lt;</span>PropName<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> PropName <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">string</span></span> <span class=\"token operator\">?</span> PropName <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">type</span> <span class=\"token class-name\">DomElement</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> React<span class=\"token punctuation\">.</span><span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span>IntrinsicElements <span class=\"token operator\">|</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">type</span> <span class=\"token class-name\">OmitDomProps<span class=\"token operator\">&lt;</span>CustomProps<span class=\"token punctuation\">,</span> Component <span class=\"token keyword\">extends</span> DomElement<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> Component <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token boolean\">false</span></span>\n          <span class=\"token operator\">?</span> <span class=\"token keyword\">keyof</span> CustomProps\n          <span class=\"token operator\">:</span> <span class=\"token keyword\">keyof</span> Omit<span class=\"token operator\">&lt;</span>CustomProps<span class=\"token punctuation\">,</span> <span class=\"token keyword\">keyof</span> ComponentProps<span class=\"token operator\">&lt;</span>Component<span class=\"token operator\">>></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">TransientProps<span class=\"token operator\">&lt;</span>CustomProps<span class=\"token punctuation\">,</span> Component <span class=\"token keyword\">extends</span> DomElement <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>Key <span class=\"token keyword\">in</span> OmitDomProps<span class=\"token operator\">&lt;</span>CustomProps<span class=\"token punctuation\">,</span> Component<span class=\"token operator\">></span> <span class=\"token keyword\">as</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">$</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Stringify<span class=\"token operator\">&lt;</span>Key<span class=\"token operator\">></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> CustomProps<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Below you can see <code class=\"language-text\">Overlay</code> component we saw above refactored with this new type.\nAs you can see, no additional interface is needed to define the props of the component.\nIn this case we are passing the <code class=\"language-text\">div</code> element to filter out the <code class=\"language-text\">onClick</code> prop (but as we mentioned before you can also\nskip the second generic parameter so that all the props will become transient).</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">OverlayProps</span> <span class=\"token punctuation\">{</span>\n  zIndex<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  delay<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">onClick</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> StyledOverlay <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>div<span class=\"token operator\">&lt;</span>TransientProps<span class=\"token operator\">&lt;</span>OverlayProps<span class=\"token punctuation\">,</span> <span class=\"token string\">\"div\"</span><span class=\"token operator\">>></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> props<span class=\"token punctuation\">.</span>$zIndex<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n  background: rgba(0, 0, 0, 0.6);\n  opacity: 0;\n  animation: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>opacity<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 0.25s linear </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>props<span class=\"token punctuation\">.</span>$delay<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n  animation-fill-mode: forwards;\n  backdrop-filter: blur(4px);\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> Overlay<span class=\"token operator\">:</span> <span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>OverlayProps<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> zIndex<span class=\"token punctuation\">,</span> onClick<span class=\"token punctuation\">,</span> delay <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useLockBodyScroll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StyledOverlay</span></span> <span class=\"token attr-name\">$zIndex</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>zIndex<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">$delay</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>delay<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>Conclusion</h4>\n<p>I love the TypeScript type system.\nIts flexibility and rich feature set are so vast and intricate that you could spend years\nexploring all its quirks and perks.\nRemember: with great power comes great responsibility. The same goes for the TypeScript type system.\nSo, make sure to read the documentation carefully before going off on a tangent <img class=\"emoji-icon\" alt=\"emoji-heart\" data-icon=\"emoji-heart\" style=\"display: inline; margin: 0; position: relative; width: 20px\" src=\"data:image/png;base64, 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\" title=\"emoji-heart\">.</p>","frontmatter":{"title":"Styled Components: create a type to define transient props based on the props interface of another component","comments":true,"authors":["fabrizio_duroni"],"tags":["react","typescript","web development"],"date":"03 Jan 2025","description":"Standard transient props and shouldForwardProp are styled components API let you filter out props that  should not be passed to the underlying React node or DOM element. In this post we will see how we can create a type  to automatically define props from the interface of props of a parent component.","math":false,"image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080818","images":{"fallback":{"src":"/static/480d5bdc1433c8e361a3a8839ce49c80/06c65/transient-props.png","srcSet":"/static/480d5bdc1433c8e361a3a8839ce49c80/1f417/transient-props.png 750w,\n/static/480d5bdc1433c8e361a3a8839ce49c80/58cec/transient-props.png 1080w,\n/static/480d5bdc1433c8e361a3a8839ce49c80/a6735/transient-props.png 1366w,\n/static/480d5bdc1433c8e361a3a8839ce49c80/06c65/transient-props.png 1920w","sizes":"100vw"},"sources":[{"srcSet":"/static/480d5bdc1433c8e361a3a8839ce49c80/ca3a2/transient-props.webp 750w,\n/static/480d5bdc1433c8e361a3a8839ce49c80/4bca7/transient-props.webp 1080w,\n/static/480d5bdc1433c8e361a3a8839ce49c80/9ca80/transient-props.webp 1366w,\n/static/480d5bdc1433c8e361a3a8839ce49c80/7988a/transient-props.webp 1920w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.7859375}}}},"fields":{"slug":"/2025/01/03/styled-component-transient-props-type-mapped-type-typescript/","readingTime":{"text":"7 min read"}}},"site":{"siteMetadata":{"author":"Fabrizio Duroni"}}},"pageContext":{"slug":"/2025/01/03/styled-component-transient-props-type-mapped-type-typescript/"}},"staticQueryHashes":["2796887856","3076394108","379746230","4028829600"],"slicesMap":{}}