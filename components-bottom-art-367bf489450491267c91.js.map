{"version":3,"file":"components-bottom-art-367bf489450491267c91.js","mappings":"iHAEA,MA6BMA,EAAY,CAACC,EAAOC,KACzB,GAAuB,iBAAVD,IAAsBE,MAAMC,QAAQH,GAChD,MAAM,IAAII,UAAU,gDAGrBH,EAAUI,OAAOC,OAAO,CACvBC,YAAY,GACVN,GAYH,GAPCD,EADGE,MAAMC,QAAQH,GACTA,EAAMQ,KAAIC,GAAKA,EAAEC,SACvBC,QAAOF,GAAKA,EAAEG,SACdC,KAAK,KAECb,EAAMU,OAGM,IAAjBV,EAAMY,OACT,MAAO,GAGR,GAAqB,IAAjBZ,EAAMY,OACT,OAAOX,EAAQM,WAAaP,EAAMc,cAAgBd,EAAMe,cAezD,OAZqBf,IAAUA,EAAMe,gBAGpCf,EA3DwBgB,KACzB,IAAIC,GAAkB,EAClBC,GAAkB,EAClBC,GAAsB,EAE1B,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAOJ,OAAQQ,IAAK,CACvC,MAAMC,EAAYL,EAAOI,GAErBH,GAAmB,WAAWK,KAAKD,IAAcA,EAAUP,gBAAkBO,GAChFL,EAASA,EAAOO,MAAM,EAAGH,GAAK,IAAMJ,EAAOO,MAAMH,GACjDH,GAAkB,EAClBE,EAAsBD,EACtBA,GAAkB,EAClBE,KACUF,GAAmBC,GAAuB,WAAWG,KAAKD,IAAcA,EAAUN,gBAAkBM,GAC9GL,EAASA,EAAOO,MAAM,EAAGH,EAAI,GAAK,IAAMJ,EAAOO,MAAMH,EAAI,GACzDD,EAAsBD,EACtBA,GAAkB,EAClBD,GAAkB,IAElBA,EAAkBI,EAAUN,gBAAkBM,GAAaA,EAAUP,gBAAkBO,EACvFF,EAAsBD,EACtBA,EAAkBG,EAAUP,gBAAkBO,GAAaA,EAAUN,gBAAkBM,EAEzF,CAEA,OAAOL,CAAM,EAiCJQ,CAAkBxB,IAG3BA,EAAQA,EACNyB,QAAQ,YAAa,IACrBV,cACAU,QAAQ,mBAAmB,CAACC,EAAGC,IAAOA,EAAGb,gBACzCW,QAAQ,cAAcG,GAAKA,EAAEd,gBA5BXL,EA8BDT,EA9BMC,EAAQM,WAAaE,EAAEoB,OAAO,GAAGf,cAAgBL,EAAEc,MAAM,GAAKd,EAAnEA,KA8BK,EAG1BqB,EAAOC,QAAUhC,EAEjB+B,EAAOC,QAAP,QAAyBhC,C,grBCmiBAiC,MAAAA,EC/lBe,uEAERC,UAgBhC,MAAM,EAwBJC,IAAAA,IAAAA,EAGA,MA3BwB,CAExBA,IAAAA,IAAAA,EAAAA,EAAAA,OAAAA,QAAAA,MAGQA,GAAAA,OAAAA,EAAAA,EAAMC,SAAAA,OAAAA,EAANC,EAAcC,eAAAA,EAAdC,EAAwBC,IAAAA,EALR,CA2BFL,GAAAA,EApBQ,CAE9BA,GACsCM,QAAQ,MAAAN,OAAAA,EAAAA,EAAMO,iBAHtB,CAwBFP,GAAAA,EACdO,gBApBY,CAE1BP,GACkCM,QAAQ,MAAAN,OAAAA,EAAAA,EAAMQ,aAHtB,CAuBFR,GAAAA,EACVQ,YAAAA,MAAAA,GAAAA,OAAAA,EAEPR,EAAMS,sBAAAA,EAANC,EAAuBH,eAAe,EAAfA,EAGTP,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,OAAAA,OAAAA,EACrBW,EAASX,KAAAA,OAAAA,EAATY,EAAgBX,SAAAA,OAAAA,EAAhBY,EAAwBV,eAAAA,EAAxBW,EAAkCT,GAAG,EAiInCU,SAAAA,EAgBFC,EACAC,EACAhB,EACAiB,EACAC,GA4BA,YA5BAA,IAAAA,IAAAA,EAAuB,CAAC,GAajBA,EAAAA,CAAAA,EAKFlB,EAAAA,CACHiB,QAAAA,EACAE,WAAYJ,EACZ,kBAAkB,GAClBG,MAAM,EAANA,CAAAA,EACKA,EAAAA,CACHE,QAASJ,EAAW,EAAI,iBAa5BK,EACAL,EACAM,EACAC,EACA1B,EACA2B,EACAC,EACAC,GAEA,MAAM,EAA8B,CAAC,EAEjCF,IACFG,EAAaH,gBAAkBA,EAAAA,UAE3BF,GACFK,EAAaJ,MAAQA,EACrBI,EAAa9B,OAASA,EACtB8B,EAAaH,gBAAkBA,EAC/BG,EAAaC,SAAAA,aAAAA,gBACJN,GAAAA,cAMAA,KALTK,EAAaC,SAAAA,WACbD,EAAaE,IAAM,EACnBF,EAAaG,KAAO,EACpBH,EAAaI,OAAS,EACtBJ,EAAaK,MAAQ,IAUrBP,IACFE,EAAaF,UAAYA,GAGvBC,IACFC,EAAaD,eAAiBA,GAEhC,MAAM,EAAN,KACKL,EAAAA,CACH,eAAc,EACd,yBAAyB,GACzBH,MAAM,EAANA,CACEE,QAASJ,EAAW,EAAI,EACxBiB,WAAW,wBACRN,KAeP,OAJIJ,CAAAA,CAgF8CW,MAAAA,EAAAA,CAAAA,YAAAA,EC9UE,YAGpDrC,IAHmEyB,OACnEA,EADmEC,MAEnEA,EAFmE1B,OAGnEA,GAAAA,EAEA,oBAAIyB,EAAAA,EAAAA,cAAAA,MAAAA,CAAAA,eAAAA,EAEiBJ,MAAO,CAAEiB,WAAgBtC,EAAS0B,EAAS,2BAI5DD,EAAAA,EAAAA,cAAAA,MAAAA,CAEKJ,MAAO,CAAEkB,SAAUb,EAAOc,QAAQ,UACrCC,EAAAA,cAAAA,MAAAA,CACEC,IAAI,GACJC,KAAK,6BACO,OACZpC,IAAAA,mDAAwDP,EAAAA,YAAkB0B,EAAAA,kEAC1EL,MAAO,CACLkB,SAAS,OACTC,QAAQ,QACRT,SAAS,aAATA,IAAAA,EAAAA,EAYR,gBAAuBa,SAAEA,GAAAA,EAAaC,EAAAA,EAAAA,EAAAA,GACxC,uBACGC,EAAAA,SAAAA,KACCL,EAAAA,cAACM,EAAAA,EAAAA,CAAAA,EAAUF,IACVD,EAEmC,+FCvEG,gBAAerC,IAC1DA,EAD0DyC,OAE1DA,EAF0D5B,QAG1DA,EAH0DsB,IAI1DA,EAAAA,GAJ0DpB,WAK1DA,GAAAA,EACGuB,EAAAA,EAAAA,EAAAA,GAEH,kCAEQA,EAAAA,CACJI,SAAS,QACT7B,QAASA,EACTb,IAAKe,EAAaf,OAAAA,EAAM2C,WACb5B,OAAAA,EAAaf,EACxByC,OAAQ1B,EAAa0B,OAAAA,EAASE,cAChB5B,OAAAA,EAAa0B,EAC3BN,IAAKA,IAAAA,EAAAA,EAKoC,gBAAiBrC,SAC9DA,EAD8DgC,QAE9DA,EAAU,GAFoDf,WAG9DA,GAAAA,GAAa6B,EACVN,EAAAA,EAAAA,EAAAA,GAEH,MAAMO,EAAQP,EAAMQ,QAAAA,MAAShD,OAAAA,EAAAA,EAAUgD,OAAAA,EAErCZ,EAAAA,cAACa,EAAAA,EAAAA,CAAAA,EAAUT,EAAWxC,EAAAA,CAAUgD,MAAOA,EAAO/B,WAAYA,KAG5D,OAAKe,EAAQzD,OAAAA,EAAAA,cAAAA,UAAAA,KAMRyD,EAAQ7D,KAAI,QAAG+E,MAAAA,EAAOP,OAAAA,EAAQQ,KAAAA,GAAAA,EAAAA,OAC7Bf,EAAAA,cAAAA,SAAAA,CACEgB,IAAQF,EAAAA,IAASC,EAAAA,IAAQR,EACzBQ,KAAMA,EACND,MAAOA,EACPP,OAAQ1B,EAAa0B,OAAAA,EAASE,cAChB5B,OAAAA,EAAa0B,EAC3BK,MAAOA,GAAAA,IAGVK,GAAAA,CAAAA,EAAAA,IAAAA,EAKPJ,EAAMK,UAAY,CAChBpD,IAAKqD,EAAAA,OAAAA,WACLlB,IAAKkB,EAAAA,OAAAA,WACLP,MAAOO,EAAAA,OACPZ,OAAQY,EAAAA,OACRtC,WAAYsC,EAAAA,MAGdC,EAAQC,YAAAA,UACRD,EAAQF,UAAY,CAClBjB,IAAKkB,EAAAA,OAAAA,WACLtC,WAAYsC,EAAAA,KACZvD,SAAUuD,EAAAA,MAAgB,CACxBrD,IAAKqD,EAAAA,OAAAA,WACLZ,OAAQY,EAAAA,OACRP,MAAOO,EAAAA,SAETvB,QAASuB,EAAAA,QACPA,EAAAA,UAAoB,CAClBA,EAAAA,MAAgB,CACdL,MAAOK,EAAAA,OAAAA,WACPJ,KAAMI,EAAAA,OACNP,MAAOO,EAAAA,OACPZ,OAAQY,EAAAA,OAAAA,aAEVA,EAAAA,MAAgB,CACdL,MAAOK,EAAAA,OACPJ,KAAMI,EAAAA,OAAAA,WACNP,MAAOO,EAAAA,OACPZ,OAAQY,EAAAA,OAAAA,iBAA2BG,MAAAA,EAAAA,CAAAA,YAAAA,EC5GzC,gBAAqB1D,SAAEA,GAAAA,EAAawC,EAAAA,EAAAA,EAAAA,GAClC,OAAIxC,EAAAA,EAAAA,cAECwD,EAAAA,EAAAA,CAAAA,EACKhB,EAAAA,CACJxC,SAAU,CACRE,IAAKF,GAAAA,eAAAA,EAGPqC,IAAI,iCAIQG,GAAAA,EAItBmB,EAAYF,YAAAA,cACZE,EAAYL,UAAY,CACtBtD,SAAUuD,EAAAA,OACVvB,QAAQ,OAARA,EAASwB,EAAQF,gBAAAA,EAARM,EAAmB5B,QAC5BK,IAAK,SAAUG,EAAOqB,EAAUC,GAC9B,OAAKtB,EAAMqB,GAAAA,IAAAA,MAAAA,iBAKSA,EAAAA,kBAA4BC,EAAAA,yBAAAA,IAAAA,GChCvCC,MAAAA,EAAoC,SAAmBvB,GAClE,uCAEIJ,EAAAA,cAACoB,EAAAA,EAAAA,CAAAA,EAAYhB,IACbJ,EAAAA,cAAAA,WAAAA,KACEA,EAAAA,cAACoB,EAAAA,EAAAA,CAAAA,EAAYhB,EAAAA,CAAOvB,YAAAA,MAAY,EAMxC8C,EAAUN,YAAAA,YACVM,EAAUT,UAAYE,EAAQF,UAAAA,MAAAA,EC2G2B,SACvDd,EACAqB,EACAC,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OACGE,EAAAA,IAAAA,MAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,UAAAA,GAAAA,OAEExB,EAAMH,KAAAA,KAAOG,EAAMH,IAAAA,IAAAA,OAAAA,MAAAA,IAAAA,CAMAG,EAAOqB,EAAUC,GAAAA,OAAkBE,IAAAA,IAAAA,MAAAA,iCAJtBF,EAAAA,0JAAAA,EAAAA,EAOd,CACvBG,MAAOV,IAAAA,OAAAA,WACPlB,IAAK6B,GAAAA,EAAAA,CAAAA,KAAAA,QAAAA,QAAAA,kBAAAA,YAAAA,QAAAA,cAAAA,SAAAA,WAAAA,EAAAA,CAAAA,QAAAA,aAAAA,ECjHY,IAAIC,IACvB,IAAI,EAAJ,EAiCA,MAAM,EAA4C,gBAA6BC,GAC7EA,EAAAA,MAD6EH,MAE7EA,EAF6EjD,MAG7EA,EAH6EM,gBAI7EA,EAJ6E+C,UAK7EA,EACAC,MAAOC,EANsEC,YAO7EA,EAP6EC,OAQ7EA,EAR6EC,QAS7EA,GAAAA,EACGlC,EAAAA,EAAAA,EAAAA,GAEH,MAAMnB,MAAEA,EAAF1B,OAASA,EAATyB,OAAiBA,GAAW6C,EAAAA,EAAAA,SNOlC5C,EACA1B,EACAyB,GAIA,MAAM,EAA8B,CAAC,EAErC,IAAI,EAAJ,uBAmBA,MAdeuD,UAGXvD,GACFK,EAAaJ,MAAQA,EACrBI,EAAa9B,OAASA,GAAAA,gBACbyB,IAKTiD,EAAAA,yDAGK,CACLA,UAAAA,EACA,4BAA4B,GAC5BrD,MAAOS,EAAAA,CMrCyBwC,CAKd5C,EAAO1B,EAAQyB,IAHjCJ,MAAO4D,EACPP,UAAWQ,GAAAA,EACRC,EAAAA,EAAAA,EAAAA,GAAAA,GAEQC,EAAAA,EAAAA,UAAAA,GACIC,EAAAA,EAAAA,UAAQ,IAAMC,KAAKC,UAAUjB,EAAMnE,SAAS,CAACmE,EAAMnE,SAGhEyE,IACFF,EAAYE,GAGd,MAAM,EAAN,SLxCAnD,EACAC,EACA1B,GAEA,IAAI,EAAJ,GAWA,MAAM,cAVFyB,IACF+D,EAAAA,+CACGxF,EAAS0B,EAAS,kCAInBD,IACF+D,EAAAA,0BAAkC9D,EAAAA,iIAAqI1B,EAAAA,YAAkB0B,EAAAA,yIAAAA,CAAAA,CK4B3L,CAAuBD,EAAQC,EAAO1B,GA+HtC,OA7HAyF,EAAAA,EAAAA,YAAU,KACHC,IACHA,EAA6BC,QAAAA,IAAAA,CAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,OAAAA,KAAAA,EAAAA,KAAAA,EAAAA,OAAyBC,MACpD,QAAGC,oBAAAA,EAAqBC,qBAAAA,GAAAA,EAAAA,OACtBC,EAAcF,EAEP,CACLA,oBAAAA,EACAC,qBAAAA,EAAAA,KAQR,MAAM,EAAWE,EAAKC,QAAQC,cAAc,2BAG5C,GAAIC,GAAYC,IAkCd,OAjCID,EAASE,UAAAA,MAEXxB,GAAAA,EAAc,CACZyB,WAAU,IAAC,MAEbxB,GAAAA,EAAS,CACPwB,WAAU,IAIZC,YAAW,KACTJ,EAASK,gBAAgB,wBAAhBA,GACR,WAEH3B,GAAAA,EAAc,CACZyB,WAAU,IAGZH,EAASM,iBAAiB,QAAQ,SAAS,IACzCN,EAASO,oBAAoB,OAAQC,GAAAA,MAErC7B,GAAAA,EAAS,CACPwB,WAAU,IAGZC,YAAW,KACTJ,EAASK,gBAAgB,wBAAhBA,GACR,YAIPI,EAAWC,IAAIC,GAKjB,GAAIf,GAAea,EAAWG,IAAID,GAChC,OAGF,IAAI,EAAJ,EAkCA,OAhCApB,EAA2BE,MACzB,IAAwBE,IAArBD,oBAAAA,EAAqBC,qBAAAA,GAAAA,EACjBE,EAAKC,UAIVD,EAAKC,QAAQe,UAAYnB,EAAAA,EAAAA,CACvB3E,WAAU,EACVC,SAAUyF,EAAWG,IAAID,GACzBxC,MAAAA,GACGzB,IAGA+D,EAAWG,IAAID,KAClBG,EAAiBC,uBAAsB,KACjClB,EAAKC,UACPkB,EAAkBrB,EAChBE,EAAKC,QACLa,EACAF,EACAvF,EACAwD,EACAC,EACAC,GAAAA,KAAAA,IASL,KACDkC,GACFG,qBAAqBH,GAEnBE,GACFA,GAAAA,CAAAA,GAGH,CAAC7C,KAGJ+C,EAAAA,EAAAA,kBAAgB,KACVT,EAAWG,IAAID,IAAaf,IAC9BC,EAAKC,QAAQe,UAAYjB,EAAAA,EAAAA,CACvB7E,UAAW0F,EAAWG,IAAID,GAC1B3F,SAAUyF,EAAWG,IAAID,GACzBxC,MAAAA,GACGzB,IAAAA,MAILgC,GAAAA,EAAc,CACZyB,WAAU,IAAC,MAEbxB,GAAAA,EAAS,CACPwB,WAAU,IAAC,GAGd,CAAChC,KAAAA,EAAAA,EAAAA,eAGiBG,EAAAA,EAAAA,CAAAA,EAChBU,EAAAA,CACH9D,MAAM,EAANA,CAAAA,EACK4D,EACA5D,EAAAA,CACHM,gBAAAA,IAEF+C,UAAcQ,GAASR,EAAAA,IAAgBA,EAAAA,IACvC4C,IAAKtB,EACLuB,wBAAyB,CACvBC,OAAQhC,GAEViC,0BAAyB,IAAC,KAIkCC,EAAAA,EAAAA,OAC9D,SAAqB7E,GACnB,OAAKA,EAAMyB,OASDqD,EAAAA,EAAAA,eAKWC,EAAqB/E,GAZ9B8E,IAAAA,IAgBhBE,EAAYlE,UAAYA,EACxBkE,EAAY/D,YAAAA,cAAAA,MAAAA,EAAAA,CAAAA,MAAAA,cAAAA,UAAAA,QAAAA,SAAAA,cAAAA,mBAAAA,cAAAA,UAAAA,UAAAA,mBAAAA,aAAAA,aAAAA,cAAAA,cAAAA,iBAAAA,cAAAA,wBAAAA,ECxL6C,SACvDjB,EACAqB,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OACGG,EAAAA,IAAAA,MAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,UAAAA,GAAAA,MAAAA,cAGDxB,EAAMpB,QAAAA,UACLyC,GAAAA,WAAwBA,IACzBrB,EAAMqB,GAAAA,IAAAA,OAAAA,MAAAA,IAAAA,CAMgBrB,EAAOqB,GAAAA,OAAaG,IAAAA,IAAAA,MAAAA,IAHpCH,EAAAA,KAAarB,EAAMqB,GAAAA,+CAAAA,EAAAA,EAMR,IAAIM,IAAI,CAAC,QAAD,8BAEJ,CACvBjE,IAAKqD,IAAAA,OAAAA,WACLlB,IAAK6B,EACL7C,MAAOoG,EACP9H,OAAQ8H,EACRzE,MAAOO,IAAAA,OACPnC,OAASoB,IACP,YAAIA,EAAMpB,SAGNsG,EAAahB,IAAIlE,EAAMpB,QAI3B,OAAO,IAAIuG,MAAM,iBACEnF,EAAMpB,OAAAA,qHAAAA,GAAAA,GAhF3BoG,ECLgBI,EDOT,SAAP,OAA4B1H,IAC1BA,EACA2H,YAAaC,EAFaC,QAG1BA,GAAAA,EAmBGvF,EAAAA,EAAAA,EAAAA,GAMH,OAJIuF,GACFC,QAAQV,KAAKS,GAGXD,EAAAA,EAAAA,cACMN,EAAAA,EAAAA,CAAYvD,MAAO6D,GAAetF,KAE5CwF,QAAQV,KAAK,mBAAoBpH,GAEvBoH,KAAAA,GA6CelG,IAhF3BoG,ECHFS,EAAYxE,YAAAA,cACZwE,EAAY3E,UAAYA,C,2FCpBjB,MAAM4E,EAAmD,CAC9D,aAAc,aACd,aAAc,UACd,aAAc,YACd,aAAc,WACd,aAAc,SACd,aAAc,UACd,aAAc,WACd,aAAc,UACd,aAAc,yBACd,aAAc,0CACd,aAAc,UACd,aAAc,gBACd,aAAc,eACd,aAAc,qDACd,aAAc,2BACd,aAAc,SACd,aAAc,UACd,aAAc,aACd,aAAc,mDACd,aACE,iEACF,aAAc,8BACd,aAAc,cACd,aAAc,kDACd,aAAc,gDACd,aAAc,2CACd,aAAc,mBACd,aAAc,cACd,aAAc,oCACd,aAAc,aACd,aAAc,QACd,aAAc,WACd,aAAc,yBACd,aAAc,sDACd,aAAc,YACd,aAAc,cACd,aAAc,oCACd,aAAc,UACd,aAAc,cACd,aAAc,sCACd,aAAc,WACd,aAAc,iBACd,aAAc,YACd,aAAc,iBACd,aAAc,8DACd,aAAc,iBACd,aAAc,4DACd,aAAc,qBACd,aAAc,0BACd,aAAc,gCACd,aAAc,2BACd,aAAc,iBACd,aAAc,WACd,aAAc,6CACd,aAAc,SACd,aAAc,kBACd,aAAc,yCACd,aAAc,qCACd,aAAc,yBACd,aAAc,eACd,aAAc,iEACd,aAAc,kCACd,aAAc,mDACd,aAAc,6BACd,aAAc,oBACd,aAAc,gBACd,aAAc,iBACd,aAAc,gDACd,aAAc,sBACd,aAAc,eACd,aAAc,iBACd,aAAc,mBACd,aAAc,sBACd,aAAc,sBACd,aAAc,cACd,aAAc,WACd,aAAc,8BACd,aAAc,wBACd,aAAc,sBACd,aAAc,qBACd,aAAc,wBACd,aAAc,iBACd,aAAc,gC,sDC7EhB,MAMMC,EAAiBC,EAAAA,QAAAA,IAAAA,WAAU,2EAAVA,CAAU,0SAUnB5F,GAAUA,EAAM6F,SAIhB7F,GAAUA,EAAM8F,MAAMC,QAAQ,IAE7BrH,EAAAA,GAITsH,EAAaJ,EAAAA,QAAAA,IAAAA,WAAU,uEAAVA,CAAU,gEAahBK,EAA0CC,IAAAA,IAAC,SACtDC,EAAQ,SACRC,EAAQ,QACRC,GACD,SACCC,EAAAA,EAAAA,MAAAA,EAAAA,SAAAA,CAAAA,SAAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAACX,OA7CE,IA6CcQ,QAASA,EAASI,MAAO,WAClDH,EAAAA,EAAAA,MAACX,EAAc,CAACE,OA9CL,IA8CoB,WAC7BU,EAAAA,EAAAA,KAACP,EAAU,CAACtI,IAAKyI,EAAUtG,IAAKuG,KAChCG,EAAAA,EAAAA,KAACG,EAAAA,EAAoB,CAACL,QAASA,EAAQ,wBAExC,E,iCC/CL,MAAMM,GAAmBf,EAAAA,EAAAA,SAAOgB,EAAAA,GAAe,+EAAtBhB,CAAsB,oLAE9B5F,GAAUA,EAAM8F,MAAMC,QAAQ,KASzCc,EAAoBjB,EAAAA,QAAAA,OAAAA,WAAa,qEAAbA,CAAa,gMACzB5F,GAAUA,EAAM8F,MAAMC,QAAQ,KAErB/F,GAAUA,EAAM8F,MAAMgB,MAAMC,yBACrB/G,GAAUA,EAAM8F,MAAMgB,MAAME,gBAEtDC,EAAAA,EAAAA,SAAAA,GACEA,EAAAA,EAAAA,YAAAA,MASFA,EAAAA,EAAAA,MACejH,GAAUA,EAAM8F,MAAMoB,KAAKH,yBACd/G,GAAUA,EAAM8F,MAAMoB,KAAKF,iBAIrDG,GAA0BvB,EAAAA,EAAAA,SAAOwB,EAAAA,GAAU,sFAAjBxB,CAAiB,oIAW3CyB,GAAezB,EAAAA,EAAAA,SAAOZ,EAAAA,GAAY,2EAAnBY,CAAmB,mHAKpCqB,EAAAA,EAAAA,SAAAA,GACEA,EAAAA,EAAAA,YAAAA,OAqBOK,EAA4BpB,IAAiB,IAAhB,OAAE5I,GAAQ,EAClD,MAAM,EAACiK,EAAa,EAACC,IACnBC,EAAAA,EAAAA,UAAkC,MAEpC,OACEnB,EAAAA,EAAAA,MAAAA,EAAAA,SAAAA,CAAAA,SAAAA,EACEC,EAAAA,EAAAA,KAACI,EAAgB,UACdrJ,EAAO3B,KAAK8F,IACX6E,EAAAA,EAAAA,MAACO,EAAiB,CAEhBR,QAAS,IACPmB,EAAgB/F,EAAMpE,KAAKS,gBAAiBF,iBAC7C,WAED2I,EAAAA,EAAAA,KAACc,EAAY,CACXxH,IAAK4B,EAAMpE,KAAKqK,KAChBjG,MAAOA,EAAMpE,KAAKS,gBAAiBF,mBAErC2I,EAAAA,EAAAA,KAACY,EAAuB,UACrBzB,EAAgBjE,EAAMpE,KAAKqK,UAVzBjG,EAAMpE,KAAKqK,UAerBH,IACChB,EAAAA,EAAAA,KAACN,EAAc,CACbE,UAAUwB,EAAAA,EAAAA,GAAOJ,GACjBnB,SAAU,cACVC,QAAS,IAAMmB,EAAgB,UAGlC,E,wBCvGP,MAAMI,GAA0BhC,EAAAA,EAAAA,SAAOiC,EAAAA,GAAoB,yFAA3BjC,CAA2B,6DAC7C5F,GAAUA,EAAM8F,MAAMC,QAAQ,KAExCkB,EAAAA,EAAAA,SAAAA,IACYjH,GAAUA,EAAM8F,MAAMC,QAAQ,KAG1CkB,EAAAA,EAAAA,MACqBjH,GAAUA,EAAM8F,MAAMoB,KAAKY,mBAI9CC,GAAiBnC,EAAAA,EAAAA,SAAOwB,EAAAA,GAAU,gFAAjBxB,CAAiB,6IAGxB5F,GAAUA,EAAM8F,MAAMkC,UAAU,KACnChI,GAAUA,EAAM8F,MAAMC,QAAQ,KAC/B/F,GAAUA,EAAM8F,MAAMgB,MAAMmB,uBAEpChB,EAAAA,EAAAA,MACUjH,GAAUA,EAAM8F,MAAMoB,KAAKe,uBAGrChB,EAAAA,EAAAA,SAAAA,IACcjH,GAAUA,EAAM8F,MAAMkC,UAAU,KACnChI,GAAUA,EAAM8F,MAAMC,QAAQ,IAGzCkB,EAAAA,EAAAA,SAAAA,IACcjH,GAAUA,EAAM8F,MAAMkC,UAAU,MAI5CE,GAAmBtC,EAAAA,EAAAA,SAAOuC,EAAAA,GAAU,kFAAjBvC,CAAiB,mCACzB5F,GAAUA,EAAM8F,MAAMC,QAAQ,KAkC/C,MAnBsCG,IAAAA,IAAC,OAAE5I,GAAQ,SAC/CiJ,EAAAA,EAAAA,KAAAA,EAAAA,SAAAA,CAAAA,UACED,EAAAA,EAAAA,MAAAA,EAAAA,SAAAA,CAAAA,SAAAA,EACEA,EAAAA,EAAAA,MAACsB,EAAuB,YACtBrB,EAAAA,EAAAA,KAACwB,EAAc,yJAGfxB,EAAAA,EAAAA,KAACwB,EAAc,mMAKjBxB,EAAAA,EAAAA,KAAC2B,EAAgB,WACf3B,EAAAA,EAAAA,KAACe,EAAO,CAAChK,OAAQA,UAGpB,C,+ECtEE,MAAMoJ,EAAuBd,EAAAA,QAAAA,EAAAA,WAAQ,yFAARA,CAAQ,QACxCwC,EAAAA,E,+ECDG,MAAMA,GAAoBC,EAAAA,EAAAA,KAAG,gXACpBrI,GAAUA,EAAM8F,MAAMkC,UAAU,KACzBhI,GAAUA,EAAM8F,MAAMgB,MAAMwB,cACvCtI,GAAUA,EAAM8F,MAAMgB,MAAMmB,wBAC1BjI,GAAUA,EAAM8F,MAAMC,QAAQ,KAG/B/F,GAAUA,EAAM8F,MAAMC,QAAQ,IAKvCkB,EAAAA,EAAAA,MACqBjH,GAAUA,EAAM8F,MAAMoB,KAAKoB,cACtCtI,GAAUA,EAAM8F,MAAMoB,KAAKe,wBAG7BjI,GAAUA,EAAM8F,MAAMgB,MAAMmB,uBAGpChB,EAAAA,EAAAA,YAAAA,OAKUjH,GAAUA,EAAM8F,MAAMgB,MAAMmB,wBAI1BjI,GAAUA,EAAM8F,MAAMoB,KAAKe,uBAGrChB,EAAAA,EAAAA,YAAAA,M,uDCjCC,MAAML,E,QAAiBhB,QAAAA,IAAAA,WAAU,2EAAVA,CAAU,wF,yFCEjC,MAAMuC,GAAYvC,EAAAA,EAAAA,SAAOgB,EAAAA,GAAe,0EAAtBhB,CAAsB,oEAC3CqB,EAAAA,EAAAA,SAAAA,GAIAA,EAAAA,EAAAA,SAAAA,GAIAA,EAAAA,EAAAA,SAAAA,G,uGCFJ,MAAMsB,EAAgB3C,EAAAA,QAAAA,IAAAA,WAAU,iEAAVA,CAAU,gMAMlB5F,GAAUA,EAAM6F,QAGfnH,EAAAA,GAAyBsB,GAAK,GAAQA,EAAMyG,QAK9CD,EAA6BxG,KCtBxCwE,EAAAA,EAAAA,kBAAgB,KACd,MAAMgE,EAAgBC,OAAOC,iBAAiBC,SAASC,MACjDC,EAAwBL,EAActJ,SACtC4J,EAAmBN,EAAcrJ,IACjC4J,EAAoBP,EAAcpJ,KAClC4J,EAAqBR,EAAclJ,MACnC2J,GACHR,OAAOS,SAAWP,SAASQ,gBAAgBC,YAC3CT,SAASQ,gBAAgBE,WAAa,GAKzC,OAJAV,SAASC,KAAKpK,MAAMW,KAAO8J,EAAyB,KACpDN,SAASC,KAAKpK,MAAMU,SAAW,QAC/ByJ,SAASC,KAAKpK,MAAMY,KAAO,IAC3BuJ,SAASC,KAAKpK,MAAMc,MAAQ,IACrB,KACLqJ,SAASC,KAAKpK,MAAMW,IAAM2J,EAC1BH,SAASC,KAAKpK,MAAMU,SAAW2J,EAC/BF,SAASC,KAAKpK,MAAMY,KAAO2J,EAC3BJ,SAASC,KAAKpK,MAAMc,MAAQ0J,EAC5BP,OAAOa,SAAS,EAAGL,EAAuB,CAC3C,GACA,KDKI1C,EAAAA,EAAAA,KAACgC,EAAa,IAAKvI,I,8EEzBrB,MAAMoH,EAAYxB,EAAAA,QAAAA,EAAAA,WAAQ,+DAARA,CAAQ,wEACjB5F,GAAUA,EAAM8F,MAAMkC,UAAU,KACpChI,GAAUA,EAAM8F,MAAMgB,MAAMyC,mBAC3BvJ,GAAUA,EAAM8F,MAAMC,QAAQ,KACzB/F,GAAUA,EAAM8F,MAAM0D,YAEpCvC,EAAAA,EAAAA,MACUjH,GAAUA,EAAM8F,MAAMoB,KAAKqC,kB","sources":["webpack://fabrizioduroni.it/./node_modules/camelcase/index.js","webpack://fabrizioduroni.it/../src/image-utils.ts","webpack://fabrizioduroni.it/../src/components/hooks.ts","webpack://fabrizioduroni.it/../src/components/layout-wrapper.tsx","webpack://fabrizioduroni.it/../src/components/picture.tsx","webpack://fabrizioduroni.it/../src/components/placeholder.tsx","webpack://fabrizioduroni.it/../src/components/main-image.tsx","webpack://fabrizioduroni.it/../src/components/gatsby-image.server.tsx","webpack://fabrizioduroni.it/../src/components/gatsby-image.browser.tsx","webpack://fabrizioduroni.it/../src/components/static-image.server.tsx","webpack://fabrizioduroni.it/../src/components/static-image.tsx","webpack://fabrizioduroni.it/./src/logic/art.ts","webpack://fabrizioduroni.it/./src/components/design-system/organism/modal-with-image.tsx","webpack://fabrizioduroni.it/./src/components/design-system/organism/gallery.tsx","webpack://fabrizioduroni.it/./src/components/bottom-art.tsx","webpack://fabrizioduroni.it/./src/components/design-system/atoms/call-to-action-external.tsx","webpack://fabrizioduroni.it/./src/components/design-system/atoms/call-to-action-style.ts","webpack://fabrizioduroni.it/./src/components/design-system/atoms/container-fluid.tsx","webpack://fabrizioduroni.it/./src/components/design-system/atoms/container.tsx","webpack://fabrizioduroni.it/./src/components/design-system/atoms/overlay.tsx","webpack://fabrizioduroni.it/./src/components/design-system/hooks/use-lock-body-scroll.ts","webpack://fabrizioduroni.it/./src/components/design-system/atoms/paragraph.tsx"],"sourcesContent":["'use strict';\n\nconst preserveCamelCase = string => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = Object.assign({\n\t\tpascalCase: false\n\t}, options);\n\n\tconst postProcess = x => options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n\t}\n\n\tconst hasUpperCase = input !== input.toLowerCase();\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input);\n\t}\n\n\tinput = input\n\t\t.replace(/^[_.\\- ]+/, '')\n\t\t.toLowerCase()\n\t\t.replace(/[_.\\- ]+(\\w|$)/g, (_, p1) => p1.toUpperCase())\n\t\t.replace(/\\d+(\\w|$)/g, m => m.toUpperCase());\n\n\treturn postProcess(input);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n","import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { Fragment, FunctionComponent, PropsWithChildren } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<\n  PropsWithChildren<ILayoutWrapperProps>\n> = function LayoutWrapper({ children, ...props }) {\n  return (\n    <Fragment>\n      <Sizer {...props} />\n      {children}\n\n      {SERVER ? <NativeScriptLoading /> : null}\n    </Fragment>\n  )\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        onStartLoad?.({\n          wasCached: true,\n        })\n\n        ssrImage.addEventListener(`load`, function onLoadListener() {\n          ssrImage.removeEventListener(`load`, onLoadListener)\n\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","export const artDescriptions: { [imageName: string]: string } = {\n  \"2018-11-15\": \"Flowers 🌺\",\n  \"2018-11-16\": \"Rose 🌹\",\n  \"2018-11-28\": \"Flower 🌺\",\n  \"2019-01-20\": \"Horse 🐴\",\n  \"2019-02-18\": \"Oak 🌳\",\n  \"2019-04-18\": \"Ears 👂\",\n  \"2019-04-22\": \"Mouth 👄\",\n  \"2019-05-16\": \"Rose 🌹\",\n  \"2019-06-18\": \"Passion for details ❤️\",\n  \"2019-07-10\": \"Anatomy: a man is 7 1/2 heads tall 📏📏\",\n  \"2019-07-13\": \"Anatomy\",\n  \"2019-07-25\": \"Torso anatomy\",\n  \"2019-07-29\": \"Arms anatomy\",\n  \"2019-08-08\": \"Super Mario Bros from 'super Mario bros 3' for NES\",\n  \"2019-08-11\": \"Old school tattoo sketch\",\n  \"2019-08-13\": \"Hand ✋\",\n  \"2019-08-14\": \"Foot 🦶\",\n  \"2019-08-16\": \"Skull 😍💀\",\n  \"2019-08-31\": \"Astronaut, inspired by Buzz Aldrin moon photo 🚀\",\n  \"2019-09-07\":\n    \"Spaceship inspired by nasa shuttle discovery and Atlantis 🚀🚀\",\n  \"2019-09-11\": \"Toad from Super Mario games\",\n  \"2019-09-16\": \"❤️ Heart ❤️\",\n  \"2019-09-22\": \"Robin with inspirational google search image ❤️\",\n  \"2019-09-23\": \"Freehand baby Goku from Dragon Ball series ❤️\",\n  \"2019-10-07\": \"Cloud Strife from Final Fantasy VII 👾🗡\",\n  \"2019-10-20\": \"Tiger studies 🐯\",\n  \"2019-10-30\": \"Princess 🍑\",\n  \"2019-11-05\": \"Old school snake tattoo draw 🐍🤝\",\n  \"2019-11-15\": \"Ex-voto ❤️\",\n  \"2019-11-26\": \"Yoshi\",\n  \"2019-12-07\": \"500 🚗🏎\",\n  \"2019-12-15\": \"Scarab 🕷 with moon 🌝\",\n  \"2019-12-23\": \"Baby yoda from the mandalorian Disney series 🪐☄️👽\",\n  \"2020-01-05\": \"Wall-e 🤖\",\n  \"2020-01-16\": \"Peonia 🌸🌼\",\n  \"2020-01-26\": \"Gizmo from the gremlins series 👻\",\n  \"2020-02-15\": \"E.t. 👽\",\n  \"2020-02-26\": \"Nemo 🐠🐟🐡\",\n  \"2020-03-04\": \"Geometric trip + mental problems 😰\",\n  \"2020-03-12\": \"Brain 🧠\",\n  \"2020-03-17\": \"Micky Mouse 🐭\",\n  \"2020-04-04\": \"Slimer 👻\",\n  \"2020-04-15\": \"Wolf Spider 🕷\",\n  \"2020-04-23\": \"Tiger's eyes 🐯 (one of the most mainstream tattoo ever 😂)\",\n  \"2020-05-02\": \"Bass guitar 🎸\",\n  \"2020-05-15\": \"Jonathan Davis mic stand design by H.R. Giger. Korn!!❤️❤️\",\n  \"2020-05-25\": \"Gun and bullets 💣\",\n  \"2020-06-07\": \"Pan’s labyrinth faun 💝\",\n  \"2020-06-16\": \"Alien octopus with skull 💀🐙\",\n  \"2020-06-25\": \"Thor hammer (Mjölnir) 🔨\",\n  \"2020-07-08\": \"Triceratops 🦖\",\n  \"2020-07-21\": \"Snail 🐌\",\n  \"2020-08-20\": \"The crown (personal reinterpretation) 👑👸\",\n  \"2020-09-08\": \"Bat 🦇\",\n  \"2020-10-08\": \"Metró de Patris\",\n  \"2020-10-20\": \"Don’t let the world melt you down 🧊🤯\",\n  \"2020-11-11\": \"Flamingo, the lastminute mascot 🦩\",\n  \"2020-12-21\": \"Still life nature 🧺🍎\",\n  \"2021-01-13\": \"Tea pot 🫖☕️\",\n  \"2021-01-31\": \"I spray bits of code and blog posts every now and then 👨‍🎨💻\",\n  \"2021-02-21\": \"After the teapot, tea cup 🍵 ☕️\",\n  \"2021-03-07\": \"Monster mix with some self portrait details 😈💀\",\n  \"2021-03-18\": \"Screaming woman demon 😱😈\",\n  \"2021-04-18\": \"Fabergé eggs 🥚🥚\",\n  \"2021-06-06\": \"Iron Man 🦾🦿\",\n  \"2021-06-22\": \"Ice-cream 🧊🍦\",\n  \"2021-07-10\": \"Domestika course for tattoo design process 🧪\",\n  \"2021-07-24\": \"Confused bomb 💣 🥴\",\n  \"2021-08-20\": \"Bumblebee 🐝\",\n  \"2021-09-26\": \"Loto flower 🌸\",\n  \"2021-10-24\": \"Chicio art logo™\",\n  \"2021-10-31\": \"Halloween bulb 💡👻\",\n  \"2021-11-13\": \"Collapsing world 🌎\",\n  \"2021-12-18\": \"Alien world\",\n  \"2022-04-09\": \"Alien 👽\",\n  \"2022-06-25\": \"Star wars Kylo Ren sword 🗡\",\n  \"2022-07-03\": \"Sword 🗡 and heart ♥️\",\n  \"2022-07-04\": \"New school skull 💀\",\n  \"2022-07-11\": \"New school rose 🌹\",\n  \"2022-07-31\": \"New school lantern 🏮\",\n  \"2022-08-20\": \"Darth Vader 🛸\",\n  \"2022-09-10\": \"New school tattoo machine 🎨\",\n};\n","import styled from \"styled-components\";\nimport { CallToActionExternal } from \"../atoms/call-to-action-external\";\nimport { FC } from \"react\";\nimport { opacity } from \"../utils-css/opacity-keyframes\";\nimport { Overlay } from \"../atoms/overlay\";\n\nconst zIndex = 400;\n\ninterface ModalContainerProps {\n  zIndex: number;\n}\n\nconst ModalContainer = styled.div<ModalContainerProps>`\n  position: fixed;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  max-height: 100%;\n  max-width: 100%;\n  width: 700px;\n  height: 700px;\n  z-index: ${(props) => props.zIndex};\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  padding: ${(props) => props.theme.spacing[4]};\n  opacity: 0;\n  animation: ${opacity} 0.25s linear 0.25s;\n  animation-fill-mode: forwards;\n`;\n\nconst ModalImage = styled.img`\n  width: 100%;\n  height: auto;\n  max-height: 100%;\n  object-fit: contain;\n`;\n\nexport interface ModalWithImageProps {\n  imageUrl: string;\n  imageAlt: string;\n  onClick: () => void;\n}\n\nexport const ModalWithImage: FC<ModalWithImageProps> = ({\n  imageUrl,\n  imageAlt,\n  onClick,\n}) => (\n  <>\n    <Overlay zIndex={zIndex} onClick={onClick} delay={\"0.25s\"} />\n    <ModalContainer zIndex={zIndex}>\n      <ModalImage src={imageUrl} alt={imageAlt} />\n      <CallToActionExternal onClick={onClick}>Close</CallToActionExternal>\n    </ModalContainer>\n  </>\n);\n","import { FC, useState } from \"react\";\nimport { GatsbyImage, getSrc, IGatsbyImageData } from \"gatsby-plugin-image\";\nimport { artDescriptions } from \"../../../logic/art\";\nimport { ModalWithImage } from \"./modal-with-image\";\nimport styled from \"styled-components\";\nimport { ContainerFluid } from \"../atoms/container-fluid\";\nimport { Paragraph } from \"../atoms/paragraph\";\nimport { mediaQuery } from \"../utils-css/media-query\";\n\nconst GalleryContainer = styled(ContainerFluid)`\n  padding: 0;\n  margin: 0 0 ${(props) => props.theme.spacing[7]};\n  display: grid;\n  align-items: center;\n  justify-items: center;\n  grid-column-gap: 20px;\n  grid-row-gap: 20px;\n  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n`;\n\nconst GalleryImageFrame = styled.figure`\n  padding: ${(props) => props.theme.spacing[1]};\n  margin: 0;\n  background-color: ${(props) => props.theme.light.generalBackgroundLight};\n  box-shadow: 0 3px 10px 0 ${(props) => props.theme.light.boxShadowLight};\n\n  ${mediaQuery.minWidth.md} {\n    ${mediaQuery.inputDevice.mouse} {\n      transition: transform 0.2s;\n\n      &:hover {\n        transform: scale(1.025);\n      }\n    }\n  }\n\n  ${mediaQuery.dark} {\n    background: ${(props) => props.theme.dark.generalBackgroundLight};\n    box-shadow: 0 3px 10px 0 ${(props) => props.theme.dark.boxShadowLight};\n  }\n`;\n\nconst GalleryImageDescription = styled(Paragraph)`\n  width: 280px;\n  height: 55px;\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-left: 0;\n  margin-right: 0;\n`;\n\nconst GalleryImage = styled(GatsbyImage)`\n  width: 280px;\n  height: 280px;\n  object-fit: cover;\n\n  ${mediaQuery.minWidth.md} {\n    ${mediaQuery.inputDevice.mouse} {\n      transition: opacity 0.25s ease-in-out;\n\n      &:hover {\n        opacity: 0.7;\n      }\n    }\n  }\n`;\n\nexport interface GalleryProps {\n  images: ReadonlyArray<{\n    readonly node: {\n      readonly name: string;\n      readonly childImageSharp: {\n        readonly gatsbyImageData: IGatsbyImageData;\n      } | null;\n    };\n  }>;\n}\n\nexport const Gallery: FC<GalleryProps> = ({ images }) => {\n  const [currentImage, setCurrentImage] =\n    useState<IGatsbyImageData | null>(null);\n\n  return (\n    <>\n      <GalleryContainer>\n        {images.map((image) => (\n          <GalleryImageFrame\n            key={image.node.name}\n            onClick={() =>\n              setCurrentImage(image.node.childImageSharp!.gatsbyImageData!)\n            }\n          >\n            <GalleryImage\n              alt={image.node.name}\n              image={image.node.childImageSharp!.gatsbyImageData!}\n            />\n            <GalleryImageDescription>\n              {artDescriptions[image.node.name]}\n            </GalleryImageDescription>\n          </GalleryImageFrame>\n        ))}\n      </GalleryContainer>\n      {currentImage && (\n        <ModalWithImage\n          imageUrl={getSrc(currentImage)!}\n          imageAlt={\"Modal Image\"}\n          onClick={() => setCurrentImage(null)}\n        />\n      )}\n    </>\n  );\n};\n","import { Gallery } from \"./design-system/organism/gallery\";\nimport styled from \"styled-components\";\nimport { mediaQuery } from \"./design-system/utils-css/media-query\";\nimport { Container } from \"./design-system/atoms/container\";\nimport { ContainerFullscreen } from \"./design-system/atoms/container-fullscreen\";\nimport { Paragraph } from \"./design-system/atoms/paragraph\";\nimport { FC } from \"react\";\n\nconst ArtDescriptionContainer = styled(ContainerFullscreen)`\n  padding: ${(props) => props.theme.spacing[10]};\n\n  ${mediaQuery.minWidth.sm} {\n    padding: ${(props) => props.theme.spacing[14]};\n  }\n\n  ${mediaQuery.dark} {\n    background-color: ${(props) => props.theme.dark.primaryColorDark};\n  }\n`;\n\nconst ArtDescription = styled(Paragraph)`\n  text-align: center;\n  font-style: italic;\n  font-size: ${(props) => props.theme.fontSizes[3]};\n  margin: ${(props) => props.theme.spacing[4]};\n  color: ${(props) => props.theme.light.textAbovePrimaryColor};\n\n  ${mediaQuery.dark} {\n    color: ${(props) => props.theme.dark.textAbovePrimaryColor};\n  }\n\n  ${mediaQuery.minWidth.xs} {\n    font-size: ${(props) => props.theme.fontSizes[6]};\n    margin: ${(props) => props.theme.spacing[8]};\n  }\n\n  ${mediaQuery.minWidth.sm} {\n    font-size: ${(props) => props.theme.fontSizes[10]};\n  }\n`;\n\nconst ContentContainer = styled(Container)`\n  margin-top: ${(props) => props.theme.spacing[8]};\n  flex: 1 0 auto;\n`;\n\ninterface BottomArtProps {\n  images: ReadonlyArray<{\n    readonly node: {\n      readonly name: string;\n      readonly childImageSharp: {\n        readonly gatsbyImageData: import(\"gatsby-plugin-image\").IGatsbyImageData;\n      } | null;\n    };\n  }>;\n}\n\nconst BottomArt: FC<BottomArtProps> = ({ images }) => (\n  <>\n    <>\n      <ArtDescriptionContainer>\n        <ArtDescription>\n          {`...My love for everything that is related to visual 👨‍🎨 art/science 👨‍🔬 (tattoo, computer graphics etc.) took me to create this page.`}\n        </ArtDescription>\n        <ArtDescription>\n          {` A\n          collection of all the draws I created while I'm learning to draw. Keep it in your bookmark to see my drawing skills evolution 🎨 (or follow me on instagram ❤️)...`}\n        </ArtDescription>\n      </ArtDescriptionContainer>\n      <ContentContainer>\n        <Gallery images={images} />\n      </ContentContainer>\n    </>\n  </>\n);\n\nexport default BottomArt;\n","import styled from \"styled-components\";\nimport { callToActionStyle } from \"./call-to-action-style\";\n\nexport const CallToActionExternal = styled.a`\n  ${callToActionStyle}\n`;\n","import { css } from \"styled-components\";\nimport { mediaQuery } from \"../utils-css/media-query\";\n\nexport const callToActionStyle = css`\n  font-size: ${(props) => props.theme.fontSizes[3]};\n  background-color: ${(props) => props.theme.light.accentColor};\n  color: ${(props) => props.theme.light.textAbovePrimaryColor};\n  padding: ${(props) => props.theme.spacing[2]};\n  border: none;\n  border-radius: 4px;\n  margin: ${(props) => props.theme.spacing[0]};\n  line-height: 1;\n  text-align: center;\n  display: inline-block;\n\n  ${mediaQuery.dark} {\n    background-color: ${(props) => props.theme.dark.accentColor};\n    color: ${(props) => props.theme.dark.textAbovePrimaryColor};\n  }\n\n  color: ${(props) => props.theme.light.textAbovePrimaryColor};\n  text-decoration: none;\n\n  ${mediaQuery.inputDevice.mouse} {\n    transition: transform 0.15s;\n  }\n\n  &:hover {\n    color: ${(props) => props.theme.light.textAbovePrimaryColor};\n    text-decoration: none;\n\n    @media (prefers-color-scheme: dark) {\n      color: ${(props) => props.theme.dark.textAbovePrimaryColor};\n    }\n\n    ${mediaQuery.inputDevice.mouse} {\n      transform: scale(1.1);\n    }\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const ContainerFluid = styled.div`\n  width: 100%;\n  padding-right: 15px;\n  padding-left: 15px;\n  margin-right: auto;\n  margin-left: auto;\n`;\n","import styled from \"styled-components\";\nimport { ContainerFluid } from \"./container-fluid\";\nimport { mediaQuery } from \"../utils-css/media-query\";\n\nexport const Container = styled(ContainerFluid)`\n  ${mediaQuery.minWidth.xs} {\n    max-width: 540px;\n  }\n\n  ${mediaQuery.minWidth.sm} {\n    max-width: 720px;\n  }\n\n  ${mediaQuery.minWidth.md} {\n    max-width: 960px;\n  }\n`;\n","import styled from \"styled-components\";\nimport { opacity } from \"../utils-css/opacity-keyframes\";\nimport { FC } from \"react\";\nimport { useLockBodyScroll } from \"../hooks/use-lock-body-scroll\";\n\nexport interface OverlayProps {\n  zIndex: number;\n  delay: string;\n  onClick: () => void;\n}\n\nconst StyledOverlay = styled.div<OverlayProps>`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: ${(props) => props.zIndex};\n  background: rgba(0, 0, 0, 0.6);\n  opacity: 0;\n  animation: ${opacity} 0.25s linear ${(props) => `${props.delay}`};\n  animation-fill-mode: forwards;\n  backdrop-filter: blur(4px);\n`;\n\nexport const Overlay: FC<OverlayProps> = (props) => {\n  useLockBodyScroll();\n\n  return <StyledOverlay {...props} />;\n};\n","import { useLayoutEffect } from \"react\";\n\nexport const useLockBodyScroll = () => {\n  useLayoutEffect(() => {\n    const originalStyle = window.getComputedStyle(document.body);\n    const originalPositionStyle = originalStyle.position;\n    const originalTopStyle = originalStyle.top;\n    const originalLeftStyle = originalStyle.left;\n    const originalRightStyle = originalStyle.right;\n    const currentScrollYPosition =\n      (window.scrollY || document.documentElement.scrollTop) -\n      (document.documentElement.clientTop || 0);\n    document.body.style.top = -currentScrollYPosition + \"px\";\n    document.body.style.position = \"fixed\";\n    document.body.style.left = \"0\";\n    document.body.style.right = \"0\";\n    return () => {\n      document.body.style.top = originalTopStyle;\n      document.body.style.position = originalPositionStyle;\n      document.body.style.left = originalLeftStyle;\n      document.body.style.right = originalRightStyle;\n      window.scrollTo(0, currentScrollYPosition);\n    };\n  }, []);\n};\n","import styled from \"styled-components\";\nimport { mediaQuery } from \"../utils-css/media-query\";\n\nexport const Paragraph = styled.p`\n  font-size: ${(props) => props.theme.fontSizes[2]};\n  color: ${(props) => props.theme.light.primaryTextColor};\n  margin: ${(props) => props.theme.spacing[0]};\n  line-height: ${(props) => props.theme.lineHeight};\n\n  ${mediaQuery.dark} {\n    color: ${(props) => props.theme.dark.primaryTextColor};\n  }\n`;\n"],"names":["camelCase","input","options","Array","isArray","TypeError","Object","assign","pascalCase","map","x","trim","filter","length","join","toUpperCase","toLowerCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","character","test","slice","preserveCamelCase","replace","_","p1","m","charAt","module","exports","height","prototype","node","images","_node$images","fallback","_node$images$fallback","src","Boolean","gatsbyImageData","gatsbyImage","childImageSharp","_node$childImageSharp","getImage","_getImage","_getImage$images","_getImage$images$fall","format","isLoading","isLoaded","loading","style","shouldLoad","opacity","placeholder","layout","width","backgroundColor","objectFit","objectPosition","wrapperStyle","position","top","left","bottom","right","transition","sources","paddingTop","maxWidth","display","React","alt","role","children","props","Fragment","Sizer","srcSet","decoding","undefined","t","s","sizes","Image","media","type","key","fallbackImage","propTypes","PropTypes","Picture","displayName","isRequired","Placeholder","_Picture$propTypes","propName","componentName","MainImage","rest","image","altValidator","Set","as","className","class","preactClass","onStartLoad","onLoad","onError","overflow","wStyle","wClass","wrapperProps","useRef","useMemo","JSON","stringify","sizer","useEffect","renderImageToStringPromise","import","then","renderImageToString","swapPlaceholderImage","renderImage","root","current","querySelector","ssrImage","hasNativeLazyLoadSupport","complete","wasCached","setTimeout","removeAttribute","addEventListener","removeEventListener","onLoadListener","imageCache","add","cacheKey","has","innerHTML","animationFrame","requestAnimationFrame","cleanupCallback","cancelAnimationFrame","useLayoutEffect","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","memo","warn","GatsbyImageHydrator","GatsbyImage","checkDimensionProps","validLayouts","Error","GatsbyImageBrowser","__imageData","imageData","__error","console","StaticImage","artDescriptions","ModalContainer","styled","zIndex","theme","spacing","ModalImage","ModalWithImage","_ref","imageUrl","imageAlt","onClick","_jsxs","_jsx","Overlay","delay","CallToActionExternal","GalleryContainer","ContainerFluid","GalleryImageFrame","light","generalBackgroundLight","boxShadowLight","mediaQuery","dark","GalleryImageDescription","Paragraph","GalleryImage","Gallery","currentImage","setCurrentImage","useState","name","getSrc","ArtDescriptionContainer","ContainerFullscreen","primaryColorDark","ArtDescription","fontSizes","textAbovePrimaryColor","ContentContainer","Container","callToActionStyle","css","accentColor","StyledOverlay","originalStyle","window","getComputedStyle","document","body","originalPositionStyle","originalTopStyle","originalLeftStyle","originalRightStyle","currentScrollYPosition","scrollY","documentElement","scrollTop","clientTop","scrollTo","primaryTextColor","lineHeight"],"sourceRoot":""}