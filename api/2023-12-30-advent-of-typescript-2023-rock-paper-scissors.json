{"title":"Advent of TypeScript 2023: Rock paper scissors (Day 17)","description":"Rock paper scissors, one of the classical kata games you can find at a coding dojo. Can it be  implemented using only TypeScript types?","date":"30 Dec 2023","readingTime":"8 min read","featuredImageUrl":"https://www.fabrizioduroni.it/static/2fc3a6a1d90e465968cce7c40416437b/advent-of-typescript-rock-paper-scissors.jpg","authors":[{"name":"Fabrizio Duroni","url":"https://www.linkedin.com/in/fabrizio-duroni/","imageUrl":"https://www.fabrizioduroni.it/static/04f0a7ef38819e8782b8b6f55b44fd95/fabrizio-duroni.jpg"}],"tags":["typescript","advent of typescript 2023"],"math":false,"content":"<p><em>Rock paper scissors, one of the classical kata games you can find at a coding dojo. Can it be\nimplemented using only TypeScript types?</em></p>\n<hr>\n<p>This is the first of the four challenges I liked the most from \"Advent Of TypeScript 2023\" by <a href=\"https://typehero.dev\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TypeHero</a>.\nCheck out the other challenges I liked <a href=\"/2023/12/29/advent-of-typescript-2023-favourite-challenges/\" title=\"advent of typescript 2023 challenges\">here</a>.</p>\n<h4>The problem</h4>\n<p>\"Rock, paper scissors\" is a classical game used at coding dojo. Let's check the rule explained in a \"Christmas way\"\nby the guy from TypeHero:</p>\n<blockquote>\n<p>It's Sunday and there's one week to go before the big day (Christmas Eve) when the elfs' work for the year will finally be complete. For the last 20 years the only game the elves have had to play together is StarCraft. They're looking for a fresh game to play.\nSo, they get the idea to try a Rock, Paper, Scissors tournament.</p>\n<p>But the elves are sorta nerdy so they want to accomplish this using TypeScript types. The <code class=\"language-text\">WhoWins</code> should type to\ncorrectly determine the winner in a Rock-Paper-Scissors game. The first argument is the opponent and the second\nargument is you!</p>\n<p>What's Rock, Paper, Scissors?\nIn case you haven't played it before, basically:\nit's a two-player game where each player picks one of three options: Rock (👊🏻), Paper (🖐🏾), and Scissors (✌🏽)\ngame rules:</p>\n<ul>\n<li>Rock crushes Scissors (Rock wins)</li>\n<li>Scissors cuts Paper (Scissors wins)</li>\n<li>Paper covers Rock (Paper wins)</li>\n<li>otherwise, a draw</li>\n</ul>\n</blockquote>\n<p>So our goal is to implement the <code class=\"language-text\">WhoWins</code> type which will take two arguments:</p>\n<ul>\n<li>the move of the opponent player</li>\n<li>our move</li>\n</ul>\n<p>Given these parameters, the type should be return if we win, lose or there is a draw. Let's go!!!</p>\n<h4>Implementation</h4>\n<p>The exercise gave me only a couple of code hints to start from: the union type <code class=\"language-text\">RockPaperScissors</code> and the <code class=\"language-text\">WhoWins</code>\nwithout any parameter.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">RockPaperScissors</span> <span class=\"token operator\">=</span> <span class=\"token string\">'👊🏻'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'🖐🏾'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'✌🏽'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">WhoWins</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">unknown</span></code></pre></div>\n<p>Let's take a look also at the test cases provided by TypeHero to check if the implementation is correct.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">test_0_actual</span> <span class=\"token operator\">=</span> WhoWins<span class=\"token operator\">&lt;</span><span class=\"token string\">'👊🏻'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🖐🏾'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'win'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">test_1_actual</span> <span class=\"token operator\">=</span> WhoWins<span class=\"token operator\">&lt;</span><span class=\"token string\">'👊🏻'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'✌🏽'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'lose'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">test_2_actual</span> <span class=\"token operator\">=</span> WhoWins<span class=\"token operator\">&lt;</span><span class=\"token string\">'👊🏻'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'👊🏻'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'draw'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">test_3_actual</span> <span class=\"token operator\">=</span> WhoWins<span class=\"token operator\">&lt;</span><span class=\"token string\">'🖐🏾'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'👊🏻'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'lose'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">test_4_actual</span> <span class=\"token operator\">=</span> WhoWins<span class=\"token operator\">&lt;</span><span class=\"token string\">'🖐🏾'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'✌🏽'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'win'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">test_5_actual</span> <span class=\"token operator\">=</span> WhoWins<span class=\"token operator\">&lt;</span><span class=\"token string\">'🖐🏾'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🖐🏾'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'draw'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">test_6_actual</span> <span class=\"token operator\">=</span> WhoWins<span class=\"token operator\">&lt;</span><span class=\"token string\">'✌🏽'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'👊🏻'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'win'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">test_7_actual</span> <span class=\"token operator\">=</span> WhoWins<span class=\"token operator\">&lt;</span><span class=\"token string\">'✌🏽'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'✌🏽'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'draw'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">test_8_actual</span> <span class=\"token operator\">=</span> WhoWins<span class=\"token operator\">&lt;</span><span class=\"token string\">'✌🏽'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🖐🏾'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'lose'</span></code></pre></div>\n<p>From the test cases, it was clear that I needed to define a type for the states of the game. I chose to type them\nas an enum called <code class=\"language-text\">GameState</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">enum</span> GameState <span class=\"token punctuation\">{</span>\n\tDraw <span class=\"token operator\">=</span> <span class=\"token string\">'draw'</span><span class=\"token punctuation\">,</span>\n\tWin <span class=\"token operator\">=</span> <span class=\"token string\">'win'</span><span class=\"token punctuation\">,</span>\n\tLose <span class=\"token operator\">=</span> <span class=\"token string\">'lose'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>After the game state definition, I had to find a way to encode the game rule system using only TypeScript types. From\nthe description of the problem above, it is quite clear that the rules to make a player win are basically 3:</p>\n<ul>\n<li>Rock crushes Scissors (Rock wins)</li>\n<li>Scissors cuts Paper (Scissors wins)</li>\n<li>Paper covers Rock (Paper wins)</li>\n</ul>\n<p>In all the other cases, there is a draw, and it doesn't really matter which is the move of each player.</p>\n<p>Given the consideration above, I started to think about creating a type that takes as parameters the current move of\neach player and the expected move for a specific rule (of the 3 above).\nThis type should check internally if the current move of the opponent and of myself matches the one of a specific rule.\nIf they match, it means that I won, otherwise I lost.\nTo check if two moves match, I used <a href=\"https://www.typescriptlang.org/docs/handbook/2/conditional-types.html\" title=\"conditional types\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">conditional types</a>.\nLet's see what I implemented.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Move<span class=\"token operator\">&lt;</span>\n  CurrentMovePlayerA <span class=\"token keyword\">extends</span> RockPaperScissors<span class=\"token punctuation\">,</span> \n  ExpectedMovePlayerA <span class=\"token keyword\">extends</span> RockPaperScissors<span class=\"token punctuation\">,</span> \n  CurrentMovePlayerB <span class=\"token keyword\">extends</span> RockPaperScissors<span class=\"token punctuation\">,</span> \n  ExpectedMovePlayerB <span class=\"token keyword\">extends</span> RockPaperScissors\n<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span>\n  CurrentMovePlayerA <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ExpectedMovePlayerA</span>\n    <span class=\"token operator\">?</span> CurrentMovePlayerB <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ExpectedMovePlayerB</span>\n      <span class=\"token operator\">?</span> GameState<span class=\"token punctuation\">.</span>Win\n      <span class=\"token operator\">:</span> GameState<span class=\"token punctuation\">.</span>Lose\n    <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span></code></pre></div>\n<p>The first two rows of this <code class=\"language-text\">Move</code> type uses, as I mentioned before, conditional types to see if the current moves\nmatch the expected moves for a rule, and returns the correct game states.\nIf the move for one of the two players doesn't match the one of the rule I return <code class=\"language-text\">never</code>, a special type that\nrepresents the <strong>type of values that never occur</strong>.\nThis type has <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#the-never-type\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">two interesting features</a>:</p>\n<ul>\n<li>it is a subtype of and assignable to every type.</li>\n<li>no type is a subtype of or assignable to never (except never itself).</li>\n</ul>\n<p>In fact (in type theory terms) this is the <a href=\"https://en.wikipedia.org/wiki/Bottom_type\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bottom type</a> of the\nTypeScript language.\nAfter creating the <code class=\"language-text\">Move</code> type I was able to encode the three rules we saw above, in a simple and self explained (by\nthe code itself) way.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">RockCrushesScissors<span class=\"token operator\">&lt;</span>\n  MovePlayerA <span class=\"token keyword\">extends</span> RockPaperScissors<span class=\"token punctuation\">,</span>\n  MovePlayerB <span class=\"token keyword\">extends</span> RockPaperScissors\n<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> Move<span class=\"token operator\">&lt;</span>MovePlayerA<span class=\"token punctuation\">,</span> <span class=\"token string\">'✌🏽'</span><span class=\"token punctuation\">,</span> MovePlayerB<span class=\"token punctuation\">,</span> <span class=\"token string\">'👊🏻'</span><span class=\"token operator\">></span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PaperCoversRock<span class=\"token operator\">&lt;</span>\n  MovePlayerA <span class=\"token keyword\">extends</span> RockPaperScissors<span class=\"token punctuation\">,</span>\n  MovePlayerB <span class=\"token keyword\">extends</span> RockPaperScissors\n<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> Move<span class=\"token operator\">&lt;</span>MovePlayerA<span class=\"token punctuation\">,</span> <span class=\"token string\">'👊🏻'</span><span class=\"token punctuation\">,</span> MovePlayerB<span class=\"token punctuation\">,</span> <span class=\"token string\">'🖐🏾'</span><span class=\"token operator\">></span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ScissorsCutPaper<span class=\"token operator\">&lt;</span>\n  MovePlayerA <span class=\"token keyword\">extends</span> RockPaperScissors<span class=\"token punctuation\">,</span>\n  MovePlayerB <span class=\"token keyword\">extends</span> RockPaperScissors\n<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> Move<span class=\"token operator\">&lt;</span>MovePlayerA<span class=\"token punctuation\">,</span> <span class=\"token string\">'🖐🏾'</span><span class=\"token punctuation\">,</span> MovePlayerB<span class=\"token punctuation\">,</span> <span class=\"token string\">'✌🏽'</span><span class=\"token operator\">></span></code></pre></div>\n<p>So, the next question was: how ddo I combine them? The general consideration around the game is that you cannot have\nmultiple rules satisfied during a game run.\nThis can be coded in the TypeScript type system using a <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">union type</a> and relying on the <code class=\"language-text\">never</code> type, that has another interesting\nfeature when it comes to union types.\nIt is well explained here in the <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#the-never-type\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TypeScript documentation</a>:</p>\n<blockquote>\n<p>Because never is a subtype of every type, it is always omitted from union types and it is ignored in function return type inference as long as there are other types being returned.</p>\n</blockquote>\n<p>This basically means that, given <strong>how I coded the non-matched case for the <code class=\"language-text\">Move</code> type</strong>, and <strong>given how <code class=\"language-text\">never</code>\nworks with union types</strong>, I was able to create a union type that describe the whole rule system for which the player\ncould win. This led me to the creation of the <code class=\"language-text\">SomeoneWon</code> type.\nThe result of this type will always be the application of one and only one of the three rules, because for the\n<code class=\"language-text\">never</code> property we just saw, the rules that doesn't match will be discarded and omitted from the <code class=\"language-text\">SomeoneWon</code> type.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">SomeoneWon<span class=\"token operator\">&lt;</span>MovePlayerA <span class=\"token keyword\">extends</span> RockPaperScissors<span class=\"token punctuation\">,</span> MovePlayerB <span class=\"token keyword\">extends</span> RockPaperScissors<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> \n\t\t\t\t<span class=\"token operator\">|</span> PaperCoversRock<span class=\"token operator\">&lt;</span>MovePlayerA<span class=\"token punctuation\">,</span> MovePlayerB<span class=\"token operator\">></span> \n\t\t\t\t<span class=\"token operator\">|</span> ScissorsCutPaper<span class=\"token operator\">&lt;</span>MovePlayerA<span class=\"token punctuation\">,</span> MovePlayerB<span class=\"token operator\">></span> \n\t\t\t\t<span class=\"token operator\">|</span> RockCrushesScissors<span class=\"token operator\">&lt;</span>MovePlayerA<span class=\"token punctuation\">,</span> MovePlayerB<span class=\"token operator\">></span></code></pre></div>\n<p>Now the only missing rule is the one that describes the draw state.\nFor it, I didn't need to know which are the specific current moves of each player, I just needed to check that the\nmoves were equal.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Draw<span class=\"token operator\">&lt;</span>\n  MovePlayerA <span class=\"token keyword\">extends</span> RockPaperScissors<span class=\"token punctuation\">,</span>\n  MovePlayerB <span class=\"token keyword\">extends</span> RockPaperScissors\n<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> MovePlayerA <span class=\"token keyword\">extends</span> <span class=\"token class-name\">MovePlayerB</span>\n  <span class=\"token operator\">?</span> GameState<span class=\"token punctuation\">.</span>Draw\n  <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></code></pre></div>\n<p>So I was ready to define the <code class=\"language-text\">WhoWins</code> enum, as a combination of the types above plus one last missing type,\n<code class=\"language-text\">GameStateToString</code>, needed to convert the enum to a string (I will be honest, I regret my choice of an enum to\ndescribe the game state <img class=\"emoji-icon\" alt=\"emoji-sweat_smile\" data-icon=\"emoji-sweat_smile\" style=\"display: inline; margin: 0; position: relative; width: 20px\" src=\"data:image/png;base64, \" title=\"emoji-sweat_smile\">).</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">GameStateToString<span class=\"token operator\">&lt;</span>State <span class=\"token keyword\">extends</span> GameState<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>State<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">WhoWins<span class=\"token operator\">&lt;</span>MovePlayerA <span class=\"token keyword\">extends</span> RockPaperScissors<span class=\"token punctuation\">,</span> MovePlayerB <span class=\"token keyword\">extends</span> RockPaperScissors<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span>\n  Draw<span class=\"token operator\">&lt;</span>MovePlayerA<span class=\"token punctuation\">,</span> MovePlayerB<span class=\"token operator\">></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">GameState</span><span class=\"token punctuation\">.</span>Draw\n    <span class=\"token operator\">?</span> GameStateToString<span class=\"token operator\">&lt;</span>GameState<span class=\"token punctuation\">.</span>Draw<span class=\"token operator\">></span>\n    <span class=\"token operator\">:</span> GameStateToString<span class=\"token operator\">&lt;</span>SomeoneWon<span class=\"token operator\">&lt;</span>MovePlayerA<span class=\"token punctuation\">,</span> MovePlayerB<span class=\"token operator\">>></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can find the full solution and the test cases we saw before to verify its correctness down below.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">RockPaperScissors</span> <span class=\"token operator\">=</span> <span class=\"token string\">'👊🏻'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'🖐🏾'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'✌🏽'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">enum</span> GameState <span class=\"token punctuation\">{</span>\n  Draw <span class=\"token operator\">=</span> <span class=\"token string\">'draw'</span><span class=\"token punctuation\">,</span>\n  Win <span class=\"token operator\">=</span> <span class=\"token string\">'win'</span><span class=\"token punctuation\">,</span>\n  Lose <span class=\"token operator\">=</span> <span class=\"token string\">'lose'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">GameStateToString<span class=\"token operator\">&lt;</span>State <span class=\"token keyword\">extends</span> GameState<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>State<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Move<span class=\"token operator\">&lt;</span>\n  CurrentMovePlayerA <span class=\"token keyword\">extends</span> RockPaperScissors<span class=\"token punctuation\">,</span>\n  ExpectedMovePlayerA <span class=\"token keyword\">extends</span> RockPaperScissors<span class=\"token punctuation\">,</span>\n  CurrentMovePlayerB <span class=\"token keyword\">extends</span> RockPaperScissors<span class=\"token punctuation\">,</span>\n  ExpectedMovePlayerB <span class=\"token keyword\">extends</span> RockPaperScissors\n<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span>\n  CurrentMovePlayerA <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ExpectedMovePlayerA</span>\n    <span class=\"token operator\">?</span> CurrentMovePlayerB <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ExpectedMovePlayerB</span>\n      <span class=\"token operator\">?</span> GameState<span class=\"token punctuation\">.</span>Win\n      <span class=\"token operator\">:</span> GameState<span class=\"token punctuation\">.</span>Lose\n    <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">RockCrushesScissors<span class=\"token operator\">&lt;</span>\n  MovePlayerA <span class=\"token keyword\">extends</span> RockPaperScissors<span class=\"token punctuation\">,</span>\n  MovePlayerB <span class=\"token keyword\">extends</span> RockPaperScissors\n<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> Move<span class=\"token operator\">&lt;</span>MovePlayerA<span class=\"token punctuation\">,</span> <span class=\"token string\">'✌🏽'</span><span class=\"token punctuation\">,</span> MovePlayerB<span class=\"token punctuation\">,</span> <span class=\"token string\">'👊🏻'</span><span class=\"token operator\">></span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PaperCoversRock<span class=\"token operator\">&lt;</span>\n  MovePlayerA <span class=\"token keyword\">extends</span> RockPaperScissors<span class=\"token punctuation\">,</span>\n  MovePlayerB <span class=\"token keyword\">extends</span> RockPaperScissors\n<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> Move<span class=\"token operator\">&lt;</span>MovePlayerA<span class=\"token punctuation\">,</span> <span class=\"token string\">'👊🏻'</span><span class=\"token punctuation\">,</span> MovePlayerB<span class=\"token punctuation\">,</span> <span class=\"token string\">'🖐🏾'</span><span class=\"token operator\">></span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ScissorsCutPaper<span class=\"token operator\">&lt;</span>\n  MovePlayerA <span class=\"token keyword\">extends</span> RockPaperScissors<span class=\"token punctuation\">,</span>\n  MovePlayerB <span class=\"token keyword\">extends</span> RockPaperScissors\n<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> Move<span class=\"token operator\">&lt;</span>MovePlayerA<span class=\"token punctuation\">,</span> <span class=\"token string\">'🖐🏾'</span><span class=\"token punctuation\">,</span> MovePlayerB<span class=\"token punctuation\">,</span> <span class=\"token string\">'✌🏽'</span><span class=\"token operator\">></span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">SomeoneWon<span class=\"token operator\">&lt;</span>MovePlayerA <span class=\"token keyword\">extends</span> RockPaperScissors<span class=\"token punctuation\">,</span> MovePlayerB <span class=\"token keyword\">extends</span> RockPaperScissors<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span>\n  <span class=\"token operator\">|</span> PaperCoversRock<span class=\"token operator\">&lt;</span>MovePlayerA<span class=\"token punctuation\">,</span> MovePlayerB<span class=\"token operator\">></span>\n  <span class=\"token operator\">|</span> ScissorsCutPaper<span class=\"token operator\">&lt;</span>MovePlayerA<span class=\"token punctuation\">,</span> MovePlayerB<span class=\"token operator\">></span>\n  <span class=\"token operator\">|</span> RockCrushesScissors<span class=\"token operator\">&lt;</span>MovePlayerA<span class=\"token punctuation\">,</span> MovePlayerB<span class=\"token operator\">></span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Draw<span class=\"token operator\">&lt;</span>\n  MovePlayerA <span class=\"token keyword\">extends</span> RockPaperScissors<span class=\"token punctuation\">,</span>\n  MovePlayerB <span class=\"token keyword\">extends</span> RockPaperScissors\n<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> MovePlayerA <span class=\"token keyword\">extends</span> <span class=\"token class-name\">MovePlayerB</span>\n  <span class=\"token operator\">?</span> GameState<span class=\"token punctuation\">.</span>Draw\n  <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">WhoWins<span class=\"token operator\">&lt;</span>MovePlayerA <span class=\"token keyword\">extends</span> RockPaperScissors<span class=\"token punctuation\">,</span> MovePlayerB <span class=\"token keyword\">extends</span> RockPaperScissors<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span>\n  Draw<span class=\"token operator\">&lt;</span>MovePlayerA<span class=\"token punctuation\">,</span> MovePlayerB<span class=\"token operator\">></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">GameState</span><span class=\"token punctuation\">.</span>Draw\n    <span class=\"token operator\">?</span> GameStateToString<span class=\"token operator\">&lt;</span>GameState<span class=\"token punctuation\">.</span>Draw<span class=\"token operator\">></span>\n    <span class=\"token operator\">:</span> GameStateToString<span class=\"token operator\">&lt;</span>SomeoneWon<span class=\"token operator\">&lt;</span>MovePlayerA<span class=\"token punctuation\">,</span> MovePlayerB<span class=\"token operator\">>></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ---------- TEST CASES ------------</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">test_0_actual</span> <span class=\"token operator\">=</span> WhoWins<span class=\"token operator\">&lt;</span><span class=\"token string\">'👊🏻'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🖐🏾'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'win'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">test_1_actual</span> <span class=\"token operator\">=</span> WhoWins<span class=\"token operator\">&lt;</span><span class=\"token string\">'👊🏻'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'✌🏽'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'lose'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">test_2_actual</span> <span class=\"token operator\">=</span> WhoWins<span class=\"token operator\">&lt;</span><span class=\"token string\">'👊🏻'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'👊🏻'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'draw'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">test_3_actual</span> <span class=\"token operator\">=</span> WhoWins<span class=\"token operator\">&lt;</span><span class=\"token string\">'🖐🏾'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'👊🏻'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'lose'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">test_4_actual</span> <span class=\"token operator\">=</span> WhoWins<span class=\"token operator\">&lt;</span><span class=\"token string\">'🖐🏾'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'✌🏽'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'win'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">test_5_actual</span> <span class=\"token operator\">=</span> WhoWins<span class=\"token operator\">&lt;</span><span class=\"token string\">'🖐🏾'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🖐🏾'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'draw'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">test_6_actual</span> <span class=\"token operator\">=</span> WhoWins<span class=\"token operator\">&lt;</span><span class=\"token string\">'✌🏽'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'👊🏻'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'win'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">test_7_actual</span> <span class=\"token operator\">=</span> WhoWins<span class=\"token operator\">&lt;</span><span class=\"token string\">'✌🏽'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'✌🏽'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'draw'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">test_8_actual</span> <span class=\"token operator\">=</span> WhoWins<span class=\"token operator\">&lt;</span><span class=\"token string\">'✌🏽'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🖐🏾'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'lose'</span></code></pre></div>\n<h4>Conclusion</h4>\n<p>As I mentioned at the beginning, this is the first of the four challenges I liked the most from \"Advent Of TypeScript\n2023\" by <a href=\"https://typehero.dev\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TypeHero</a>. Check out the other challenges I liked <a href=\"/2023/12/29/advent-of-typescript-2023-favourite-challenges/\" title=\"advent of typescript 2023 challenges\">here</a>.</p>"}